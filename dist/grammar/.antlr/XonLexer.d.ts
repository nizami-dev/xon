import { ATN } from "antlr4ts/atn/ATN";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { Vocabulary } from "antlr4ts/Vocabulary";
export declare class XonLexer extends Lexer {
    static readonly MultiLineComment = 1;
    static readonly SingleLineComment = 2;
    static readonly If = 3;
    static readonly Loop = 4;
    static readonly In = 5;
    static readonly BitAnd = 6;
    static readonly BitOr = 7;
    static readonly BitXor = 8;
    static readonly RightShiftArithmetic = 9;
    static readonly LeftShiftArithmetic = 10;
    static readonly RightShiftLogical = 11;
    static readonly OpenBracket = 12;
    static readonly CloseBracket = 13;
    static readonly OpenParen = 14;
    static readonly CloseParen = 15;
    static readonly OpenBrace = 16;
    static readonly CloseBrace = 17;
    static readonly SemiColon = 18;
    static readonly Comma = 19;
    static readonly Assign = 20;
    static readonly QuestionMark = 21;
    static readonly Colon = 22;
    static readonly Ellipsis = 23;
    static readonly Dot = 24;
    static readonly Plus = 25;
    static readonly Minus = 26;
    static readonly BitNot = 27;
    static readonly Not = 28;
    static readonly Multiply = 29;
    static readonly Divide = 30;
    static readonly Modulus = 31;
    static readonly Pow = 32;
    static readonly Sharp = 33;
    static readonly LessThan = 34;
    static readonly MoreThan = 35;
    static readonly LessThanEquals = 36;
    static readonly MoreThanEquals = 37;
    static readonly Equals = 38;
    static readonly NotEquals = 39;
    static readonly And = 40;
    static readonly Or = 41;
    static readonly MultiplyAssign = 42;
    static readonly DivideAssign = 43;
    static readonly ModulusAssign = 44;
    static readonly PlusAssign = 45;
    static readonly MinusAssign = 46;
    static readonly LeftShiftArithmeticAssign = 47;
    static readonly RightShiftArithmeticAssign = 48;
    static readonly RightShiftLogicalAssign = 49;
    static readonly BitAndAssign = 50;
    static readonly BitXorAssign = 51;
    static readonly BitOrAssign = 52;
    static readonly LambdaStart = 53;
    static readonly Pipe = 54;
    static readonly BooleanLiteral = 55;
    static readonly DecimalLiteral = 56;
    static readonly FloatLiteral = 57;
    static readonly StringLiteral = 58;
    static readonly CharacterLiteral = 59;
    static readonly Preprocessor = 60;
    static readonly LambdaParam = 61;
    static readonly ID = 62;
    static readonly WhiteSpaces = 63;
    static readonly UnexpectedCharacter = 64;
    static readonly ERROR = 2;
    static readonly channelNames: string[];
    static readonly modeNames: string[];
    static readonly ruleNames: string[];
    private static readonly _LITERAL_NAMES;
    private static readonly _SYMBOLIC_NAMES;
    static readonly VOCABULARY: Vocabulary;
    get vocabulary(): Vocabulary;
    constructor(input: CharStream);
    get grammarFileName(): string;
    get ruleNames(): string[];
    get serializedATN(): string;
    get channelNames(): string[];
    get modeNames(): string[];
    static readonly _serializedATN: string;
    static __ATN: ATN;
    static get _ATN(): ATN;
}
