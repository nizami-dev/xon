import '../../grammar/xon-parser': AttributeContext
import '../../lib/core': Boolean, none, None, String
import '../../metadata/declaration/attribute/attribute-declaration-metadata': AttributeDeclarationMetadata
import '../../util/id-token': getIdToken, IdToken
import '../../util/source-range': SourceRange
import '../body/body-tree-helper': getBodyTree
import '../body/body-tree': BodyTree
import '../expression/expression-tree-helper': getExpressionTree
import '../expression/expression-tree': ExpressionTree
import '../parameter/parameter-tree-helper': getParameterTrees
import '../parameter/parameter-tree': ParameterTree
import '../tree': Tree

object AttributeTree(ctx AttributeContext) Tree
  metadata AttributeDeclarationMetadata
  sourceRange SourceRange = SourceRange.fromContext(ctx)
  isMethod Boolean = !!ctx.parameters()
  name IdToken = getIdToken(ctx._name)
  hasBracket Boolean = !!ctx.parameters()?.OPEN_BRACKET()
  hasParen Boolean = !!ctx.parameters()?.OPEN_PAREN()
  parameters ParameterTree[] = getParameterTrees(ctx.parameters()?.parameter())
  type ExpressionTree? = getExpressionTree(ctx.expression()) or none
  body BodyTree? = getBodyTree(ctx.body()) or none

  toString() String
    if this.hasBracket
      parameters = this.isMethod and #{`[${this.parameters.join(', ')}]`} or ''
    else
      parameters = this.isMethod and #{`(${this.parameters.join(', ')})`} or ''
    type = this.type and ' ' + this.type or ''
    body = this.body and this.body or ''
    return this.name + parameters + type + body
