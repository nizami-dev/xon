import '../../grammar/xon-parser': AttributeContext
import '../../lib/core': none, None, String
import '../../metadata/declaration/attribute/attribute-declaration-metadata': AttributeDeclarationMetadata
import '../../util/id-token': getIdToken, IdToken
import '../../util/source-range': SourceRange
import '../body/body-tree-helper': getBodyTree
import '../body/body-tree': BodyTree
import '../expression/expression-tree-helper': getExpressionTree
import '../expression/expression-tree': ExpressionTree
import '../parameter/parameter-tree-helper': getParameterTrees
import '../parameter/parameter-tree': ParameterTree
import '../tree': Tree

object AttributeTree[ctx AttributeContext] Tree
  metadata AttributeDeclarationMetadata
  sourceRange SourceRange = SourceRange.fromContext[ctx]
  isMethod boolean = !!ctx.parameters[]
  name IdToken = getIdToken[ctx._name]
  parameters ParameterTree[] = getParameterTrees[ctx.parameters[]?.parameter[]]
  type ExpressionTree? = getExpressionTree[ctx.expr[]] or none
  body BodyTree? = getBodyTree[ctx.body[]] or none

  toString[] String
    parameters = (this.isMethod and #{`[${this.parameters.join(', ')}]`}) or ''
    type = (this.type and ' ' + this.type) or ''
    body = (this.body and this.body) or ''
    return this.name + parameters + type + body
