{FloatLiteralContext, IntegerLiteralContext, LiteralContext, StringLiteralContext} := import '../../grammar/xon-parser'
{Issue} := import '../../issue-service/issue'
{Never, none} := import '../../lib/core'
{FloatLiteralTree} := import './float/float-literal-tree'
{IntegerLiteralTree} := import './integer/integer-literal-tree'
{LiteralTree} := import './literal-tree'
{StringLiteralTree} := import './string/string-literal-tree'

getLiteralTree: (ctx: LiteralContext) => LiteralTree or Never
  #{if (!ctx) return none;}
  #{if (ctx instanceof FloatLiteralContext) return new FloatLiteralTree(ctx);}
  #{if (ctx instanceof IntegerLiteralContext) return new IntegerLiteralTree(ctx);}
  #{if (ctx instanceof StringLiteralContext) return new StringLiteralTree(ctx);}

  Issue.errorFromContext(ctx, #{`Literal tree not found for "${ctx.constructor.name}"`})
