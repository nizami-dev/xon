{SourceContext} := import '../../grammar/xon-parser'
{String} := import '../../lib/core'
{SourceRange} := import '../../util/source-range'
{getAttributeTrees} := import '../attribute/attribute-tree-helper'
{AttributeTree} := import '../attribute/attribute-tree'
{getDefinitionTrees} := import '../definition/definition-tree-helper'
{DefinitionTree} := import '../definition/definition-tree'
{ImportStatementTree} := import '../statement/import/import-statement-tree'
{getStatementTrees} := import '../statement/statement-tree-helper'
{StatementTree} := import '../statement/statement-tree'
{Tree} := import '../tree'
{SourceMetadata} := import '../../metadata/source/source-metadata'

class SourceTree(ctx: SourceContext) is Tree
  ctx := ctx
  metadata: SourceMetadata
  sourceRange := SourceRange.fromContext(ctx)
  statements := getStatementTrees(ctx.statement())
  attributes := getAttributeTrees(ctx.attribute())
  definitions := getDefinitionTrees(ctx.definition())

  toString: () => String
    importStatements := this.statements.filter((x) => x is ImportStatementTree).map((x) => x as ImportStatementTree)
    importStatementsMap := #{{}}
    #{for (let importStatement of importStatements) {
      importStatementsMap[importStatement.path.toString()] = importStatementsMap[importStatement.path.toString()] || []
      const members = importStatement.members.map(x => x.toString())
      importStatementsMap[importStatement.path.toString()].push(...members)
    }}
    uniqueImportStatements := Object.keys(importStatementsMap).sort((a, b) => a.localeCompare(b)).map(
      (x) => #{`import ${x}: ${[...new Set(importStatementsMap[x].sort((a, b) => a.localeCompare(b)))].join(', ')}`}
    ).join('\n')
    otherStatements := this.statements.filter((x) => !(x is ImportStatementTree)).join('\n')
    attributes := this.attributes.join('\n\n')
    definitions := this.definitions.join('\n\n')
    result := [uniqueImportStatements, otherStatements, attributes, definitions].filter((x) => x).join('\n\n')
    return (result and result + '\n') or ''
