import '../../grammar/xon-parser': ParameterContext
import '../../lib/core': None, String
import '../../metadata/declaration/parameter/parameter-declaration-metadata': ParameterDeclarationMetadata
import '../../util/id-token': getIdToken, IdToken
import '../../util/source-range': SourceRange
import '../body/body-tree-helper': getBodyTree
import '../body/body-tree': BodyTree
import '../expression/expression-tree-helper': getExpressionTree
import '../expression/expression-tree': ExpressionTree
import '../expression/method/method-expression-tree': MethodExpressionTree
import '../tree': Tree

object ParameterTree[ctx ParameterContext] Tree
  ctx ParameterContext = ctx
  sourceRange SourceRange = SourceRange.fromContext[ctx]
  metadata ParameterDeclarationMetadata
  name ExpressionTree = getExpressionTree[ctx._name]
  type ExpressionTree? = getExpressionTree[ctx._type]
  value ExpressionTree? = getExpressionTree[ctx._value]

  toString[] String
    type = this.type?.toString[] or ''
    if type and !(this.type is MethodExpressionTree)
      type = ' ' + type
    value = this.value and ' = ' + this.value or ''
    return this.name + type + value
