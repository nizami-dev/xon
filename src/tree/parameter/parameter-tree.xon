import '../../grammar/xon-parser': ParameterContext
import '../../util/source-reference': SourceReference
import '../body/body-tree': BodyTree
import '../body/body-tree-helper': getBodyTree
import '../expression/expression-tree': ExpressionTree
import '../expression/expression-tree-helper': getExpressionTree
import '../expression/method/method-expression-tree': MethodExpressionTree
import '../id/id-tree': IdTree
import '../id/id-tree-helper': getIdTree
import '../tree.gen': Tree

object ParameterTree(ctx ParameterContext) Tree
  ctx ParameterContext = ctx
  sourceReference SourceReference = SourceReference.fromContext(ctx)
  id IdTree = getIdTree(ctx.id())
  type ExpressionTree? = getExpressionTree(ctx.expr()) or null
  body BodyTree? = getBodyTree(ctx.body()) or null

  toString()
    set type = this.type?.toString() or ''
    if type and this.ctx.id().OPERATOR() or not (this.type is MethodExpressionTree)
      set type = ' ' + type

    set body = this.body and this.body or ''
    return this.id + type + body
