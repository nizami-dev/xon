{ParameterContext} := import '../../grammar/xon-parser'
{None, String} := import '../../lib/core'
{ParameterDeclarationMetadata} := import '../../metadata/declaration/parameter/parameter-declaration-metadata'
{getIdToken, IdToken} := import '../../util/id-token'
{SourceRange} := import '../../util/source-range'
{getBodyTree} := import '../body/body-tree-helper'
{BodyTree} := import '../body/body-tree'
{getExpressionTree} := import '../expression/expression-tree-helper'
{ExpressionTree} := import '../expression/expression-tree'
{MethodExpressionTree} := import '../expression/method/method-expression-tree'
{Tree} := import '../tree'

class ParameterTree(ctx: ParameterContext) is Tree
  ctx := ctx
  metadata: ParameterMetadata
  sourceRange := SourceRange.fromContext(ctx)
  variable := getExpressionTree(ctx._variable)
  type := getExpressionTree(ctx._type)
  body := getBodyTree(ctx.body())

  toString: () => String
    type := this.type?.toString() or ''
    if type and !(this.type is MethodExpressionTree)
      type = ' ' + type
    body := this.body?.toString() or ''
    return this.variable + type + body
