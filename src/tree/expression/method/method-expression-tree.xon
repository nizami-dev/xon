{MethodExpressionContext} := import '../../../grammar/xon-parser'
{Boolean, String} := import '../../../lib/core'
{MethodExpressionMetadata} := import '../../../metadata/expression/method/method-expression-metadata'
{SourceRange} := import '../../../util/source-range'
{getParameterTrees} := import '../../parameter/parameter-tree-helper'
{ParameterTree} := import '../../parameter/parameter-tree'
{getExpressionTree} := import '../expression-tree-helper'
{ExpressionTree} := import '../expression-tree'

class MethodExpressionTree(ctx: MethodExpressionContext) is ExpressionTree
  ctx := ctx
  sourceRange := SourceRange.fromContext(ctx)
  hasBracket := !!ctx.parameters().OPEN_BRACKET()
  hasParen := !!ctx.parameters().OPEN_PAREN()
  parameters := getParameterTrees(ctx.parameters().parameter())
  value := getExpressionTree(ctx._value)

  toString: () => String
    if this.hasBracket
      return #{`[${this.parameters.join(', ')}] => ${this.value}`}

    return #{`(${this.parameters.join(', ')}) => ${this.value}`}
