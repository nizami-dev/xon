{InvokeExpressionContext} := import '../../../grammar/xon-parser'
{Boolean, String} := import '../../../lib/core'
{ExpressionMetadata} := import '../../../metadata/expression/expression-metadata'
{SourceRange} := import '../../../util/source-range'
{getExpressionTree, getExpressionTrees} := import '../expression-tree-helper'
{ExpressionTree} := import '../expression-tree'

class InvokeExpressionTree(ctx: InvokeExpressionContext) is ExpressionTree
  ctx := ctx
  sourceRange := SourceRange.fromContext(ctx)
  instance := getExpressionTree(ctx.expression())
  hasBracket := !!ctx.parameters().OPEN_BRACKET()
  hasParen := !!ctx.parameters().OPEN_PAREN()
  arguments: [] = getExpressionTrees(ctx.parameters().parameter().map((x) => x._variable))

  toString: () => String
    if this.hasBracket
      return #{`${this.instance}[${this.arguments.join(', ')}]`}
    return #{`${this.instance}(${this.arguments.join(', ')})`}
