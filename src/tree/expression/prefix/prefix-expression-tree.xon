{PrefixExpressionContext} := import '../../../grammar/xon-parser'
{String} := import '../../../lib/core'
{ExpressionMetadata} := import '../../../metadata/expression/expression-metadata'
{getIdToken, IdToken} := import '../../../util/id-token'
{SourceRange} := import '../../../util/source-range'
{getExpressionTree} := import '../expression-tree-helper'
{ExpressionTree} := import '../expression-tree'

class PrefixExpressionTree(ctx: PrefixExpressionContext) is ExpressionTree
  ctx := ctx
  sourceRange := SourceRange.fromContext(ctx)
  name := getIdToken(ctx._op)
  value := getExpressionTree(ctx.expression())

  toString := () => #{`${this.name}${this.value}`}
