{DefinitionContext} := import '../../grammar/xon-parser'
{none, None, String} := import '../../lib/core'
{DefinitionDeclarationMetadata} := import '../../metadata/declaration/definition/definition-declaration-metadata'
{getIdToken, IdToken} := import '../../util/id-token'
{SourceRange} := import '../../util/source-range'
{getAttributeTrees} := import '../attribute/attribute-tree-helper'
{AttributeTree} := import '../attribute/attribute-tree'
{getExpressionTree} := import '../expression/expression-tree-helper'
{ExpressionTree} := import '../expression/expression-tree'
{getParameterTrees} := import '../parameter/parameter-tree-helper'
{ParameterTree} := import '../parameter/parameter-tree'
{Tree} := import '../tree'

class DefinitionTree(ctx: DefinitionContext) is Tree
  metadata: DefinitionDeclarationMetadata
  ctx := ctx
  sourceRange := SourceRange.fromContext(ctx)
  modifier := getIdToken(ctx._modifier)
  name := getIdToken(ctx._name)
  parameters: [] = getParameterTrees(ctx.parameters()?.parameter()) or none
  base := getExpressionTree(ctx.expression()) or none
  attributes := getAttributeTrees(ctx.attribute())

  toString: () => String
    modifier := this.modifier.text
    base := (this.base and ' ' + this.base) or ''
    parameters := this.ctx.parameters() and #{`(${this.parameters.join(', ')})`} or ''
    properties := this.attributes.filter((x) => !x.isMethod).join('\n')
    methodsWithBody := this.attributes.filter((x) => x.isMethod and x.body).join('\n\n')
    methodsWithNoBody := this.attributes.filter((x) => x.isMethod and !x.body).join('\n')
    attributes := [properties, methodsWithBody, methodsWithNoBody].filter((x) => x).join('\n\n').replace(
      #{/^(.+)/gm},
      '  $1',
    )
    return (modifier + this.name + parameters + base + ((attributes and '\n' + attributes) or ''))
