{
  AssertStatementContext,
  ExportStatementContext,
  ExpressionStatementContext,
  ForStatementContext,
  IfStatementContext,
  ImportStatementContext,
  ParameterStatementContext,
  ReturnStatementContext,
  StatementContext,
  WhileStatementContext,
} := import '../../grammar/xon-parser'
{Issue} := import '../../issue-service/issue'
{none} := import '../../lib/core'
{AssertStatementTree} := import './assert/assert-statement-tree'
{ExportStatementTree} := import './export/export-statement-tree'
{ExpressionStatementTree} := import './expression/expression-statement-tree'
{ForStatementTree} := import './for/for-statement-tree'
{IfStatementTree} := import './if/if-statement-tree'
{ImportStatementTree} := import './import/import-statement-tree'
{ParameterStatementTree} := import './parameter/parameter-statement-tree'
{ReturnStatementTree} := import './return/return-statement-tree'
{StatementTree} := import './statement-tree'
{WhileStatementTree} := import './while/while-statement-tree'

getStatementTree: (ctx: StatementContext) => StatementTree
  if !ctx
    return none
  if ctx is AssertStatementContext
    return #{new AssertStatementTree(ctx)}
  if ctx is ParameterStatementContext
    return #{new ParameterStatementTree(ctx)}
  if ctx is ExportStatementContext
    return #{new ExportStatementTree(ctx)}
  if ctx is ExpressionStatementContext
    return #{new ExpressionStatementTree(ctx)}
  if ctx is ForStatementContext
    return #{new ForStatementTree(ctx)}
  if ctx is IfStatementContext
    return #{new IfStatementTree(ctx)}
  if ctx is ImportStatementContext
    return #{new ImportStatementTree(ctx)}
  if ctx is ReturnStatementContext
    return #{new ReturnStatementTree(ctx)}
  if ctx is WhileStatementContext
    return #{new WhileStatementTree(ctx)}

  Issue.errorFromContext(ctx, #{`Statement tree not found for '${ctx.constructor.name}'`})

getStatementTrees := (contexts) => contexts?.map(getStatementTree) or []
