// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN = 3;
	public static readonly CLOSE = 4;
	public static readonly LAMBDA = 5;
	public static readonly FLOAT = 6;
	public static readonly INTEGER = 7;
	public static readonly STRING = 8;
	public static readonly PREPROCESSOR = 9;
	public static readonly OP = 10;
	public static readonly DOT = 11;
	public static readonly META = 12;
	public static readonly COMMA = 13;
	public static readonly ASSIGN = 14;
	public static readonly COLON = 15;
	public static readonly ID = 16;
	public static readonly NL = 17;
	public static readonly LINE_COMMENT = 18;
	public static readonly WS = 19;
	public static readonly BLOCK_COMMENT = 20;
	public static readonly LINE_JOINING = 21;
	public static readonly UNEXPECTED = 22;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN", "CLOSE", "LAMBDA", "FLOAT", "INTEGER", "STRING", "PREPROCESSOR", 
		"OP", "DOT", "META", "COMMA", "ASSIGN", "COLON", "ID", "NL", "LINE_COMMENT", 
		"WS", "BLOCK_COMMENT", "LINE_JOINING", "UNEXPECTED", "Radix", "DigitNumber", 
		"AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "'.'", "'::'", "','", "'='",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN", "CLOSE", "LAMBDA", "FLOAT", "INTEGER", 
		"STRING", "PREPROCESSOR", "OP", "DOT", "META", "COMMA", "ASSIGN", "COLON", 
		"ID", "NL", "LINE_COMMENT", "WS", "BLOCK_COMMENT", "LINE_JOINING", "UNEXPECTED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_action(_localctx, actionIndex);
			break;

		case 14:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 7:
			return this.OP_sempred(_localctx, predIndex);
		}
		return true;
	}
	private OP_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return  this.isOperator();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x18\xE6\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03" +
		"\x04\x03\x04\x05\x04:\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05" +
		"\x04A\n\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x05\x05L\n\x05\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06R\n" +
		"\x06\x03\x07\x03\x07\x03\x07\x03\x07\x07\x07X\n\x07\f\x07\x0E\x07[\v\x07" +
		"\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x07\be\n\b\f\b\x0E" +
		"\bh\v\b\x03\b\x03\b\x07\bl\n\b\f\b\x0E\bo\v\b\x03\b\x03\b\x03\t\x06\t" +
		"t\n\t\r\t\x0E\tu\x03\t\x03\t\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f" +
		"\x03\r\x03\r\x03\x0E\x03\x0E\x05\x0E\x85\n\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x05\x0E\x8A\n\x0E\x03\x0F\x03\x0F\x07\x0F\x8E\n\x0F\f\x0F\x0E\x0F\x91" +
		"\v\x0F\x03\x10\x03\x10\x07\x10\x95\n\x10\f\x10\x0E\x10\x98\v\x10\x06\x10" +
		"\x9A\n\x10\r\x10\x0E\x10\x9B\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03" +
		"\x11\x07\x11\xA4\n\x11\f\x11\x0E\x11\xA7\v\x11\x03\x12\x06\x12\xAA\n\x12" +
		"\r\x12\x0E\x12\xAB\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03" +
		"\x13\x07\x13\xB5\n\x13\f\x13\x0E\x13\xB8\v\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x07\x14\xC1\n\x14\f\x14\x0E\x14\xC4\v" +
		"\x14\x03\x14\x05\x14\xC7\n\x14\x03\x14\x03\x14\x05\x14\xCB\n\x14\x03\x14" +
		"\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x05\x16\xD5\n" +
		"\x16\x03\x16\x03\x16\x03\x17\x03\x17\x07\x17\xDB\n\x17\f\x17\x0E\x17\xDE" +
		"\v\x17\x03\x18\x03\x18\x07\x18\xE2\n\x18\f\x18\x0E\x18\xE5\v\x18\x06f" +
		"mu\xB6\x02\x02\x19\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t" +
		"\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02" +
		"\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'" +
		"\x02\x17)\x02\x18+\x02\x02-\x02\x02/\x02\x02\x03\x02\x0E\x05\x02**]]}" +
		"}\x05\x02++__\x7F\x7F\x03\x02))\n\x02))^^ddhhppttvvxx\x05\x02C\\aac|\x06" +
		"\x022;C\\aac|\x04\x02\f\f\x0F\x0F\x04\x02\v\v\"\"\x03\x022;\x04\x02ZZ" +
		"zz\x04\x022;aa\x05\x022;C\\c|\x02\u0100\x02\x03\x03\x02\x02\x02\x02\x05" +
		"\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03" +
		"\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03" +
		"\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03" +
		"\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03" +
		"\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02" +
		"\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02" +
		"\x031\x03\x02\x02\x02\x054\x03\x02\x02\x02\x079\x03\x02\x02\x02\tK\x03" +
		"\x02\x02\x02\vQ\x03\x02\x02\x02\rS\x03\x02\x02\x02\x0F^\x03\x02\x02\x02" +
		"\x11s\x03\x02\x02\x02\x13y\x03\x02\x02\x02\x15{\x03\x02\x02\x02\x17~\x03" +
		"\x02\x02\x02\x19\x80\x03\x02\x02\x02\x1B\x84\x03\x02\x02\x02\x1D\x8B\x03" +
		"\x02\x02\x02\x1F\x99\x03\x02\x02\x02!\x9F\x03\x02\x02\x02#\xA9\x03\x02" +
		"\x02\x02%\xAF\x03\x02\x02\x02\'\xBE\x03\x02\x02\x02)\xCE\x03\x02\x02\x02" +
		"+\xD2\x03\x02\x02\x02-\xD8\x03\x02\x02\x02/\xDF\x03\x02\x02\x0212\t\x02" +
		"\x02\x0223\b\x02\x02\x023\x04\x03\x02\x02\x0245\t\x03\x02\x0256\b\x03" +
		"\x03\x026\x06\x03\x02\x02\x027:\x05\x1F\x10\x028:\x05#\x12\x0297\x03\x02" +
		"\x02\x0298\x03\x02\x02\x029:\x03\x02\x02\x02:;\x03\x02\x02\x02;<\x07?" +
		"\x02\x02<=\x07@\x02\x02=@\x03\x02\x02\x02>A\x05\x1F\x10\x02?A\x05#\x12" +
		"\x02@>\x03\x02\x02\x02@?\x03\x02\x02\x02@A\x03\x02\x02\x02A\b\x03\x02" +
		"\x02\x02BC\x05+\x16\x02CD\x05/\x18\x02DE\x070\x02\x02EF\x05/\x18\x02F" +
		"L\x03\x02\x02\x02GH\x05-\x17\x02HI\x070\x02\x02IJ\x05-\x17\x02JL\x03\x02" +
		"\x02\x02KB\x03\x02\x02\x02KG\x03\x02\x02\x02L\n\x03\x02\x02\x02MN\x05" +
		"+\x16\x02NO\x05/\x18\x02OR\x03\x02\x02\x02PR\x05-\x17\x02QM\x03\x02\x02" +
		"\x02QP\x03\x02\x02\x02R\f\x03\x02\x02\x02SY\x07)\x02\x02TX\n\x04\x02\x02" +
		"UV\x07^\x02\x02VX\t\x05\x02\x02WT\x03\x02\x02\x02WU\x03\x02\x02\x02X[" +
		"\x03\x02\x02\x02YW\x03\x02\x02\x02YZ\x03\x02\x02\x02Z\\\x03\x02\x02\x02" +
		"[Y\x03\x02\x02\x02\\]\x07)\x02\x02]\x0E\x03\x02\x02\x02^_\x07%\x02\x02" +
		"_`\x07}\x02\x02`m\x03\x02\x02\x02al\x05\x0F\b\x02bf\x07}\x02\x02ce\v\x02" +
		"\x02\x02dc\x03\x02\x02\x02eh\x03\x02\x02\x02fg\x03\x02\x02\x02fd\x03\x02" +
		"\x02\x02gi\x03\x02\x02\x02hf\x03\x02\x02\x02il\x07\x7F\x02\x02jl\v\x02" +
		"\x02\x02ka\x03\x02\x02\x02kb\x03\x02\x02\x02kj\x03\x02\x02\x02lo\x03\x02" +
		"\x02\x02mn\x03\x02\x02\x02mk\x03\x02\x02\x02np\x03\x02\x02\x02om\x03\x02" +
		"\x02\x02pq\x07\x7F\x02\x02q\x10\x03\x02\x02\x02rt\v\x02\x02\x02sr\x03" +
		"\x02\x02\x02tu\x03\x02\x02\x02uv\x03\x02\x02\x02us\x03\x02\x02\x02vw\x03" +
		"\x02\x02\x02wx\x06\t\x02\x02x\x12\x03\x02\x02\x02yz\x070\x02\x02z\x14" +
		"\x03\x02\x02\x02{|\x07<\x02\x02|}\x07<\x02\x02}\x16\x03\x02\x02\x02~\x7F" +
		"\x07.\x02\x02\x7F\x18\x03\x02\x02\x02\x80\x81\x07?\x02\x02\x81\x1A\x03" +
		"\x02\x02\x02\x82\x85\x05\x1F\x10\x02\x83\x85\x05#\x12\x02\x84\x82\x03" +
		"\x02\x02\x02\x84\x83\x03\x02\x02\x02\x84\x85\x03\x02\x02\x02\x85\x86\x03" +
		"\x02\x02\x02\x86\x89\x07<\x02\x02\x87\x8A\x05\x1F\x10\x02\x88\x8A\x05" +
		"#\x12\x02\x89\x87\x03\x02\x02\x02\x89\x88\x03\x02\x02\x02\x89\x8A\x03" +
		"\x02\x02\x02\x8A\x1C\x03\x02\x02\x02\x8B\x8F\t\x06\x02\x02\x8C\x8E\t\x07" +
		"\x02\x02\x8D\x8C\x03\x02\x02\x02\x8E\x91\x03\x02\x02\x02\x8F\x8D\x03\x02" +
		"\x02\x02\x8F\x90\x03\x02\x02\x02\x90\x1E\x03\x02\x02\x02\x91\x8F\x03\x02" +
		"\x02\x02\x92\x96\t\b\x02\x02\x93\x95\x05#\x12\x02\x94\x93\x03\x02\x02" +
		"\x02\x95\x98\x03\x02\x02\x02\x96\x94\x03\x02\x02\x02\x96\x97\x03\x02\x02" +
		"\x02\x97\x9A\x03\x02\x02\x02\x98\x96\x03\x02\x02\x02\x99\x92\x03\x02\x02" +
		"\x02\x9A\x9B\x03\x02\x02\x02\x9B\x99\x03\x02\x02\x02\x9B\x9C\x03\x02\x02" +
		"\x02\x9C\x9D\x03\x02\x02\x02\x9D\x9E\b\x10\x04\x02\x9E \x03\x02\x02\x02" +
		"\x9F\xA0\x07/\x02\x02\xA0\xA1\x07/\x02\x02\xA1\xA5\x03\x02\x02\x02\xA2" +
		"\xA4\n\b\x02\x02\xA3\xA2\x03\x02\x02\x02\xA4\xA7\x03\x02\x02\x02\xA5\xA3" +
		"\x03\x02\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6\"\x03\x02\x02\x02\xA7\xA5" +
		"\x03\x02\x02\x02\xA8\xAA\t\t\x02\x02\xA9\xA8\x03\x02\x02\x02\xAA\xAB\x03" +
		"\x02\x02\x02\xAB\xA9\x03\x02\x02\x02\xAB\xAC\x03\x02\x02\x02\xAC\xAD\x03" +
		"\x02\x02\x02\xAD\xAE\b\x12\x05\x02\xAE$\x03\x02\x02\x02\xAF\xB0\x071\x02" +
		"\x02\xB0\xB1\x07,\x02\x02\xB1\xB6\x03\x02\x02\x02\xB2\xB5\x05%\x13\x02" +
		"\xB3\xB5\v\x02\x02\x02\xB4\xB2\x03\x02\x02\x02\xB4\xB3\x03\x02\x02\x02" +
		"\xB5\xB8\x03\x02\x02\x02\xB6\xB7\x03\x02\x02\x02\xB6\xB4\x03\x02\x02\x02" +
		"\xB7\xB9\x03\x02\x02\x02\xB8\xB6\x03\x02\x02\x02\xB9\xBA\x07,\x02\x02" +
		"\xBA\xBB\x071\x02\x02\xBB\xBC\x03\x02\x02\x02\xBC\xBD\b\x13\x06\x02\xBD" +
		"&\x03\x02\x02\x02\xBE\xC2\x07^\x02\x02\xBF\xC1\t\t\x02\x02\xC0\xBF\x03" +
		"\x02\x02\x02\xC1\xC4\x03\x02\x02\x02\xC2\xC0\x03\x02\x02\x02\xC2\xC3\x03" +
		"\x02\x02\x02\xC3\xCA\x03\x02\x02\x02\xC4\xC2\x03\x02\x02\x02\xC5\xC7\x07" +
		"\x0F\x02\x02\xC6\xC5\x03\x02\x02\x02\xC6\xC7\x03\x02\x02\x02\xC7\xC8\x03" +
		"\x02\x02\x02\xC8\xCB\x07\f\x02\x02\xC9\xCB\x04\x0E\x0F\x02\xCA\xC6\x03" +
		"\x02\x02\x02\xCA\xC9\x03\x02\x02\x02\xCB\xCC\x03\x02\x02\x02\xCC\xCD\b" +
		"\x14\x07\x02\xCD(\x03\x02\x02\x02\xCE\xCF\v\x02\x02\x02\xCF\xD0\x03\x02" +
		"\x02\x02\xD0\xD1\b\x15\b\x02\xD1*\x03\x02\x02\x02\xD2\xD4\t\n\x02\x02" +
		"\xD3\xD5\t\n\x02\x02\xD4\xD3\x03\x02\x02\x02\xD4\xD5\x03\x02\x02\x02\xD5" +
		"\xD6\x03\x02\x02\x02\xD6\xD7\t\v\x02\x02\xD7,\x03\x02\x02\x02\xD8\xDC" +
		"\t\n\x02\x02\xD9\xDB\t\f\x02\x02\xDA\xD9\x03\x02\x02\x02\xDB\xDE\x03\x02" +
		"\x02\x02\xDC\xDA\x03\x02\x02\x02\xDC\xDD\x03\x02\x02\x02\xDD.\x03\x02" +
		"\x02\x02\xDE\xDC\x03\x02\x02\x02\xDF\xE3\t\r\x02\x02\xE0\xE2\t\x07\x02" +
		"\x02\xE1\xE0\x03\x02\x02\x02\xE2\xE5\x03\x02\x02\x02\xE3\xE1\x03\x02\x02" +
		"\x02\xE3\xE4\x03\x02\x02\x02\xE40\x03\x02\x02\x02\xE5\xE3\x03\x02\x02" +
		"\x02\x1E\x029@KQWYfkmu\x84\x89\x8F\x96\x9B\xA5\xAB\xB4\xB6\xC2\xC6\xCA" +
		"\xD4\xDA\xDC\xE1\xE3\t\x03\x02\x02\x03\x03\x03\x03\x10\x04\x02\x05\x02" +
		"\x02\x06\x02\b\x02\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

