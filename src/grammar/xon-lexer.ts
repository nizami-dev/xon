// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN_BRACKET = 3;
	public static readonly CLOSE_BRACKET = 4;
	public static readonly OPEN_PAREN = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_BRACE = 7;
	public static readonly CLOSE_BRACE = 8;
	public static readonly IS = 9;
	public static readonly AS = 10;
	public static readonly DO = 11;
	public static readonly IF = 12;
	public static readonly IN = 13;
	public static readonly FOR = 14;
	public static readonly ELSE = 15;
	public static readonly TEST = 16;
	public static readonly BREAK = 17;
	public static readonly INFIX = 18;
	public static readonly WHILE = 19;
	public static readonly ACTUAL = 20;
	public static readonly EXPECT = 21;
	public static readonly EXPORT = 22;
	public static readonly IMPORT = 23;
	public static readonly PREFIX = 24;
	public static readonly RETURN = 25;
	public static readonly POSTFIX = 26;
	public static readonly EXTENSION = 27;
	public static readonly AT = 28;
	public static readonly DOT = 29;
	public static readonly RANGE = 30;
	public static readonly PLUS = 31;
	public static readonly HASH = 32;
	public static readonly PIPE = 33;
	public static readonly LESS = 34;
	public static readonly LESS_EQUAL = 35;
	public static readonly COMMA = 36;
	public static readonly COLON = 37;
	public static readonly GREAT = 38;
	public static readonly GREAT_EQUAL = 39;
	public static readonly MINUS = 40;
	public static readonly SLASH = 41;
	public static readonly CARET = 42;
	public static readonly TILDE = 43;
	public static readonly ASSIGN = 44;
	public static readonly EQUAL = 45;
	public static readonly NOT_EQUAL = 46;
	public static readonly DOLLAR = 47;
	public static readonly MODULO = 48;
	public static readonly QUESTION = 49;
	public static readonly ASTERISK = 50;
	public static readonly AMPERSAND = 51;
	public static readonly AND = 52;
	public static readonly OR = 53;
	public static readonly UNDERSCORE = 54;
	public static readonly EXCLAMATION = 55;
	public static readonly BACK_SLASH = 56;
	public static readonly NULL_LITERAL = 57;
	public static readonly FLOAT_LITERAL = 58;
	public static readonly INTEGER_LITERAL = 59;
	public static readonly BOOLEAN_LITERAL = 60;
	public static readonly CHAR_LITERAL = 61;
	public static readonly STRING_LITERAL = 62;
	public static readonly PREPROCESSOR = 63;
	public static readonly UPPER_ID = 64;
	public static readonly LOWER_ID = 65;
	public static readonly NL = 66;
	public static readonly WS = 67;
	public static readonly COMMENT = 68;
	public static readonly ERROR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "IS", "AS", "DO", "IF", "IN", "FOR", "ELSE", "TEST", "BREAK", 
		"INFIX", "WHILE", "ACTUAL", "EXPECT", "EXPORT", "IMPORT", "PREFIX", "RETURN", 
		"POSTFIX", "EXTENSION", "AT", "DOT", "RANGE", "PLUS", "HASH", "PIPE", 
		"LESS", "LESS_EQUAL", "COMMA", "COLON", "GREAT", "GREAT_EQUAL", "MINUS", 
		"SLASH", "CARET", "TILDE", "ASSIGN", "EQUAL", "NOT_EQUAL", "DOLLAR", "MODULO", 
		"QUESTION", "ASTERISK", "AMPERSAND", "AND", "OR", "UNDERSCORE", "EXCLAMATION", 
		"BACK_SLASH", "NULL_LITERAL", "FLOAT_LITERAL", "INTEGER_LITERAL", "BOOLEAN_LITERAL", 
		"CHAR_LITERAL", "STRING_LITERAL", "PREPROCESSOR", "UPPER_ID", "LOWER_ID", 
		"NL", "WS", "COMMENT", "DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'is'", "'as'", "'do'", "'if'", "'in'", "'for'", "'else'", "'test'", "'break'", 
		"'infix'", "'while'", "'actual'", "'expect'", "'export'", "'import'", 
		"'prefix'", "'return'", "'postfix'", "'extension'", "'@'", "'.'", "'..'", 
		"'+'", "'#'", "'|'", "'<'", "'<='", "','", "':'", "'>'", "'>='", "'-'", 
		"'/'", "'^'", "'~'", "'='", "'=='", "'!='", "'$'", "'%'", "'?'", "'*'", 
		"'&'", "'&&'", "'||'", "'_'", "'!'", "'\\'", "'null'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "IS", "AS", "DO", "IF", "IN", 
		"FOR", "ELSE", "TEST", "BREAK", "INFIX", "WHILE", "ACTUAL", "EXPECT", 
		"EXPORT", "IMPORT", "PREFIX", "RETURN", "POSTFIX", "EXTENSION", "AT", 
		"DOT", "RANGE", "PLUS", "HASH", "PIPE", "LESS", "LESS_EQUAL", "COMMA", 
		"COLON", "GREAT", "GREAT_EQUAL", "MINUS", "SLASH", "CARET", "TILDE", "ASSIGN", 
		"EQUAL", "NOT_EQUAL", "DOLLAR", "MODULO", "QUESTION", "ASTERISK", "AMPERSAND", 
		"AND", "OR", "UNDERSCORE", "EXCLAMATION", "BACK_SLASH", "NULL_LITERAL", 
		"FLOAT_LITERAL", "INTEGER_LITERAL", "BOOLEAN_LITERAL", "CHAR_LITERAL", 
		"STRING_LITERAL", "PREPROCESSOR", "UPPER_ID", "LOWER_ID", "NL", "WS", 
		"COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 2:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 3:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 4:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 5:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 63:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 63:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02F\u01DB\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x03" +
		"\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03" +
		"\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03" +
		"\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03" +
		"\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10" +
		"\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14" +
		"\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15" +
		"\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17" +
		"\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x18" +
		"\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19" +
		"\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A" +
		"\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D" +
		"\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03" +
		"\"\x03\"\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x03&\x03\'\x03\'\x03" +
		"(\x03(\x03)\x03)\x03*\x03*\x03+\x03+\x03,\x03,\x03,\x03-\x03-\x03-\x03" +
		".\x03.\x03/\x03/\x030\x030\x031\x031\x032\x032\x033\x033\x033\x034\x03" +
		"4\x034\x035\x035\x036\x036\x037\x037\x038\x038\x038\x038\x038\x039\x03" +
		"9\x059\u0151\n9\x039\x039\x039\x039\x039\x039\x039\x039\x039\x059\u015C" +
		"\n9\x03:\x03:\x05:\u0160\n:\x03:\x03:\x03:\x05:\u0165\n:\x03;\x03;\x03" +
		";\x03;\x03;\x03;\x03;\x03;\x03;\x05;\u0170\n;\x03<\x03<\x03<\x03<\x03" +
		"=\x03=\x03=\x03=\x07=\u017A\n=\f=\x0E=\u017D\v=\x03=\x03=\x03>\x03>\x03" +
		">\x03>\x07>\u0185\n>\f>\x0E>\u0188\v>\x03>\x03>\x03?\x03?\x07?\u018E\n" +
		"?\f?\x0E?\u0191\v?\x03@\x03@\x07@\u0195\n@\f@\x0E@\u0198\v@\x03A\x03A" +
		"\x03A\x05A\u019D\nA\x03A\x03A\x05A\u01A1\nA\x03A\x05A\u01A4\nA\x05A\u01A6" +
		"\nA\x03A\x03A\x03B\x06B\u01AB\nB\rB\x0EB\u01AC\x03B\x03B\x03C\x03C\x03" +
		"C\x03C\x07C\u01B5\nC\fC\x0EC\u01B8\vC\x03C\x03C\x03D\x06D\u01BD\nD\rD" +
		"\x0ED\u01BE\x03D\x03D\x06D\u01C3\nD\rD\x0ED\u01C4\x07D\u01C7\nD\fD\x0E" +
		"D\u01CA\vD\x03E\x06E\u01CD\nE\rE\x0EE\u01CE\x03E\x03E\x06E\u01D3\nE\r" +
		"E\x0EE\u01D4\x07E\u01D7\nE\fE\x0EE\u01DA\vE\x03\u0186\x02\x02F\x03\x02" +
		"\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02" +
		"\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02\x12" +
		"\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19-\x02" +
		"\x1A/\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?" +
		"\x02#A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+Q\x02,S\x02-U\x02" +
		".W\x02/Y\x020[\x021]\x022_\x023a\x024c\x025e\x026g\x027i\x028k\x029m\x02" +
		":o\x02;q\x02<s\x02=u\x02>w\x02?y\x02@{\x02A}\x02B\x7F\x02C\x81\x02D\x83" +
		"\x02E\x85\x02F\x87\x02\x02\x89\x02\x02\x03\x02\r\x03\x022;\x04\x02ZZz" +
		"z\x03\x02))\x03\x02$$\n\x02$$^^ddhhppttvvxx\x03\x02C\\\x06\x022;C\\aa" +
		"c|\x04\x02aac|\x04\x02\v\v\"\"\x04\x02\f\f\x0F\x0F\x05\x022;C\\c|\x02" +
		"\u01EE\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02" +
		"\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02" +
		"\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02" +
		"\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
		"\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02" +
		"\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02" +
		"\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03" +
		"\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02" +
		"\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02" +
		";\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02" +
		"\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02" +
		"\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03" +
		"\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02" +
		"\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02" +
		"]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03\x02" +
		"\x02\x02\x02e\x03\x02\x02\x02\x02g\x03\x02\x02\x02\x02i\x03\x02\x02\x02" +
		"\x02k\x03\x02\x02\x02\x02m\x03\x02\x02\x02\x02o\x03\x02\x02\x02\x02q\x03" +
		"\x02\x02\x02\x02s\x03\x02\x02\x02\x02u\x03\x02\x02\x02\x02w\x03\x02\x02" +
		"\x02\x02y\x03\x02\x02\x02\x02{\x03\x02\x02\x02\x02}\x03\x02\x02\x02\x02" +
		"\x7F\x03\x02\x02\x02\x02\x81\x03\x02\x02\x02\x02\x83\x03\x02\x02\x02\x02" +
		"\x85\x03\x02\x02\x02\x03\x8B\x03\x02\x02\x02\x05\x8E\x03\x02\x02\x02\x07" +
		"\x91\x03\x02\x02\x02\t\x94\x03\x02\x02\x02\v\x97\x03\x02\x02\x02\r\x9A" +
		"\x03\x02\x02\x02\x0F\x9D\x03\x02\x02\x02\x11\xA0\x03\x02\x02\x02\x13\xA3" +
		"\x03\x02\x02\x02\x15\xA6\x03\x02\x02\x02\x17\xA9\x03\x02\x02\x02\x19\xAC" +
		"\x03\x02\x02\x02\x1B\xB0\x03\x02\x02\x02\x1D\xB5\x03\x02\x02\x02\x1F\xBA" +
		"\x03\x02\x02\x02!\xC0\x03\x02\x02\x02#\xC6\x03\x02\x02\x02%\xCC\x03\x02" +
		"\x02\x02\'\xD3\x03\x02\x02\x02)\xDA\x03\x02\x02\x02+\xE1\x03\x02\x02\x02" +
		"-\xE8\x03\x02\x02\x02/\xEF\x03\x02\x02\x021\xF6\x03\x02\x02\x023\xFE\x03" +
		"\x02\x02\x025\u0108\x03\x02\x02\x027\u010A\x03\x02\x02\x029\u010C\x03" +
		"\x02\x02\x02;\u010F\x03\x02\x02\x02=\u0111\x03\x02\x02\x02?\u0113\x03" +
		"\x02\x02\x02A\u0115\x03\x02\x02\x02C\u0117\x03\x02\x02\x02E\u011A\x03" +
		"\x02\x02\x02G\u011C\x03\x02\x02\x02I\u011E\x03\x02\x02\x02K\u0120\x03" +
		"\x02\x02\x02M\u0123\x03\x02\x02\x02O\u0125\x03\x02\x02\x02Q\u0127\x03" +
		"\x02\x02\x02S\u0129\x03\x02\x02\x02U\u012B\x03\x02\x02\x02W\u012D\x03" +
		"\x02\x02\x02Y\u0130\x03\x02\x02\x02[\u0133\x03\x02\x02\x02]\u0135\x03" +
		"\x02\x02\x02_\u0137\x03\x02\x02\x02a\u0139\x03\x02\x02\x02c\u013B\x03" +
		"\x02\x02\x02e\u013D\x03\x02\x02\x02g\u0140\x03\x02\x02\x02i\u0143\x03" +
		"\x02\x02\x02k\u0145\x03\x02\x02\x02m\u0147\x03\x02\x02\x02o\u0149\x03" +
		"\x02\x02\x02q\u015B\x03\x02\x02\x02s\u0164\x03\x02\x02\x02u\u016F\x03" +
		"\x02\x02\x02w\u0171\x03\x02\x02\x02y\u0175\x03\x02\x02\x02{\u0180\x03" +
		"\x02\x02\x02}\u018B\x03\x02\x02\x02\x7F\u0192\x03\x02\x02\x02\x81\u01A5" +
		"\x03\x02\x02\x02\x83\u01AA\x03\x02\x02\x02\x85\u01B0\x03\x02\x02\x02\x87" +
		"\u01BC\x03\x02\x02\x02\x89\u01CC\x03\x02\x02\x02\x8B\x8C\x07]\x02\x02" +
		"\x8C\x8D\b\x02\x02\x02\x8D\x04\x03\x02\x02\x02\x8E\x8F\x07_\x02\x02\x8F" +
		"\x90\b\x03\x03\x02\x90\x06\x03\x02\x02\x02\x91\x92\x07*\x02\x02\x92\x93" +
		"\b\x04\x04\x02\x93\b\x03\x02\x02\x02\x94\x95\x07+\x02\x02\x95\x96\b\x05" +
		"\x05\x02\x96\n\x03\x02\x02\x02\x97\x98\x07}\x02\x02\x98\x99\b\x06\x06" +
		"\x02\x99\f\x03\x02\x02\x02\x9A\x9B\x07\x7F\x02\x02\x9B\x9C\b\x07\x07\x02" +
		"\x9C\x0E\x03\x02\x02\x02\x9D\x9E\x07k\x02\x02\x9E\x9F\x07u\x02\x02\x9F" +
		"\x10\x03\x02\x02\x02\xA0\xA1\x07c\x02\x02\xA1\xA2\x07u\x02\x02\xA2\x12" +
		"\x03\x02\x02\x02\xA3\xA4\x07f\x02\x02\xA4\xA5\x07q\x02\x02\xA5\x14\x03" +
		"\x02\x02\x02\xA6\xA7\x07k\x02\x02\xA7\xA8\x07h\x02\x02\xA8\x16\x03\x02" +
		"\x02\x02\xA9\xAA\x07k\x02\x02\xAA\xAB\x07p\x02\x02\xAB\x18\x03\x02\x02" +
		"\x02\xAC\xAD\x07h\x02\x02\xAD\xAE\x07q\x02\x02\xAE\xAF\x07t\x02\x02\xAF" +
		"\x1A\x03\x02\x02\x02\xB0\xB1\x07g\x02\x02\xB1\xB2\x07n\x02\x02\xB2\xB3" +
		"\x07u\x02\x02\xB3\xB4\x07g\x02\x02\xB4\x1C\x03\x02\x02\x02\xB5\xB6\x07" +
		"v\x02\x02\xB6\xB7\x07g\x02\x02\xB7\xB8\x07u\x02\x02\xB8\xB9\x07v\x02\x02" +
		"\xB9\x1E\x03\x02\x02\x02\xBA\xBB\x07d\x02\x02\xBB\xBC\x07t\x02\x02\xBC" +
		"\xBD\x07g\x02\x02\xBD\xBE\x07c\x02\x02\xBE\xBF\x07m\x02\x02\xBF \x03\x02" +
		"\x02\x02\xC0\xC1\x07k\x02\x02\xC1\xC2\x07p\x02\x02\xC2\xC3\x07h\x02\x02" +
		"\xC3\xC4\x07k\x02\x02\xC4\xC5\x07z\x02\x02\xC5\"\x03\x02\x02\x02\xC6\xC7" +
		"\x07y\x02\x02\xC7\xC8\x07j\x02\x02\xC8\xC9\x07k\x02\x02\xC9\xCA\x07n\x02" +
		"\x02\xCA\xCB\x07g\x02\x02\xCB$\x03\x02\x02\x02\xCC\xCD\x07c\x02\x02\xCD" +
		"\xCE\x07e\x02\x02\xCE\xCF\x07v\x02\x02\xCF\xD0\x07w\x02\x02\xD0\xD1\x07" +
		"c\x02\x02\xD1\xD2\x07n\x02\x02\xD2&\x03\x02\x02\x02\xD3\xD4\x07g\x02\x02" +
		"\xD4\xD5\x07z\x02\x02\xD5\xD6\x07r\x02\x02\xD6\xD7\x07g\x02\x02\xD7\xD8" +
		"\x07e\x02\x02\xD8\xD9\x07v\x02\x02\xD9(\x03\x02\x02\x02\xDA\xDB\x07g\x02" +
		"\x02\xDB\xDC\x07z\x02\x02\xDC\xDD\x07r\x02\x02\xDD\xDE\x07q\x02\x02\xDE" +
		"\xDF\x07t\x02\x02\xDF\xE0\x07v\x02\x02\xE0*\x03\x02\x02\x02\xE1\xE2\x07" +
		"k\x02\x02\xE2\xE3\x07o\x02\x02\xE3\xE4\x07r\x02\x02\xE4\xE5\x07q\x02\x02" +
		"\xE5\xE6\x07t\x02\x02\xE6\xE7\x07v\x02\x02\xE7,\x03\x02\x02\x02\xE8\xE9" +
		"\x07r\x02\x02\xE9\xEA\x07t\x02\x02\xEA\xEB\x07g\x02\x02\xEB\xEC\x07h\x02" +
		"\x02\xEC\xED\x07k\x02\x02\xED\xEE\x07z\x02\x02\xEE.\x03\x02\x02\x02\xEF" +
		"\xF0\x07t\x02\x02\xF0\xF1\x07g\x02\x02\xF1\xF2\x07v\x02\x02\xF2\xF3\x07" +
		"w\x02\x02\xF3\xF4\x07t\x02\x02\xF4\xF5\x07p\x02\x02\xF50\x03\x02\x02\x02" +
		"\xF6\xF7\x07r\x02\x02\xF7\xF8\x07q\x02\x02\xF8\xF9\x07u\x02\x02\xF9\xFA" +
		"\x07v\x02\x02\xFA\xFB\x07h\x02\x02\xFB\xFC\x07k\x02\x02\xFC\xFD\x07z\x02" +
		"\x02\xFD2\x03\x02\x02\x02\xFE\xFF\x07g\x02\x02\xFF\u0100\x07z\x02\x02" +
		"\u0100\u0101\x07v\x02\x02\u0101\u0102\x07g\x02\x02\u0102\u0103\x07p\x02" +
		"\x02\u0103\u0104\x07u\x02\x02\u0104\u0105\x07k\x02\x02\u0105\u0106\x07" +
		"q\x02\x02\u0106\u0107\x07p\x02\x02\u01074\x03\x02\x02\x02\u0108\u0109" +
		"\x07B\x02\x02\u01096\x03\x02\x02\x02\u010A\u010B\x070\x02\x02\u010B8\x03" +
		"\x02\x02\x02\u010C\u010D\x070\x02\x02\u010D\u010E\x070\x02\x02\u010E:" +
		"\x03\x02\x02\x02\u010F\u0110\x07-\x02\x02\u0110<\x03\x02\x02\x02\u0111" +
		"\u0112\x07%\x02\x02\u0112>\x03\x02\x02\x02\u0113\u0114\x07~\x02\x02\u0114" +
		"@\x03\x02\x02\x02\u0115\u0116\x07>\x02\x02\u0116B\x03\x02\x02\x02\u0117" +
		"\u0118\x07>\x02\x02\u0118\u0119\x07?\x02\x02\u0119D\x03\x02\x02\x02\u011A" +
		"\u011B\x07.\x02\x02\u011BF\x03\x02\x02\x02\u011C\u011D\x07<\x02\x02\u011D" +
		"H\x03\x02\x02\x02\u011E\u011F\x07@\x02\x02\u011FJ\x03\x02\x02\x02\u0120" +
		"\u0121\x07@\x02\x02\u0121\u0122\x07?\x02\x02\u0122L\x03\x02\x02\x02\u0123" +
		"\u0124\x07/\x02\x02\u0124N\x03\x02\x02\x02\u0125\u0126\x071\x02\x02\u0126" +
		"P\x03\x02\x02\x02\u0127\u0128\x07`\x02\x02\u0128R\x03\x02\x02\x02\u0129" +
		"\u012A\x07\x80\x02\x02\u012AT\x03\x02\x02\x02\u012B\u012C\x07?\x02\x02" +
		"\u012CV\x03\x02\x02\x02\u012D\u012E\x07?\x02\x02\u012E\u012F\x07?\x02" +
		"\x02\u012FX\x03\x02\x02\x02\u0130\u0131\x07#\x02\x02\u0131\u0132\x07?" +
		"\x02\x02\u0132Z\x03\x02\x02\x02\u0133\u0134\x07&\x02\x02\u0134\\\x03\x02" +
		"\x02\x02\u0135\u0136\x07\'\x02\x02\u0136^\x03\x02\x02\x02\u0137\u0138" +
		"\x07A\x02\x02\u0138`\x03\x02\x02\x02\u0139\u013A\x07,\x02\x02\u013Ab\x03" +
		"\x02\x02\x02\u013B\u013C\x07(\x02\x02\u013Cd\x03\x02\x02\x02\u013D\u013E" +
		"\x07(\x02\x02\u013E\u013F\x07(\x02\x02\u013Ff\x03\x02\x02\x02\u0140\u0141" +
		"\x07~\x02\x02\u0141\u0142\x07~\x02\x02\u0142h\x03\x02\x02\x02\u0143\u0144" +
		"\x07a\x02\x02\u0144j\x03\x02\x02\x02\u0145\u0146\x07#\x02\x02\u0146l\x03" +
		"\x02\x02\x02\u0147\u0148\x07^\x02\x02\u0148n\x03\x02\x02\x02\u0149\u014A" +
		"\x07p\x02\x02\u014A\u014B\x07w\x02\x02\u014B\u014C\x07n\x02\x02\u014C" +
		"\u014D\x07n\x02\x02\u014Dp\x03\x02\x02\x02\u014E\u0150\t\x02\x02\x02\u014F" +
		"\u0151\t\x02\x02\x02\u0150\u014F\x03\x02\x02\x02\u0150\u0151\x03\x02\x02" +
		"\x02\u0151\u0152\x03\x02\x02\x02\u0152\u0153\t\x03\x02\x02\u0153\u0154" +
		"\x05\x89E\x02\u0154\u0155\x070\x02\x02\u0155\u0156\x05\x89E\x02\u0156" +
		"\u015C\x03\x02\x02\x02\u0157\u0158\x05\x87D\x02\u0158\u0159\x070\x02\x02" +
		"\u0159\u015A\x05\x87D\x02\u015A\u015C\x03\x02\x02\x02\u015B\u014E\x03" +
		"\x02\x02\x02\u015B\u0157\x03\x02\x02\x02\u015Cr\x03\x02\x02\x02\u015D" +
		"\u015F\t\x02\x02\x02\u015E\u0160\t\x02\x02\x02\u015F\u015E\x03\x02\x02" +
		"\x02\u015F\u0160\x03\x02\x02\x02\u0160\u0161\x03\x02\x02\x02\u0161\u0162" +
		"\t\x03\x02\x02\u0162\u0165\x05\x89E\x02\u0163\u0165\x05\x87D\x02\u0164" +
		"\u015D\x03\x02\x02\x02\u0164\u0163\x03\x02\x02\x02\u0165t\x03\x02\x02" +
		"\x02\u0166\u0167\x07v\x02\x02\u0167\u0168\x07t\x02\x02\u0168\u0169\x07" +
		"w\x02\x02\u0169\u0170\x07g\x02\x02\u016A\u016B\x07h\x02\x02\u016B\u016C" +
		"\x07c\x02\x02\u016C\u016D\x07n\x02\x02\u016D\u016E\x07u\x02\x02\u016E" +
		"\u0170\x07g\x02\x02\u016F\u0166\x03\x02\x02\x02\u016F\u016A\x03\x02\x02" +
		"\x02\u0170v\x03\x02\x02\x02\u0171\u0172\x07)\x02\x02\u0172\u0173\n\x04" +
		"\x02\x02\u0173\u0174\x07)\x02\x02\u0174x\x03\x02\x02\x02\u0175\u017B\x07" +
		"$\x02\x02\u0176\u017A\n\x05\x02\x02\u0177\u0178\x07^\x02\x02\u0178\u017A" +
		"\t\x06\x02\x02\u0179\u0176\x03\x02\x02\x02\u0179\u0177\x03\x02\x02\x02" +
		"\u017A\u017D\x03\x02\x02\x02\u017B\u0179\x03\x02\x02\x02\u017B\u017C\x03" +
		"\x02\x02\x02\u017C\u017E\x03\x02\x02\x02\u017D\u017B\x03\x02\x02\x02\u017E" +
		"\u017F\x07$\x02\x02\u017Fz\x03\x02\x02\x02\u0180\u0181\x07%\x02\x02\u0181" +
		"\u0182\x07}\x02\x02\u0182\u0186\x03\x02\x02\x02\u0183\u0185\v\x02\x02" +
		"\x02\u0184\u0183\x03\x02\x02\x02\u0185\u0188\x03\x02\x02\x02\u0186\u0187" +
		"\x03\x02\x02\x02\u0186\u0184\x03\x02\x02\x02\u0187\u0189\x03\x02\x02\x02" +
		"\u0188\u0186\x03\x02\x02\x02\u0189\u018A\x07\x7F\x02\x02\u018A|\x03\x02" +
		"\x02\x02\u018B\u018F\t\x07\x02\x02\u018C\u018E\t\b\x02\x02\u018D\u018C" +
		"\x03\x02\x02\x02\u018E\u0191\x03\x02\x02\x02\u018F\u018D\x03\x02\x02\x02" +
		"\u018F\u0190\x03\x02\x02\x02\u0190~\x03\x02\x02\x02\u0191\u018F\x03\x02" +
		"\x02\x02\u0192\u0196\t\t\x02\x02\u0193\u0195\t\b\x02\x02\u0194\u0193\x03" +
		"\x02\x02\x02\u0195\u0198\x03\x02\x02\x02\u0196\u0194\x03\x02\x02\x02\u0196" +
		"\u0197\x03\x02\x02\x02\u0197\x80\x03\x02\x02\x02\u0198\u0196\x03\x02\x02" +
		"\x02\u0199\u019A\x06A\x02\x02\u019A\u01A6\x05\x83B\x02\u019B\u019D\x07" +
		"\x0F\x02\x02\u019C\u019B\x03\x02\x02\x02\u019C\u019D\x03\x02\x02\x02\u019D" +
		"\u019E\x03\x02\x02\x02\u019E\u01A1\x07\f\x02\x02\u019F\u01A1\x07\x0F\x02" +
		"\x02\u01A0\u019C\x03\x02\x02\x02\u01A0\u019F\x03\x02\x02\x02\u01A1\u01A3" +
		"\x03\x02\x02\x02\u01A2\u01A4\x05\x83B\x02\u01A3\u01A2\x03\x02\x02\x02" +
		"\u01A3\u01A4\x03\x02\x02\x02\u01A4\u01A6\x03\x02\x02\x02\u01A5\u0199\x03" +
		"\x02\x02\x02\u01A5\u01A0\x03\x02\x02\x02\u01A6\u01A7\x03\x02\x02\x02\u01A7" +
		"\u01A8\bA\b\x02\u01A8\x82\x03\x02\x02\x02\u01A9\u01AB\t\n\x02\x02\u01AA" +
		"\u01A9\x03\x02\x02\x02\u01AB\u01AC\x03\x02\x02\x02\u01AC\u01AA\x03\x02" +
		"\x02\x02\u01AC\u01AD\x03\x02\x02\x02\u01AD\u01AE\x03\x02\x02\x02\u01AE" +
		"\u01AF\bB\t\x02\u01AF\x84\x03\x02\x02\x02\u01B0\u01B1\x07/\x02\x02\u01B1" +
		"\u01B2\x07/\x02\x02\u01B2\u01B6\x03\x02\x02\x02\u01B3\u01B5\n\v\x02\x02" +
		"\u01B4\u01B3\x03\x02\x02\x02\u01B5\u01B8\x03\x02\x02\x02\u01B6\u01B4\x03" +
		"\x02\x02\x02\u01B6\u01B7\x03\x02\x02\x02\u01B7\u01B9\x03\x02\x02\x02\u01B8" +
		"\u01B6\x03\x02\x02\x02\u01B9\u01BA\bC\t\x02\u01BA\x86\x03\x02\x02\x02" +
		"\u01BB\u01BD\t\x02\x02\x02\u01BC\u01BB\x03\x02\x02\x02\u01BD\u01BE\x03" +
		"\x02\x02\x02\u01BE\u01BC\x03\x02\x02\x02\u01BE\u01BF\x03\x02\x02\x02\u01BF" +
		"\u01C8\x03\x02\x02\x02\u01C0\u01C2\x07a\x02\x02\u01C1\u01C3\t\x02\x02" +
		"\x02\u01C2\u01C1\x03\x02\x02\x02\u01C3\u01C4\x03\x02\x02\x02\u01C4\u01C2" +
		"\x03\x02\x02\x02\u01C4\u01C5\x03\x02\x02\x02\u01C5\u01C7\x03\x02\x02\x02" +
		"\u01C6\u01C0\x03\x02\x02\x02\u01C7\u01CA\x03\x02\x02\x02\u01C8\u01C6\x03" +
		"\x02\x02\x02\u01C8\u01C9\x03\x02\x02\x02\u01C9\x88\x03\x02\x02\x02\u01CA" +
		"\u01C8\x03\x02\x02\x02\u01CB\u01CD\t\f\x02\x02\u01CC\u01CB\x03\x02\x02" +
		"\x02\u01CD\u01CE\x03\x02\x02\x02\u01CE\u01CC\x03\x02\x02\x02\u01CE\u01CF" +
		"\x03\x02\x02\x02\u01CF\u01D8\x03\x02\x02\x02\u01D0\u01D2\x07a\x02\x02" +
		"\u01D1\u01D3\t\f\x02\x02\u01D2\u01D1\x03\x02\x02\x02\u01D3\u01D4\x03\x02" +
		"\x02\x02\u01D4\u01D2\x03\x02\x02\x02\u01D4\u01D5\x03\x02\x02\x02\u01D5" +
		"\u01D7\x03\x02\x02\x02\u01D6\u01D0\x03\x02\x02\x02\u01D7\u01DA\x03\x02" +
		"\x02\x02\u01D8\u01D6\x03\x02\x02\x02\u01D8\u01D9\x03\x02\x02\x02\u01D9" +
		"\x8A\x03\x02\x02\x02\u01DA\u01D8\x03\x02\x02\x02\x19\x02\u0150\u015B\u015F" +
		"\u0164\u016F\u0179\u017B\u0186\u018F\u0196\u019C\u01A0\u01A3\u01A5\u01AC" +
		"\u01B6\u01BE\u01C4\u01C8\u01CE\u01D4\u01D8\n\x03\x02\x02\x03\x03\x03\x03" +
		"\x04\x04\x03\x05\x05\x03\x06\x06\x03\x07\x07\x03A\b\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

