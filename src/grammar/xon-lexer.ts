// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN = 3;
	public static readonly CLOSE = 4;
	public static readonly LAMBDA = 5;
	public static readonly FLOAT = 6;
	public static readonly INTEGER = 7;
	public static readonly STRING = 8;
	public static readonly PREPROCESSOR = 9;
	public static readonly KEYWORD = 10;
	public static readonly OP = 11;
	public static readonly DOT = 12;
	public static readonly META = 13;
	public static readonly COMMA = 14;
	public static readonly ASSIGN = 15;
	public static readonly COLON = 16;
	public static readonly ID = 17;
	public static readonly NL = 18;
	public static readonly LINE_COMMENT = 19;
	public static readonly WS = 20;
	public static readonly BLOCK_COMMENT = 21;
	public static readonly LINE_JOINING = 22;
	public static readonly UNEXPECTED = 23;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN", "CLOSE", "LAMBDA", "FLOAT", "INTEGER", "STRING", "PREPROCESSOR", 
		"KEYWORD", "OP", "DOT", "META", "COMMA", "ASSIGN", "COLON", "ID", "NL", 
		"LINE_COMMENT", "WS", "BLOCK_COMMENT", "LINE_JOINING", "UNEXPECTED", "Radix", 
		"DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, "'.'", "'::'", 
		"','", "'='",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN", "CLOSE", "LAMBDA", "FLOAT", "INTEGER", 
		"STRING", "PREPROCESSOR", "KEYWORD", "OP", "DOT", "META", "COMMA", "ASSIGN", 
		"COLON", "ID", "NL", "LINE_COMMENT", "WS", "BLOCK_COMMENT", "LINE_JOINING", 
		"UNEXPECTED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_action(_localctx, actionIndex);
			break;

		case 15:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 7:
			return this.KEYWORD_sempred(_localctx, predIndex);

		case 8:
			return this.OP_sempred(_localctx, predIndex);
		}
		return true;
	}
	private KEYWORD_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return  this.isKeyword();
		}
		return true;
	}
	private OP_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return  this.isOperator();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x19\xEF\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03" +
		"\x03\x03\x03\x04\x03\x04\x05\x04<\n\x04\x03\x04\x03\x04\x03\x04\x03\x04" +
		"\x03\x04\x05\x04C\n\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05" +
		"\x03\x05\x03\x05\x03\x05\x05\x05N\n\x05\x03\x06\x03\x06\x03\x06\x03\x06" +
		"\x05\x06T\n\x06\x03\x07\x03\x07\x03\x07\x03\x07\x07\x07Z\n\x07\f\x07\x0E" +
		"\x07]\v\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x07\b" +
		"g\n\b\f\b\x0E\bj\v\b\x03\b\x03\b\x07\bn\n\b\f\b\x0E\bq\v\b\x03\b\x03\b" +
		"\x03\t\x06\tv\n\t\r\t\x0E\tw\x03\t\x03\t\x03\n\x06\n}\n\n\r\n\x0E\n~\x03" +
		"\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03" +
		"\x0F\x03\x0F\x05\x0F\x8E\n\x0F\x03\x0F\x03\x0F\x03\x0F\x05\x0F\x93\n\x0F" +
		"\x03\x10\x03\x10\x07\x10\x97\n\x10\f\x10\x0E\x10\x9A\v\x10\x03\x11\x03" +
		"\x11\x07\x11\x9E\n\x11\f\x11\x0E\x11\xA1\v\x11\x06\x11\xA3\n\x11\r\x11" +
		"\x0E\x11\xA4\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x07\x12\xAD" +
		"\n\x12\f\x12\x0E\x12\xB0\v\x12\x03\x13\x06\x13\xB3\n\x13\r\x13\x0E\x13" +
		"\xB4\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x07\x14\xBE" +
		"\n\x14\f\x14\x0E\x14\xC1\v\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14" +
		"\x03\x15\x03\x15\x07\x15\xCA\n\x15\f\x15\x0E\x15\xCD\v\x15\x03\x15\x05" +
		"\x15\xD0\n\x15\x03\x15\x03\x15\x05\x15\xD4\n\x15\x03\x15\x03\x15\x03\x16" +
		"\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x05\x17\xDE\n\x17\x03\x17\x03" +
		"\x17\x03\x18\x03\x18\x07\x18\xE4\n\x18\f\x18\x0E\x18\xE7\v\x18\x03\x19" +
		"\x03\x19\x07\x19\xEB\n\x19\f\x19\x0E\x19\xEE\v\x19\x07how~\xBF\x02\x02" +
		"\x1A\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02" +
		"\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11" +
		"\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18" +
		"+\x02\x19-\x02\x02/\x02\x021\x02\x02\x03\x02\x0E\x05\x02**]]}}\x05\x02" +
		"++__\x7F\x7F\x03\x02))\n\x02))^^ddhhppttvvxx\x05\x02C\\aac|\x06\x022;" +
		"C\\aac|\x04\x02\f\f\x0F\x0F\x04\x02\v\v\"\"\x03\x022;\x04\x02ZZzz\x04" +
		"\x022;aa\x05\x022;C\\c|\x02\u010A\x02\x03\x03\x02\x02\x02\x02\x05\x03" +
		"\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02" +
		"\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02" +
		"\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02" +
		"\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02" +
		"\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02" +
		"\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02" +
		"+\x03\x02\x02\x02\x033\x03\x02\x02\x02\x056\x03\x02\x02\x02\x07;\x03\x02" +
		"\x02\x02\tM\x03\x02\x02\x02\vS\x03\x02\x02\x02\rU\x03\x02\x02\x02\x0F" +
		"`\x03\x02\x02\x02\x11u\x03\x02\x02\x02\x13|\x03\x02\x02\x02\x15\x82\x03" +
		"\x02\x02\x02\x17\x84\x03\x02\x02\x02\x19\x87\x03\x02\x02\x02\x1B\x89\x03" +
		"\x02\x02\x02\x1D\x8D\x03\x02\x02\x02\x1F\x94\x03\x02\x02\x02!\xA2\x03" +
		"\x02\x02\x02#\xA8\x03\x02\x02\x02%\xB2\x03\x02\x02\x02\'\xB8\x03\x02\x02" +
		"\x02)\xC7\x03\x02\x02\x02+\xD7\x03\x02\x02\x02-\xDB\x03\x02\x02\x02/\xE1" +
		"\x03\x02\x02\x021\xE8\x03\x02\x02\x0234\t\x02\x02\x0245\b\x02\x02\x02" +
		"5\x04\x03\x02\x02\x0267\t\x03\x02\x0278\b\x03\x03\x028\x06\x03\x02\x02" +
		"\x029<\x05!\x11\x02:<\x05%\x13\x02;9\x03\x02\x02\x02;:\x03\x02\x02\x02" +
		";<\x03\x02\x02\x02<=\x03\x02\x02\x02=>\x07?\x02\x02>?\x07@\x02\x02?B\x03" +
		"\x02\x02\x02@C\x05!\x11\x02AC\x05%\x13\x02B@\x03\x02\x02\x02BA\x03\x02" +
		"\x02\x02BC\x03\x02\x02\x02C\b\x03\x02\x02\x02DE\x05-\x17\x02EF\x051\x19" +
		"\x02FG\x070\x02\x02GH\x051\x19\x02HN\x03\x02\x02\x02IJ\x05/\x18\x02JK" +
		"\x070\x02\x02KL\x05/\x18\x02LN\x03\x02\x02\x02MD\x03\x02\x02\x02MI\x03" +
		"\x02\x02\x02N\n\x03\x02\x02\x02OP\x05-\x17\x02PQ\x051\x19\x02QT\x03\x02" +
		"\x02\x02RT\x05/\x18\x02SO\x03\x02\x02\x02SR\x03\x02\x02\x02T\f\x03\x02" +
		"\x02\x02U[\x07)\x02\x02VZ\n\x04\x02\x02WX\x07^\x02\x02XZ\t\x05\x02\x02" +
		"YV\x03\x02\x02\x02YW\x03\x02\x02\x02Z]\x03\x02\x02\x02[Y\x03\x02\x02\x02" +
		"[\\\x03\x02\x02\x02\\^\x03\x02\x02\x02][\x03\x02\x02\x02^_\x07)\x02\x02" +
		"_\x0E\x03\x02\x02\x02`a\x07%\x02\x02ab\x07}\x02\x02bo\x03\x02\x02\x02" +
		"cn\x05\x0F\b\x02dh\x07}\x02\x02eg\v\x02\x02\x02fe\x03\x02\x02\x02gj\x03" +
		"\x02\x02\x02hi\x03\x02\x02\x02hf\x03\x02\x02\x02ik\x03\x02\x02\x02jh\x03" +
		"\x02\x02\x02kn\x07\x7F\x02\x02ln\v\x02\x02\x02mc\x03\x02\x02\x02md\x03" +
		"\x02\x02\x02ml\x03\x02\x02\x02nq\x03\x02\x02\x02op\x03\x02\x02\x02om\x03" +
		"\x02\x02\x02pr\x03\x02\x02\x02qo\x03\x02\x02\x02rs\x07\x7F\x02\x02s\x10" +
		"\x03\x02\x02\x02tv\v\x02\x02\x02ut\x03\x02\x02\x02vw\x03\x02\x02\x02w" +
		"x\x03\x02\x02\x02wu\x03\x02\x02\x02xy\x03\x02\x02\x02yz\x06\t\x02\x02" +
		"z\x12\x03\x02\x02\x02{}\v\x02\x02\x02|{\x03\x02\x02\x02}~\x03\x02\x02" +
		"\x02~\x7F\x03\x02\x02\x02~|\x03\x02\x02\x02\x7F\x80\x03\x02\x02\x02\x80" +
		"\x81\x06\n\x03\x02\x81\x14\x03\x02\x02\x02\x82\x83\x070\x02\x02\x83\x16" +
		"\x03\x02\x02\x02\x84\x85\x07<\x02\x02\x85\x86\x07<\x02\x02\x86\x18\x03" +
		"\x02\x02\x02\x87\x88\x07.\x02\x02\x88\x1A\x03\x02\x02\x02\x89\x8A\x07" +
		"?\x02\x02\x8A\x1C\x03\x02\x02\x02\x8B\x8E\x05!\x11\x02\x8C\x8E\x05%\x13" +
		"\x02\x8D\x8B\x03\x02\x02\x02\x8D\x8C\x03\x02\x02\x02\x8D\x8E\x03\x02\x02" +
		"\x02\x8E\x8F\x03\x02\x02\x02\x8F\x92\x07<\x02\x02\x90\x93\x05!\x11\x02" +
		"\x91\x93\x05%\x13\x02\x92\x90\x03\x02\x02\x02\x92\x91\x03\x02\x02\x02" +
		"\x92\x93\x03\x02\x02\x02\x93\x1E\x03\x02\x02\x02\x94\x98\t\x06\x02\x02" +
		"\x95\x97\t\x07\x02\x02\x96\x95\x03\x02\x02\x02\x97\x9A\x03\x02\x02\x02" +
		"\x98\x96\x03\x02\x02\x02\x98\x99\x03\x02\x02\x02\x99 \x03\x02\x02\x02" +
		"\x9A\x98\x03\x02\x02\x02\x9B\x9F\t\b\x02\x02\x9C\x9E\x05%\x13\x02\x9D" +
		"\x9C\x03\x02\x02\x02\x9E\xA1\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02\x9F" +
		"\xA0\x03\x02\x02\x02\xA0\xA3\x03\x02\x02\x02\xA1\x9F\x03\x02\x02\x02\xA2" +
		"\x9B\x03\x02\x02\x02\xA3\xA4\x03\x02\x02\x02\xA4\xA2\x03\x02\x02\x02\xA4" +
		"\xA5\x03\x02\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6\xA7\b\x11\x04\x02\xA7" +
		"\"\x03\x02\x02\x02\xA8\xA9\x07/\x02\x02\xA9\xAA\x07/\x02\x02\xAA\xAE\x03" +
		"\x02\x02\x02\xAB\xAD\n\b\x02\x02\xAC\xAB\x03\x02\x02\x02\xAD\xB0\x03\x02" +
		"\x02\x02\xAE\xAC\x03\x02\x02\x02\xAE\xAF\x03\x02\x02\x02\xAF$\x03\x02" +
		"\x02\x02\xB0\xAE\x03\x02\x02\x02\xB1\xB3\t\t\x02\x02\xB2\xB1\x03\x02\x02" +
		"\x02\xB3\xB4\x03\x02\x02\x02\xB4\xB2\x03\x02\x02\x02\xB4\xB5\x03\x02\x02" +
		"\x02\xB5\xB6\x03\x02\x02\x02\xB6\xB7\b\x13\x05\x02\xB7&\x03\x02\x02\x02" +
		"\xB8\xB9\x071\x02\x02\xB9\xBA\x07,\x02\x02\xBA\xBF\x03\x02\x02\x02\xBB" +
		"\xBE\x05\'\x14\x02\xBC\xBE\v\x02\x02\x02\xBD\xBB\x03\x02\x02\x02\xBD\xBC" +
		"\x03\x02\x02\x02\xBE\xC1\x03\x02\x02\x02\xBF\xC0\x03\x02\x02\x02\xBF\xBD" +
		"\x03\x02\x02\x02\xC0\xC2\x03\x02\x02\x02\xC1\xBF\x03\x02\x02\x02\xC2\xC3" +
		"\x07,\x02\x02\xC3\xC4\x071\x02\x02\xC4\xC5\x03\x02\x02\x02\xC5\xC6\b\x14" +
		"\x06\x02\xC6(\x03\x02\x02\x02\xC7\xCB\x07^\x02\x02\xC8\xCA\t\t\x02\x02" +
		"\xC9\xC8\x03\x02\x02\x02\xCA\xCD\x03\x02\x02\x02\xCB\xC9\x03\x02\x02\x02" +
		"\xCB\xCC\x03\x02\x02\x02\xCC\xD3\x03\x02\x02\x02\xCD\xCB\x03\x02\x02\x02" +
		"\xCE\xD0\x07\x0F\x02\x02\xCF\xCE\x03\x02\x02\x02\xCF\xD0\x03\x02\x02\x02" +
		"\xD0\xD1\x03\x02\x02\x02\xD1\xD4\x07\f\x02\x02\xD2\xD4\x04\x0E\x0F\x02" +
		"\xD3\xCF\x03\x02\x02\x02\xD3\xD2\x03\x02\x02\x02\xD4\xD5\x03\x02\x02\x02" +
		"\xD5\xD6\b\x15\x07\x02\xD6*\x03\x02\x02\x02\xD7\xD8\v\x02\x02\x02\xD8" +
		"\xD9\x03\x02\x02\x02\xD9\xDA\b\x16\b\x02\xDA,\x03\x02\x02\x02\xDB\xDD" +
		"\t\n\x02\x02\xDC\xDE\t\n\x02\x02\xDD\xDC\x03\x02\x02\x02\xDD\xDE\x03\x02" +
		"\x02\x02\xDE\xDF\x03\x02\x02\x02\xDF\xE0\t\v\x02\x02\xE0.\x03\x02\x02" +
		"\x02\xE1\xE5\t\n\x02\x02\xE2\xE4\t\f\x02\x02\xE3\xE2\x03\x02\x02\x02\xE4" +
		"\xE7\x03\x02\x02\x02\xE5\xE3\x03\x02\x02\x02\xE5\xE6\x03\x02\x02\x02\xE6" +
		"0\x03\x02\x02\x02\xE7\xE5\x03\x02\x02\x02\xE8\xEC\t\r\x02\x02\xE9\xEB" +
		"\t\x07\x02\x02\xEA\xE9\x03\x02\x02\x02\xEB\xEE\x03\x02\x02\x02\xEC\xEA" +
		"\x03\x02\x02\x02\xEC\xED\x03\x02\x02\x02\xED2\x03\x02\x02\x02\xEE\xEC" +
		"\x03\x02\x02\x02\x1F\x02;BMSY[hmow~\x8D\x92\x98\x9F\xA4\xAE\xB4\xBD\xBF" +
		"\xCB\xCF\xD3\xDD\xE3\xE5\xEA\xEC\t\x03\x02\x02\x03\x03\x03\x03\x11\x04" +
		"\x02\x05\x02\x02\x06\x02\b\x02\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

