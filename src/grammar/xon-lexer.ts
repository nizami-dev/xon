// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN_BRACKET = 3;
	public static readonly CLOSE_BRACKET = 4;
	public static readonly OPEN_PAREN = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_BRACE = 7;
	public static readonly CLOSE_BRACE = 8;
	public static readonly ABSTRACT = 9;
	public static readonly ACTUAL = 10;
	public static readonly BREAK = 11;
	public static readonly CLASS = 12;
	public static readonly DO = 13;
	public static readonly ELSE = 14;
	public static readonly ENUM = 15;
	public static readonly EXPECT = 16;
	public static readonly EXPORT = 17;
	public static readonly EXTENSION = 18;
	public static readonly FACTORY = 19;
	public static readonly FOR = 20;
	public static readonly IF = 21;
	public static readonly IN = 22;
	public static readonly IMPORT = 23;
	public static readonly INFIX = 24;
	public static readonly MODEL = 25;
	public static readonly OBJECT = 26;
	public static readonly POSTFIX = 27;
	public static readonly PREFIX = 28;
	public static readonly RETURN = 29;
	public static readonly TYPE = 30;
	public static readonly WHILE = 31;
	public static readonly ASSIGN = 32;
	public static readonly COLON = 33;
	public static readonly COMMA = 34;
	public static readonly DOT = 35;
	public static readonly EXCLAMATION = 36;
	public static readonly HASH = 37;
	public static readonly QUESTION = 38;
	public static readonly GENERIC_LEFT = 39;
	public static readonly GENERIC_RIGHT = 40;
	public static readonly FLOAT_LITERAL = 41;
	public static readonly INTEGER_LITERAL = 42;
	public static readonly REGEX_LITERAL = 43;
	public static readonly STRING_LITERAL = 44;
	public static readonly PREPROCESSOR = 45;
	public static readonly ID = 46;
	public static readonly OPERATOR = 47;
	public static readonly NL = 48;
	public static readonly WS = 49;
	public static readonly BLOCK_COMMENT = 50;
	public static readonly LINE_COMMENT = 51;
	public static readonly UNEXPECTED = 52;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "ABSTRACT", "ACTUAL", "BREAK", "CLASS", "DO", "ELSE", "ENUM", 
		"EXPECT", "EXPORT", "EXTENSION", "FACTORY", "FOR", "IF", "IN", "IMPORT", 
		"INFIX", "MODEL", "OBJECT", "POSTFIX", "PREFIX", "RETURN", "TYPE", "WHILE", 
		"ASSIGN", "COLON", "COMMA", "DOT", "EXCLAMATION", "HASH", "QUESTION", 
		"GENERIC_LEFT", "GENERIC_RIGHT", "FLOAT_LITERAL", "INTEGER_LITERAL", "REGEX_LITERAL", 
		"STRING_LITERAL", "PREPROCESSOR", "ID", "OPERATOR", "NL", "WS", "BLOCK_COMMENT", 
		"LINE_COMMENT", "UNEXPECTED", "Radix", "DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'abstract'", "'actual'", "'break'", "'class'", "'do'", "'else'", "'enum'", 
		"'expect'", "'export'", "'extension'", "'factory'", "'for'", "'if'", "'in'", 
		"'import'", "'infix'", "'model'", "'object'", "'postfix'", "'prefix'", 
		"'return'", "'type'", "'while'", "'='", "':'", "','", "'.'", "'!'", "'#'", 
		"'?'", "'<|'", "'|>'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "ABSTRACT", "ACTUAL", "BREAK", 
		"CLASS", "DO", "ELSE", "ENUM", "EXPECT", "EXPORT", "EXTENSION", "FACTORY", 
		"FOR", "IF", "IN", "IMPORT", "INFIX", "MODEL", "OBJECT", "POSTFIX", "PREFIX", 
		"RETURN", "TYPE", "WHILE", "ASSIGN", "COLON", "COMMA", "DOT", "EXCLAMATION", 
		"HASH", "QUESTION", "GENERIC_LEFT", "GENERIC_RIGHT", "FLOAT_LITERAL", 
		"INTEGER_LITERAL", "REGEX_LITERAL", "STRING_LITERAL", "PREPROCESSOR", 
		"ID", "OPERATOR", "NL", "WS", "BLOCK_COMMENT", "LINE_COMMENT", "UNEXPECTED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 2:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 3:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 4:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 5:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 45:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 45:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x026\u01B3\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03" +
		"\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03" +
		"\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03" +
		"\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03" +
		"\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03" +
		"\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
		"\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03" +
		"\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03" +
		"\x19\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03" +
		"\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03" +
		"\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03" +
		"\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03#\x03#\x03$\x03" +
		"$\x03%\x03%\x03&\x03&\x03&\x03\'\x03\'\x03\'\x03(\x03(\x03(\x03(\x03(" +
		"\x03(\x03(\x03(\x03(\x05(\u012B\n(\x03)\x03)\x03)\x03)\x05)\u0131\n)\x03" +
		"*\x03*\x03*\x03*\x07*\u0137\n*\f*\x0E*\u013A\v*\x03*\x03*\x03+\x03+\x03" +
		"+\x03+\x07+\u0142\n+\f+\x0E+\u0145\v+\x03+\x03+\x03,\x03,\x03,\x03,\x07" +
		",\u014D\n,\f,\x0E,\u0150\v,\x03,\x03,\x03-\x03-\x07-\u0156\n-\f-\x0E-" +
		"\u0159\v-\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03.\x03." +
		"\x03.\x03.\x05.\u0169\n.\x03/\x03/\x03/\x05/\u016E\n/\x03/\x03/\x05/\u0172" +
		"\n/\x03/\x05/\u0175\n/\x05/\u0177\n/\x03/\x03/\x030\x060\u017C\n0\r0\x0E" +
		"0\u017D\x030\x030\x031\x031\x031\x031\x031\x071\u0187\n1\f1\x0E1\u018A" +
		"\v1\x031\x031\x031\x031\x031\x032\x032\x032\x032\x072\u0195\n2\f2\x0E" +
		"2\u0198\v2\x032\x032\x033\x033\x033\x033\x034\x034\x054\u01A2\n4\x034" +
		"\x034\x035\x035\x075\u01A8\n5\f5\x0E5\u01AB\v5\x036\x036\x076\u01AF\n" +
		"6\f6\x0E6\u01B2\v6\x04\u014E\u0188\x02\x027\x03\x02\x05\x05\x02\x06\x07" +
		"\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r\x15\x02" +
		"\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13!\x02" +
		"\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19-\x02\x1A/\x02\x1B1" +
		"\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?\x02#A\x02$C\x02" +
		"%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+Q\x02,S\x02-U\x02.W\x02/Y\x020[" +
		"\x021]\x022_\x023a\x024c\x025e\x026g\x02\x02i\x02\x02k\x02\x02\x03\x02" +
		"\x0F\x03\x02bb\x04\x02^^bb\x03\x02))\n\x02))^^ddhhppttvvxx\x05\x02C\\" +
		"aac|\x06\x022;C\\aac|\x04\x02\'\',`\x04\x02\v\v\"\"\x04\x02\f\f\x0F\x0F" +
		"\x03\x022;\x04\x02ZZzz\x04\x022;aa\x05\x022;C\\c|\x02\u01C8\x02\x03\x03" +
		"\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03" +
		"\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02" +
		"\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02" +
		"\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02" +
		"\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02" +
		"\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02" +
		"\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03" +
		"\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02" +
		"\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02" +
		"=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02" +
		"\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02" +
		"\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03" +
		"\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02" +
		"\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02" +
		"_\x03\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02" +
		"\x02\x02\x03m\x03\x02\x02\x02\x05p\x03\x02\x02\x02\x07s\x03\x02\x02\x02" +
		"\tv\x03\x02\x02\x02\vy\x03\x02\x02\x02\r|\x03\x02\x02\x02\x0F\x7F\x03" +
		"\x02\x02\x02\x11\x88\x03\x02\x02\x02\x13\x8F\x03\x02\x02\x02\x15\x95\x03" +
		"\x02\x02\x02\x17\x9B\x03\x02\x02\x02\x19\x9E\x03\x02\x02\x02\x1B\xA3\x03" +
		"\x02\x02\x02\x1D\xA8\x03\x02\x02\x02\x1F\xAF\x03\x02\x02\x02!\xB6\x03" +
		"\x02\x02\x02#\xC0\x03\x02\x02\x02%\xC8\x03\x02\x02\x02\'\xCC\x03\x02\x02" +
		"\x02)\xCF\x03\x02\x02\x02+\xD2\x03\x02\x02\x02-\xD9\x03\x02\x02\x02/\xDF" +
		"\x03\x02\x02\x021\xE5\x03\x02\x02\x023\xEC\x03\x02\x02\x025\xF4\x03\x02" +
		"\x02\x027\xFB\x03\x02\x02\x029\u0102\x03\x02\x02\x02;\u0107\x03\x02\x02" +
		"\x02=\u010D\x03\x02\x02\x02?\u010F\x03\x02\x02\x02A\u0111\x03\x02\x02" +
		"\x02C\u0113\x03\x02\x02\x02E\u0115\x03\x02\x02\x02G\u0117\x03\x02\x02" +
		"\x02I\u0119\x03\x02\x02\x02K\u011B\x03\x02\x02\x02M\u011E\x03\x02\x02" +
		"\x02O\u012A\x03\x02\x02\x02Q\u0130\x03\x02\x02\x02S\u0132\x03\x02\x02" +
		"\x02U\u013D\x03\x02\x02\x02W\u0148\x03\x02\x02\x02Y\u0153\x03\x02\x02" +
		"\x02[\u0168\x03\x02\x02\x02]\u0176\x03\x02\x02\x02_\u017B\x03\x02\x02" +
		"\x02a\u0181\x03\x02\x02\x02c\u0190\x03\x02\x02\x02e\u019B\x03\x02\x02" +
		"\x02g\u019F\x03\x02\x02\x02i\u01A5\x03\x02\x02\x02k\u01AC\x03\x02\x02" +
		"\x02mn\x07]\x02\x02no\b\x02\x02\x02o\x04\x03\x02\x02\x02pq\x07_\x02\x02" +
		"qr\b\x03\x03\x02r\x06\x03\x02\x02\x02st\x07*\x02\x02tu\b\x04\x04\x02u" +
		"\b\x03\x02\x02\x02vw\x07+\x02\x02wx\b\x05\x05\x02x\n\x03\x02\x02\x02y" +
		"z\x07}\x02\x02z{\b\x06\x06\x02{\f\x03\x02\x02\x02|}\x07\x7F\x02\x02}~" +
		"\b\x07\x07\x02~\x0E\x03\x02\x02\x02\x7F\x80\x07c\x02\x02\x80\x81\x07d" +
		"\x02\x02\x81\x82\x07u\x02\x02\x82\x83\x07v\x02\x02\x83\x84\x07t\x02\x02" +
		"\x84\x85\x07c\x02\x02\x85\x86\x07e\x02\x02\x86\x87\x07v\x02\x02\x87\x10" +
		"\x03\x02\x02\x02\x88\x89\x07c\x02\x02\x89\x8A\x07e\x02\x02\x8A\x8B\x07" +
		"v\x02\x02\x8B\x8C\x07w\x02\x02\x8C\x8D\x07c\x02\x02\x8D\x8E\x07n\x02\x02" +
		"\x8E\x12\x03\x02\x02\x02\x8F\x90\x07d\x02\x02\x90\x91\x07t\x02\x02\x91" +
		"\x92\x07g\x02\x02\x92\x93\x07c\x02\x02\x93\x94\x07m\x02\x02\x94\x14\x03" +
		"\x02\x02\x02\x95\x96\x07e\x02\x02\x96\x97\x07n\x02\x02\x97\x98\x07c\x02" +
		"\x02\x98\x99\x07u\x02\x02\x99\x9A\x07u\x02\x02\x9A\x16\x03\x02\x02\x02" +
		"\x9B\x9C\x07f\x02\x02\x9C\x9D\x07q\x02\x02\x9D\x18\x03\x02\x02\x02\x9E" +
		"\x9F\x07g\x02\x02\x9F\xA0\x07n\x02\x02\xA0\xA1\x07u\x02\x02\xA1\xA2\x07" +
		"g\x02\x02\xA2\x1A\x03\x02\x02\x02\xA3\xA4\x07g\x02\x02\xA4\xA5\x07p\x02" +
		"\x02\xA5\xA6\x07w\x02\x02\xA6\xA7\x07o\x02\x02\xA7\x1C\x03\x02\x02\x02" +
		"\xA8\xA9\x07g\x02\x02\xA9\xAA\x07z\x02\x02\xAA\xAB\x07r\x02\x02\xAB\xAC" +
		"\x07g\x02\x02\xAC\xAD\x07e\x02\x02\xAD\xAE\x07v\x02\x02\xAE\x1E\x03\x02" +
		"\x02\x02\xAF\xB0\x07g\x02\x02\xB0\xB1\x07z\x02\x02\xB1\xB2\x07r\x02\x02" +
		"\xB2\xB3\x07q\x02\x02\xB3\xB4\x07t\x02\x02\xB4\xB5\x07v\x02\x02\xB5 \x03" +
		"\x02\x02\x02\xB6\xB7\x07g\x02\x02\xB7\xB8\x07z\x02\x02\xB8\xB9\x07v\x02" +
		"\x02\xB9\xBA\x07g\x02\x02\xBA\xBB\x07p\x02\x02\xBB\xBC\x07u\x02\x02\xBC" +
		"\xBD\x07k\x02\x02\xBD\xBE\x07q\x02\x02\xBE\xBF\x07p\x02\x02\xBF\"\x03" +
		"\x02\x02\x02\xC0\xC1\x07h\x02\x02\xC1\xC2\x07c\x02\x02\xC2\xC3\x07e\x02" +
		"\x02\xC3\xC4\x07v\x02\x02\xC4\xC5\x07q\x02\x02\xC5\xC6\x07t\x02\x02\xC6" +
		"\xC7\x07{\x02\x02\xC7$\x03\x02\x02\x02\xC8\xC9\x07h\x02\x02\xC9\xCA\x07" +
		"q\x02\x02\xCA\xCB\x07t\x02\x02\xCB&\x03\x02\x02\x02\xCC\xCD\x07k\x02\x02" +
		"\xCD\xCE\x07h\x02\x02\xCE(\x03\x02\x02\x02\xCF\xD0\x07k\x02\x02\xD0\xD1" +
		"\x07p\x02\x02\xD1*\x03\x02\x02\x02\xD2\xD3\x07k\x02\x02\xD3\xD4\x07o\x02" +
		"\x02\xD4\xD5\x07r\x02\x02\xD5\xD6\x07q\x02\x02\xD6\xD7\x07t\x02\x02\xD7" +
		"\xD8\x07v\x02\x02\xD8,\x03\x02\x02\x02\xD9\xDA\x07k\x02\x02\xDA\xDB\x07" +
		"p\x02\x02\xDB\xDC\x07h\x02\x02\xDC\xDD\x07k\x02\x02\xDD\xDE\x07z\x02\x02" +
		"\xDE.\x03\x02\x02\x02\xDF\xE0\x07o\x02\x02\xE0\xE1\x07q\x02\x02\xE1\xE2" +
		"\x07f\x02\x02\xE2\xE3\x07g\x02\x02\xE3\xE4\x07n\x02\x02\xE40\x03\x02\x02" +
		"\x02\xE5\xE6\x07q\x02\x02\xE6\xE7\x07d\x02\x02\xE7\xE8\x07l\x02\x02\xE8" +
		"\xE9\x07g\x02\x02\xE9\xEA\x07e\x02\x02\xEA\xEB\x07v\x02\x02\xEB2\x03\x02" +
		"\x02\x02\xEC\xED\x07r\x02\x02\xED\xEE\x07q\x02\x02\xEE\xEF\x07u\x02\x02" +
		"\xEF\xF0\x07v\x02\x02\xF0\xF1\x07h\x02\x02\xF1\xF2\x07k\x02\x02\xF2\xF3" +
		"\x07z\x02\x02\xF34\x03\x02\x02\x02\xF4\xF5\x07r\x02\x02\xF5\xF6\x07t\x02" +
		"\x02\xF6\xF7\x07g\x02\x02\xF7\xF8\x07h\x02\x02\xF8\xF9\x07k\x02\x02\xF9" +
		"\xFA\x07z\x02\x02\xFA6\x03\x02\x02\x02\xFB\xFC\x07t\x02\x02\xFC\xFD\x07" +
		"g\x02\x02\xFD\xFE\x07v\x02\x02\xFE\xFF\x07w\x02\x02\xFF\u0100\x07t\x02" +
		"\x02\u0100\u0101\x07p\x02\x02\u01018\x03\x02\x02\x02\u0102\u0103\x07v" +
		"\x02\x02\u0103\u0104\x07{\x02\x02\u0104\u0105\x07r\x02\x02\u0105\u0106" +
		"\x07g\x02\x02\u0106:\x03\x02\x02\x02\u0107\u0108\x07y\x02\x02\u0108\u0109" +
		"\x07j\x02\x02\u0109\u010A\x07k\x02\x02\u010A\u010B\x07n\x02\x02\u010B" +
		"\u010C\x07g\x02\x02\u010C<\x03\x02\x02\x02\u010D\u010E\x07?\x02\x02\u010E" +
		">\x03\x02\x02\x02\u010F\u0110\x07<\x02\x02\u0110@\x03\x02\x02\x02\u0111" +
		"\u0112\x07.\x02\x02\u0112B\x03\x02\x02\x02\u0113\u0114\x070\x02\x02\u0114" +
		"D\x03\x02\x02\x02\u0115\u0116\x07#\x02\x02\u0116F\x03\x02\x02\x02\u0117" +
		"\u0118\x07%\x02\x02\u0118H\x03\x02\x02\x02\u0119\u011A\x07A\x02\x02\u011A" +
		"J\x03\x02\x02\x02\u011B\u011C\x07>\x02\x02\u011C\u011D\x07~\x02\x02\u011D" +
		"L\x03\x02\x02\x02\u011E\u011F\x07~\x02\x02\u011F\u0120\x07@\x02\x02\u0120" +
		"N\x03\x02\x02\x02\u0121\u0122\x05g4\x02\u0122\u0123\x05k6\x02\u0123\u0124" +
		"\x070\x02\x02\u0124\u0125\x05k6\x02\u0125\u012B\x03\x02\x02\x02\u0126" +
		"\u0127\x05i5\x02\u0127\u0128\x070\x02\x02\u0128\u0129\x05i5\x02\u0129" +
		"\u012B\x03\x02\x02\x02\u012A\u0121\x03\x02\x02\x02\u012A\u0126\x03\x02" +
		"\x02\x02\u012BP\x03\x02\x02\x02\u012C\u012D\x05g4\x02\u012D\u012E\x05" +
		"k6\x02\u012E\u0131\x03\x02\x02\x02\u012F\u0131\x05i5\x02\u0130\u012C\x03" +
		"\x02\x02\x02\u0130\u012F\x03\x02\x02\x02\u0131R\x03\x02\x02\x02\u0132" +
		"\u0138\x07b\x02\x02\u0133\u0137\n\x02\x02\x02\u0134\u0135\x07^\x02\x02" +
		"\u0135\u0137\t\x03\x02\x02\u0136\u0133\x03\x02\x02\x02\u0136\u0134\x03" +
		"\x02\x02\x02\u0137\u013A\x03\x02\x02\x02\u0138\u0136\x03\x02\x02\x02\u0138" +
		"\u0139\x03\x02\x02\x02\u0139\u013B\x03\x02\x02\x02\u013A\u0138\x03\x02" +
		"\x02\x02\u013B\u013C\x07b\x02\x02\u013CT\x03\x02\x02\x02\u013D\u0143\x07" +
		")\x02\x02\u013E\u0142\n\x04\x02\x02\u013F\u0140\x07^\x02\x02\u0140\u0142" +
		"\t\x05\x02\x02\u0141\u013E\x03\x02\x02\x02\u0141\u013F\x03\x02\x02\x02" +
		"\u0142\u0145\x03\x02\x02\x02\u0143\u0141\x03\x02\x02\x02\u0143\u0144\x03" +
		"\x02\x02\x02\u0144\u0146\x03\x02\x02\x02\u0145\u0143\x03\x02\x02\x02\u0146" +
		"\u0147\x07)\x02\x02\u0147V\x03\x02\x02\x02\u0148\u0149\x07%\x02\x02\u0149" +
		"\u014A\x07}\x02\x02\u014A\u014E\x03\x02\x02\x02\u014B\u014D\v\x02\x02" +
		"\x02\u014C\u014B\x03\x02\x02\x02\u014D\u0150\x03\x02\x02\x02\u014E\u014F" +
		"\x03\x02\x02\x02\u014E\u014C\x03\x02\x02\x02\u014F\u0151\x03\x02\x02\x02" +
		"\u0150\u014E\x03\x02\x02\x02\u0151\u0152\x07\x7F\x02\x02\u0152X\x03\x02" +
		"\x02\x02\u0153\u0157\t\x06\x02\x02\u0154\u0156\t\x07\x02\x02\u0155\u0154" +
		"\x03\x02\x02\x02\u0156\u0159\x03\x02\x02\x02\u0157\u0155\x03\x02\x02\x02" +
		"\u0157\u0158\x03\x02\x02\x02\u0158Z\x03\x02\x02\x02\u0159\u0157\x03\x02" +
		"\x02\x02\u015A\u0169\t\b\x02\x02\u015B\u015C\x070\x02\x02\u015C\u0169" +
		"\x070\x02\x02\u015D\u015E\x070\x02\x02\u015E\u015F\x070\x02\x02\u015F" +
		"\u0169\x070\x02\x02\u0160\u0161\x07>\x02\x02\u0161\u0169\x07?\x02\x02" +
		"\u0162\u0163\x07@\x02\x02\u0163\u0169\x07?\x02\x02\u0164\u0165\x07?\x02" +
		"\x02\u0165\u0169\x07?\x02\x02\u0166\u0167\x07#\x02\x02\u0167\u0169\x07" +
		"?\x02\x02\u0168\u015A\x03\x02\x02\x02\u0168\u015B\x03\x02\x02\x02\u0168" +
		"\u015D\x03\x02\x02\x02\u0168\u0160\x03\x02\x02\x02\u0168\u0162\x03\x02" +
		"\x02\x02\u0168\u0164\x03\x02\x02\x02\u0168\u0166\x03\x02\x02\x02\u0169" +
		"\\\x03\x02\x02\x02\u016A\u016B\x06/\x02\x02\u016B\u0177\x05_0\x02\u016C" +
		"\u016E\x07\x0F\x02\x02\u016D\u016C\x03\x02\x02\x02\u016D\u016E\x03\x02" +
		"\x02\x02\u016E\u016F\x03\x02\x02\x02\u016F\u0172\x07\f\x02\x02\u0170\u0172" +
		"\x07\x0F\x02\x02\u0171\u016D\x03\x02\x02\x02\u0171\u0170\x03\x02\x02\x02" +
		"\u0172\u0174\x03\x02\x02\x02\u0173\u0175\x05_0\x02\u0174\u0173\x03\x02" +
		"\x02\x02\u0174\u0175\x03\x02\x02\x02\u0175\u0177\x03\x02\x02\x02\u0176" +
		"\u016A\x03\x02\x02\x02\u0176\u0171\x03\x02\x02\x02\u0177\u0178\x03\x02" +
		"\x02\x02\u0178\u0179\b/\b\x02\u0179^\x03\x02\x02\x02\u017A\u017C\t\t\x02" +
		"\x02\u017B\u017A\x03\x02\x02\x02\u017C\u017D\x03\x02\x02\x02\u017D\u017B" +
		"\x03\x02\x02\x02\u017D\u017E\x03\x02\x02\x02\u017E\u017F\x03\x02\x02\x02" +
		"\u017F\u0180\b0\t\x02\u0180`\x03\x02\x02\x02\u0181\u0182\x071\x02\x02" +
		"\u0182\u0183\x07,\x02\x02\u0183\u0188\x03\x02\x02\x02\u0184\u0187\x05" +
		"a1\x02\u0185\u0187\v\x02\x02\x02\u0186\u0184\x03\x02\x02\x02\u0186\u0185" +
		"\x03\x02\x02\x02\u0187\u018A\x03\x02\x02\x02\u0188\u0189\x03\x02\x02\x02" +
		"\u0188\u0186\x03\x02\x02\x02\u0189\u018B\x03\x02\x02\x02\u018A\u0188\x03" +
		"\x02\x02\x02\u018B\u018C\x07,\x02\x02\u018C\u018D\x071\x02\x02\u018D\u018E" +
		"\x03\x02\x02\x02\u018E\u018F\b1\n\x02\u018Fb\x03\x02\x02\x02\u0190\u0191" +
		"\x07/\x02\x02\u0191\u0192\x07/\x02\x02\u0192\u0196\x03\x02\x02\x02\u0193" +
		"\u0195\n\n\x02\x02\u0194\u0193\x03\x02\x02\x02\u0195\u0198\x03\x02\x02" +
		"\x02\u0196\u0194\x03\x02\x02\x02\u0196\u0197\x03\x02\x02\x02\u0197\u0199" +
		"\x03\x02\x02\x02\u0198\u0196\x03\x02\x02\x02\u0199\u019A\b2\n\x02\u019A" +
		"d\x03\x02\x02\x02\u019B\u019C\v\x02\x02\x02\u019C\u019D\x03\x02\x02\x02" +
		"\u019D\u019E\b3\v\x02\u019Ef\x03\x02\x02\x02\u019F\u01A1\t\v\x02\x02\u01A0" +
		"\u01A2\t\v\x02\x02\u01A1\u01A0\x03\x02\x02\x02\u01A1\u01A2\x03\x02\x02" +
		"\x02\u01A2\u01A3\x03\x02\x02\x02\u01A3\u01A4\t\f\x02\x02\u01A4h\x03\x02" +
		"\x02\x02\u01A5\u01A9\t\v\x02\x02\u01A6\u01A8\t\r\x02\x02\u01A7\u01A6\x03" +
		"\x02\x02\x02\u01A8\u01AB\x03\x02\x02\x02\u01A9\u01A7\x03\x02\x02\x02\u01A9" +
		"\u01AA\x03\x02\x02\x02\u01AAj\x03\x02\x02\x02\u01AB\u01A9\x03\x02\x02" +
		"\x02\u01AC\u01B0\t\x0E\x02\x02\u01AD\u01AF\t\x07\x02\x02\u01AE\u01AD\x03" +
		"\x02\x02\x02\u01AF\u01B2\x03\x02\x02\x02\u01B0\u01AE\x03\x02\x02\x02\u01B0" +
		"\u01B1\x03\x02\x02\x02\u01B1l\x03\x02\x02\x02\u01B2\u01B0\x03\x02\x02" +
		"\x02\x19\x02\u012A\u0130\u0136\u0138\u0141\u0143\u014E\u0157\u0168\u016D" +
		"\u0171\u0174\u0176\u017D\u0186\u0188\u0196\u01A1\u01A7\u01A9\u01AE\u01B0" +
		"\f\x03\x02\x02\x03\x03\x03\x03\x04\x04\x03\x05\x05\x03\x06\x06\x03\x07" +
		"\x07\x03/\b\x02\x05\x02\x02\x06\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

