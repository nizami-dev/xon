// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
// @ts-nocheck
import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly As = 3;
	public static readonly If = 4;
	public static readonly Else = 5;
	public static readonly ElseIf = 6;
	public static readonly Loop = 7;
	public static readonly In = 8;
	public static readonly Break = 9;
	public static readonly Return = 10;
	public static readonly Preprocessor = 11;
	public static readonly LineBreak = 12;
	public static readonly OpenBracket = 13;
	public static readonly CloseBracket = 14;
	public static readonly OpenParen = 15;
	public static readonly CloseParen = 16;
	public static readonly OpenBrace = 17;
	public static readonly CloseBrace = 18;
	public static readonly Comma = 19;
	public static readonly Assign = 20;
	public static readonly Question = 21;
	public static readonly Colon = 22;
	public static readonly Dot = 23;
	public static readonly Plus = 24;
	public static readonly Minus = 25;
	public static readonly Exclamation = 26;
	public static readonly Asterisk = 27;
	public static readonly Slash = 28;
	public static readonly Modulo = 29;
	public static readonly Caret = 30;
	public static readonly Hash = 31;
	public static readonly LessThan = 32;
	public static readonly MoreThan = 33;
	public static readonly LessThanEquals = 34;
	public static readonly MoreThanEquals = 35;
	public static readonly Equals = 36;
	public static readonly NotEquals = 37;
	public static readonly And = 38;
	public static readonly Or = 39;
	public static readonly AsteriskAssign = 40;
	public static readonly SlashAssign = 41;
	public static readonly PercentAssign = 42;
	public static readonly PlusAssign = 43;
	public static readonly MinusAssign = 44;
	public static readonly Pipe = 45;
	public static readonly LambdaStart = 46;
	public static readonly BooleanLiteral = 47;
	public static readonly NumberLiteral = 48;
	public static readonly StringLiteral = 49;
	public static readonly ID = 50;
	public static readonly Skip = 51;
	public static readonly UnexpectedCharacter = 52;
	public static readonly ERROR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"As", "If", "Else", "ElseIf", "Loop", "In", "Break", "Return", "Preprocessor", 
		"LineBreak", "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", 
		"OpenBrace", "CloseBrace", "Comma", "Assign", "Question", "Colon", "Dot", 
		"Plus", "Minus", "Exclamation", "Asterisk", "Slash", "Modulo", "Caret", 
		"Hash", "LessThan", "MoreThan", "LessThanEquals", "MoreThanEquals", "Equals", 
		"NotEquals", "And", "Or", "AsteriskAssign", "SlashAssign", "PercentAssign", 
		"PlusAssign", "MinusAssign", "Pipe", "LambdaStart", "BooleanLiteral", 
		"NumberLiteral", "StringLiteral", "ID", "Skip", "UnexpectedCharacter", 
		"SPACES", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "LINE_JOINING", 
		"NUMBER", "CHARACTER",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'as'", "'if'", "'else'", "'elif'", "'loop'", 
		"'in'", "'break'", "'return'", undefined, undefined, "'['", "']'", "'('", 
		"')'", "'{'", "'}'", "','", "'='", "'?'", "':'", "'.'", "'+'", "'-'", 
		"'!'", "'*'", "'/'", "'%'", "'^'", "'#'", "'<'", "'>'", "'<='", "'>='", 
		"'=='", "'!='", "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'|'", "'\\'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "As", "If", "Else", "ElseIf", "Loop", "In", 
		"Break", "Return", "Preprocessor", "LineBreak", "OpenBracket", "CloseBracket", 
		"OpenParen", "CloseParen", "OpenBrace", "CloseBrace", "Comma", "Assign", 
		"Question", "Colon", "Dot", "Plus", "Minus", "Exclamation", "Asterisk", 
		"Slash", "Modulo", "Caret", "Hash", "LessThan", "MoreThan", "LessThanEquals", 
		"MoreThanEquals", "Equals", "NotEquals", "And", "Or", "AsteriskAssign", 
		"SlashAssign", "PercentAssign", "PlusAssign", "MinusAssign", "Pipe", "LambdaStart", 
		"BooleanLiteral", "NumberLiteral", "StringLiteral", "ID", "Skip", "UnexpectedCharacter",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 9:
			this.LineBreak_action(_localctx, actionIndex);
			break;

		case 10:
			this.OpenBracket_action(_localctx, actionIndex);
			break;

		case 11:
			this.CloseBracket_action(_localctx, actionIndex);
			break;

		case 12:
			this.OpenParen_action(_localctx, actionIndex);
			break;

		case 13:
			this.CloseParen_action(_localctx, actionIndex);
			break;

		case 14:
			this.OpenBrace_action(_localctx, actionIndex);
			break;

		case 15:
			this.CloseBrace_action(_localctx, actionIndex);
			break;
		}
	}
	private LineBreak_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.handleLineBreak()
			break;
		}
	}
	private OpenBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened++;
			break;
		}
	}
	private CloseBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened--;
			break;
		}
	}
	private OpenParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened++;
			break;
		}
	}
	private CloseParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened--;
			break;
		}
	}
	private OpenBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened++;
			break;
		}
	}
	private CloseBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.opened--;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 9:
			return this.LineBreak_sempred(_localctx, predIndex);
		}
		return true;
	}
	private LineBreak_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x026\u0188\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x03\x02\x03\x02\x03\x02\x03" +
		"\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x07\n\x9D\n\n\f\n\x0E" +
		"\n\xA0\v\n\x03\n\x03\n\x03\v\x03\v\x03\v\x05\v\xA7\n\v\x03\v\x03\v\x05" +
		"\v\xAB\n\v\x03\v\x05\v\xAE\n\v\x05\v\xB0\n\v\x03\v\x03\v\x03\f\x03\f\x03" +
		"\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03" +
		"\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03" +
		"\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03" +
		"\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03" +
		"!\x03!\x03\"\x03\"\x03\"\x03#\x03#\x03#\x03$\x03$\x03$\x03%\x03%\x03%" +
		"\x03&\x03&\x03&\x03\'\x03\'\x03\'\x03(\x03(\x03(\x03)\x03)\x03)\x03*\x03" +
		"*\x03*\x03+\x03+\x03+\x03,\x03,\x03-\x03-\x03.\x03.\x03.\x03.\x03.\x03" +
		".\x03.\x03.\x03.\x05.\u0112\n.\x03/\x03/\x05/\u0116\n/\x03/\x03/\x05/" +
		"\u011A\n/\x030\x030\x070\u011E\n0\f0\x0E0\u0121\v0\x030\x030\x031\x03" +
		"1\x071\u0127\n1\f1\x0E1\u012A\v1\x032\x032\x032\x032\x052\u0130\n2\x03" +
		"2\x032\x033\x033\x033\x033\x034\x064\u0139\n4\r4\x0E4\u013A\x035\x035" +
		"\x035\x035\x075\u0141\n5\f5\x0E5\u0144\v5\x035\x035\x035\x036\x036\x03" +
		"6\x036\x076\u014D\n6\f6\x0E6\u0150\v6\x037\x037\x057\u0154\n7\x037\x05" +
		"7\u0157\n7\x037\x037\x057\u015B\n7\x038\x038\x058\u015F\n8\x038\x038\x06" +
		"8\u0163\n8\r8\x0E8\u0164\x038\x038\x068\u0169\n8\r8\x0E8\u016A\x078\u016D" +
		"\n8\f8\x0E8\u0170\v8\x038\x068\u0173\n8\r8\x0E8\u0174\x038\x038\x068\u0179" +
		"\n8\r8\x0E8\u017A\x078\u017D\n8\f8\x0E8\u0180\v8\x058\u0182\n8\x039\x03" +
		"9\x039\x059\u0187\n9\x04\x9E\u0142\x02\x02:\x03\x02\x05\x05\x02\x06\x07" +
		"\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r\x15\x02" +
		"\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13!\x02" +
		"\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19-\x02\x1A/\x02\x1B1" +
		"\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?\x02#A\x02$C\x02" +
		"%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+Q\x02,S\x02-U\x02.W\x02/Y\x020[" +
		"\x021]\x022_\x023a\x024c\x025e\x026g\x02\x02i\x02\x02k\x02\x02m\x02\x02" +
		"o\x02\x02q\x02\x02\x03\x02\n\x05\x02C\\aac|\x06\x022;C\\aac|\x04\x02\v" +
		"\v\"\"\x04\x02\f\f\x0F\x0F\x03\x022;\x05\x022;C\\c|\x03\x02))\v\x02$$" +
		"))^^ddhhppttvvxx\x02\u019D\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02" +
		"\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02" +
		"\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02" +
		"\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02" +
		"\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02" +
		"\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02" +
		"%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03" +
		"\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02" +
		"\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x02" +
		"9\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02" +
		"\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02" +
		"\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03" +
		"\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02" +
		"\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02" +
		"[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02" +
		"\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02\x02\x03s\x03\x02\x02\x02" +
		"\x05v\x03\x02\x02\x02\x07y\x03\x02\x02\x02\t~\x03\x02\x02\x02\v\x83\x03" +
		"\x02\x02\x02\r\x88\x03\x02\x02\x02\x0F\x8B\x03\x02\x02\x02\x11\x91\x03" +
		"\x02\x02\x02\x13\x98\x03\x02\x02\x02\x15\xAF\x03\x02\x02\x02\x17\xB3\x03" +
		"\x02\x02\x02\x19\xB6\x03\x02\x02\x02\x1B\xB9\x03\x02\x02\x02\x1D\xBC\x03" +
		"\x02\x02\x02\x1F\xBF\x03\x02\x02\x02!\xC2\x03\x02\x02\x02#\xC5\x03\x02" +
		"\x02\x02%\xC7\x03\x02\x02\x02\'\xC9\x03\x02\x02\x02)\xCB\x03\x02\x02\x02" +
		"+\xCD\x03\x02\x02\x02-\xCF\x03\x02\x02\x02/\xD1\x03\x02\x02\x021\xD3\x03" +
		"\x02\x02\x023\xD5\x03\x02\x02\x025\xD7\x03\x02\x02\x027\xD9\x03\x02\x02" +
		"\x029\xDB\x03\x02\x02\x02;\xDD\x03\x02\x02\x02=\xDF\x03\x02\x02\x02?\xE1" +
		"\x03\x02\x02\x02A\xE3\x03\x02\x02\x02C\xE6\x03\x02\x02\x02E\xE9\x03\x02" +
		"\x02\x02G\xEC\x03\x02\x02\x02I\xEF\x03\x02\x02\x02K\xF2\x03\x02\x02\x02" +
		"M\xF5\x03\x02\x02\x02O\xF8\x03\x02\x02\x02Q\xFB\x03\x02\x02\x02S\xFE\x03" +
		"\x02\x02\x02U\u0101\x03\x02\x02\x02W\u0104\x03\x02\x02\x02Y\u0106\x03" +
		"\x02\x02\x02[\u0111\x03\x02\x02\x02]\u0119\x03\x02\x02\x02_\u011B\x03" +
		"\x02\x02\x02a\u0124\x03\x02\x02\x02c\u012F\x03\x02\x02\x02e\u0133\x03" +
		"\x02\x02\x02g\u0138\x03\x02\x02\x02i\u013C\x03\x02\x02\x02k\u0148\x03" +
		"\x02\x02\x02m\u0151\x03\x02\x02\x02o\u0181\x03\x02\x02\x02q\u0186\x03" +
		"\x02\x02\x02st\x07c\x02\x02tu\x07u\x02\x02u\x04\x03\x02\x02\x02vw\x07" +
		"k\x02\x02wx\x07h\x02\x02x\x06\x03\x02\x02\x02yz\x07g\x02\x02z{\x07n\x02" +
		"\x02{|\x07u\x02\x02|}\x07g\x02\x02}\b\x03\x02\x02\x02~\x7F\x07g\x02\x02" +
		"\x7F\x80\x07n\x02\x02\x80\x81\x07k\x02\x02\x81\x82\x07h\x02\x02\x82\n" +
		"\x03\x02\x02\x02\x83\x84\x07n\x02\x02\x84\x85\x07q\x02\x02\x85\x86\x07" +
		"q\x02\x02\x86\x87\x07r\x02\x02\x87\f\x03\x02\x02\x02\x88\x89\x07k\x02" +
		"\x02\x89\x8A\x07p\x02\x02\x8A\x0E\x03\x02\x02\x02\x8B\x8C\x07d\x02\x02" +
		"\x8C\x8D\x07t\x02\x02\x8D\x8E\x07g\x02\x02\x8E\x8F\x07c\x02\x02\x8F\x90" +
		"\x07m\x02\x02\x90\x10\x03\x02\x02\x02\x91\x92\x07t\x02\x02\x92\x93\x07" +
		"g\x02\x02\x93\x94\x07v\x02\x02\x94\x95\x07w\x02\x02\x95\x96\x07t\x02\x02" +
		"\x96\x97\x07p\x02\x02\x97\x12\x03\x02\x02\x02\x98\x99\x07%\x02\x02\x99" +
		"\x9A\x07}\x02\x02\x9A\x9E\x03\x02\x02\x02\x9B\x9D\v\x02\x02\x02\x9C\x9B" +
		"\x03\x02\x02\x02\x9D\xA0\x03\x02\x02\x02\x9E\x9F\x03\x02\x02\x02\x9E\x9C" +
		"\x03\x02\x02\x02\x9F\xA1\x03\x02\x02\x02\xA0\x9E\x03\x02\x02\x02\xA1\xA2" +
		"\x07\x7F\x02\x02\xA2\x14\x03\x02\x02\x02\xA3\xA4\x06\v\x02\x02\xA4\xB0" +
		"\x05g4\x02\xA5\xA7\x07\x0F\x02\x02\xA6\xA5\x03\x02\x02\x02\xA6\xA7\x03" +
		"\x02\x02\x02\xA7\xA8\x03\x02\x02\x02\xA8\xAB\x07\f\x02\x02\xA9\xAB\x07" +
		"\x0F\x02\x02\xAA\xA6\x03\x02\x02\x02\xAA\xA9\x03\x02\x02\x02\xAB\xAD\x03" +
		"\x02\x02\x02\xAC\xAE\x05g4\x02\xAD\xAC\x03\x02\x02\x02\xAD\xAE\x03\x02" +
		"\x02\x02\xAE\xB0\x03\x02\x02\x02\xAF\xA3\x03\x02\x02\x02\xAF\xAA\x03\x02" +
		"\x02\x02\xB0\xB1\x03\x02\x02\x02\xB1\xB2\b\v\x02\x02\xB2\x16\x03\x02\x02" +
		"\x02\xB3\xB4\x07]\x02\x02\xB4\xB5\b\f\x03\x02\xB5\x18\x03\x02\x02\x02" +
		"\xB6\xB7\x07_\x02\x02\xB7\xB8\b\r\x04\x02\xB8\x1A\x03\x02\x02\x02\xB9" +
		"\xBA\x07*\x02\x02\xBA\xBB\b\x0E\x05\x02\xBB\x1C\x03\x02\x02\x02\xBC\xBD" +
		"\x07+\x02\x02\xBD\xBE\b\x0F\x06\x02\xBE\x1E\x03\x02\x02\x02\xBF\xC0\x07" +
		"}\x02\x02\xC0\xC1\b\x10\x07\x02\xC1 \x03\x02\x02\x02\xC2\xC3\x07\x7F\x02" +
		"\x02\xC3\xC4\b\x11\b\x02\xC4\"\x03\x02\x02\x02\xC5\xC6\x07.\x02\x02\xC6" +
		"$\x03\x02\x02\x02\xC7\xC8\x07?\x02\x02\xC8&\x03\x02\x02\x02\xC9\xCA\x07" +
		"A\x02\x02\xCA(\x03\x02\x02\x02\xCB\xCC\x07<\x02\x02\xCC*\x03\x02\x02\x02" +
		"\xCD\xCE\x070\x02\x02\xCE,\x03\x02\x02\x02\xCF\xD0\x07-\x02\x02\xD0.\x03" +
		"\x02\x02\x02\xD1\xD2\x07/\x02\x02\xD20\x03\x02\x02\x02\xD3\xD4\x07#\x02" +
		"\x02\xD42\x03\x02\x02\x02\xD5\xD6\x07,\x02\x02\xD64\x03\x02\x02\x02\xD7" +
		"\xD8\x071\x02\x02\xD86\x03\x02\x02\x02\xD9\xDA\x07\'\x02\x02\xDA8\x03" +
		"\x02\x02\x02\xDB\xDC\x07`\x02\x02\xDC:\x03\x02\x02\x02\xDD\xDE\x07%\x02" +
		"\x02\xDE<\x03\x02\x02\x02\xDF\xE0\x07>\x02\x02\xE0>\x03\x02\x02\x02\xE1" +
		"\xE2\x07@\x02\x02\xE2@\x03\x02\x02\x02\xE3\xE4\x07>\x02\x02\xE4\xE5\x07" +
		"?\x02\x02\xE5B\x03\x02\x02\x02\xE6\xE7\x07@\x02\x02\xE7\xE8\x07?\x02\x02" +
		"\xE8D\x03\x02\x02\x02\xE9\xEA\x07?\x02\x02\xEA\xEB\x07?\x02\x02\xEBF\x03" +
		"\x02\x02\x02\xEC\xED\x07#\x02\x02\xED\xEE\x07?\x02\x02\xEEH\x03\x02\x02" +
		"\x02\xEF\xF0\x07(\x02\x02\xF0\xF1\x07(\x02\x02\xF1J\x03\x02\x02\x02\xF2" +
		"\xF3\x07~\x02\x02\xF3\xF4\x07~\x02\x02\xF4L\x03\x02\x02\x02\xF5\xF6\x07" +
		",\x02\x02\xF6\xF7\x07?\x02\x02\xF7N\x03\x02\x02\x02\xF8\xF9\x071\x02\x02" +
		"\xF9\xFA\x07?\x02\x02\xFAP\x03\x02\x02\x02\xFB\xFC\x07\'\x02\x02\xFC\xFD" +
		"\x07?\x02\x02\xFDR\x03\x02\x02\x02\xFE\xFF\x07-\x02\x02\xFF\u0100\x07" +
		"?\x02\x02\u0100T\x03\x02\x02\x02\u0101\u0102\x07/\x02\x02\u0102\u0103" +
		"\x07?\x02\x02\u0103V\x03\x02\x02\x02\u0104\u0105\x07~\x02\x02\u0105X\x03" +
		"\x02\x02\x02\u0106\u0107\x07^\x02\x02\u0107Z\x03\x02\x02\x02\u0108\u0109" +
		"\x07v\x02\x02\u0109\u010A\x07t\x02\x02\u010A\u010B\x07w\x02\x02\u010B" +
		"\u0112\x07g\x02\x02\u010C\u010D\x07h\x02\x02\u010D\u010E\x07c\x02\x02" +
		"\u010E\u010F\x07n\x02\x02\u010F\u0110\x07u\x02\x02\u0110\u0112\x07g\x02" +
		"\x02\u0111\u0108\x03\x02\x02\x02\u0111\u010C\x03\x02\x02\x02\u0112\\\x03" +
		"\x02\x02\x02\u0113\u011A\x05o8\x02\u0114\u0116\x05o8\x02\u0115\u0114\x03" +
		"\x02\x02\x02\u0115\u0116\x03\x02\x02\x02\u0116\u0117\x03\x02\x02\x02\u0117" +
		"\u0118\x070\x02\x02\u0118\u011A\x05o8\x02\u0119\u0113\x03\x02\x02\x02" +
		"\u0119\u0115\x03\x02\x02\x02\u011A^\x03\x02\x02\x02\u011B\u011F\x07)\x02" +
		"\x02\u011C\u011E\x05q9\x02\u011D\u011C\x03\x02\x02\x02\u011E\u0121\x03" +
		"\x02\x02\x02\u011F\u011D\x03\x02\x02\x02\u011F\u0120\x03\x02\x02\x02\u0120" +
		"\u0122\x03\x02\x02\x02\u0121\u011F\x03\x02\x02\x02\u0122\u0123\x07)\x02" +
		"\x02\u0123`\x03\x02\x02\x02\u0124\u0128\t\x02\x02\x02\u0125\u0127\t\x03" +
		"\x02\x02\u0126\u0125\x03\x02\x02\x02\u0127\u012A\x03\x02\x02\x02\u0128" +
		"\u0126\x03\x02\x02\x02\u0128\u0129\x03\x02\x02\x02\u0129b\x03\x02\x02" +
		"\x02\u012A\u0128\x03\x02\x02\x02\u012B\u0130\x05g4\x02\u012C\u0130\x05" +
		"k6\x02\u012D\u0130\x05i5\x02\u012E\u0130\x05m7\x02\u012F\u012B\x03\x02" +
		"\x02\x02\u012F\u012C\x03\x02\x02\x02\u012F\u012D\x03\x02\x02\x02\u012F" +
		"\u012E\x03\x02\x02\x02\u0130\u0131\x03\x02\x02\x02\u0131\u0132\b2\t\x02" +
		"\u0132d\x03\x02\x02\x02\u0133\u0134\v\x02\x02\x02\u0134\u0135\x03\x02" +
		"\x02\x02\u0135\u0136\b3\n\x02\u0136f\x03\x02\x02\x02\u0137\u0139\t\x04" +
		"\x02\x02\u0138\u0137\x03\x02\x02\x02\u0139\u013A\x03\x02\x02\x02\u013A" +
		"\u0138\x03\x02\x02\x02\u013A\u013B\x03\x02\x02\x02\u013Bh\x03\x02\x02" +
		"\x02\u013C\u013D\x071\x02\x02\u013D\u013E\x07,\x02\x02\u013E\u0142\x03" +
		"\x02\x02\x02\u013F\u0141\v\x02\x02\x02\u0140\u013F\x03\x02\x02\x02\u0141" +
		"\u0144\x03\x02\x02\x02\u0142\u0143\x03\x02\x02\x02\u0142\u0140\x03\x02" +
		"\x02\x02\u0143\u0145\x03\x02\x02\x02\u0144\u0142\x03\x02\x02\x02\u0145" +
		"\u0146\x07,\x02\x02\u0146\u0147\x071\x02\x02\u0147j\x03\x02\x02\x02\u0148" +
		"\u0149\x071\x02\x02\u0149\u014A\x071\x02\x02\u014A\u014E\x03\x02\x02\x02" +
		"\u014B\u014D\n\x05\x02\x02\u014C\u014B\x03\x02\x02\x02\u014D\u0150\x03" +
		"\x02\x02\x02\u014E\u014C\x03\x02\x02\x02\u014E\u014F\x03\x02\x02\x02\u014F" +
		"l\x03\x02\x02\x02\u0150\u014E\x03\x02\x02\x02\u0151\u0153\x07^\x02\x02" +
		"\u0152\u0154\x05g4\x02\u0153\u0152\x03\x02\x02\x02\u0153\u0154\x03\x02" +
		"\x02\x02\u0154\u015A\x03\x02\x02\x02\u0155\u0157\x07\x0F\x02\x02\u0156" +
		"\u0155\x03\x02\x02\x02\u0156\u0157\x03\x02\x02\x02\u0157\u0158\x03\x02" +
		"\x02\x02\u0158\u015B\x07\f\x02\x02\u0159\u015B\x07\x0F\x02\x02\u015A\u0156" +
		"\x03\x02\x02\x02\u015A\u0159\x03\x02\x02\x02\u015Bn\x03\x02\x02\x02\u015C" +
		"\u015E\t\x06\x02\x02\u015D\u015F\t\x06\x02\x02\u015E\u015D\x03\x02\x02" +
		"\x02\u015E\u015F\x03\x02\x02\x02\u015F\u0160\x03\x02\x02\x02\u0160\u0162" +
		"\x07z\x02\x02\u0161\u0163\t\x07\x02\x02\u0162\u0161\x03\x02\x02\x02\u0163" +
		"\u0164\x03\x02\x02\x02\u0164\u0162\x03\x02\x02\x02\u0164\u0165\x03\x02" +
		"\x02\x02\u0165\u016E\x03\x02\x02\x02\u0166\u0168\x07a\x02\x02\u0167\u0169" +
		"\t\x07\x02\x02\u0168\u0167\x03\x02\x02\x02\u0169\u016A\x03\x02\x02\x02" +
		"\u016A\u0168\x03\x02\x02\x02\u016A\u016B\x03\x02\x02\x02\u016B\u016D\x03" +
		"\x02\x02\x02\u016C\u0166\x03\x02\x02\x02\u016D\u0170\x03\x02\x02\x02\u016E" +
		"\u016C\x03\x02\x02\x02\u016E\u016F\x03\x02\x02\x02\u016F\u0182\x03\x02" +
		"\x02\x02\u0170\u016E\x03\x02\x02\x02\u0171\u0173\t\x06\x02\x02\u0172\u0171" +
		"\x03\x02\x02\x02\u0173\u0174\x03\x02\x02\x02\u0174\u0172\x03\x02\x02\x02" +
		"\u0174\u0175\x03\x02\x02\x02\u0175\u017E\x03\x02\x02\x02\u0176\u0178\x07" +
		"a\x02\x02\u0177\u0179\t\x06\x02\x02\u0178\u0177\x03\x02\x02\x02\u0179" +
		"\u017A\x03\x02\x02\x02\u017A\u0178\x03\x02\x02\x02\u017A\u017B\x03\x02" +
		"\x02\x02\u017B\u017D\x03\x02\x02\x02\u017C\u0176\x03\x02\x02\x02\u017D" +
		"\u0180\x03\x02\x02\x02\u017E\u017C\x03\x02\x02\x02\u017E\u017F\x03\x02" +
		"\x02\x02\u017F\u0182\x03\x02\x02\x02\u0180\u017E\x03\x02\x02\x02\u0181" +
		"\u015C\x03\x02\x02\x02\u0181\u0172\x03\x02\x02\x02\u0182p\x03\x02\x02" +
		"\x02\u0183\u0187\n\b\x02\x02\u0184\u0185\x07^\x02\x02\u0185\u0187\t\t" +
		"\x02\x02\u0186\u0183\x03\x02\x02\x02\u0186\u0184\x03\x02\x02\x02\u0187" +
		"r\x03\x02\x02\x02\x1D\x02\x9E\xA6\xAA\xAD\xAF\u0111\u0115\u0119\u011F" +
		"\u0128\u012F\u013A\u0142\u014E\u0153\u0156\u015A\u015E\u0164\u016A\u016E" +
		"\u0174\u017A\u017E\u0181\u0186\v\x03\v\x02\x03\f\x03\x03\r\x04\x03\x0E" +
		"\x05\x03\x0F\x06\x03\x10\x07\x03\x11\b\b\x02\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

