// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN = 3;
	public static readonly CLOSE = 4;
	public static readonly FLOAT = 5;
	public static readonly INTEGER = 6;
	public static readonly STRING = 7;
	public static readonly KEYWORD = 8;
	public static readonly OPERATOR = 9;
	public static readonly DOT = 10;
	public static readonly META = 11;
	public static readonly COMMA = 12;
	public static readonly ASSIGN = 13;
	public static readonly COLON = 14;
	public static readonly ID = 15;
	public static readonly NL = 16;
	public static readonly LINE_COMMENT = 17;
	public static readonly WS = 18;
	public static readonly BLOCK_COMMENT = 19;
	public static readonly LINE_JOINING = 20;
	public static readonly UNEXPECTED = 21;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN", "CLOSE", "FLOAT", "INTEGER", "STRING", "KEYWORD", "OPERATOR", 
		"DOT", "META", "COMMA", "ASSIGN", "COLON", "ID", "NL", "LINE_COMMENT", 
		"WS", "BLOCK_COMMENT", "LINE_JOINING", "UNEXPECTED", "Radix", "DigitNumber", 
		"AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "'.'", "'::'", "','", "'='",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN", "CLOSE", "FLOAT", "INTEGER", "STRING", 
		"KEYWORD", "OPERATOR", "DOT", "META", "COMMA", "ASSIGN", "COLON", "ID", 
		"NL", "LINE_COMMENT", "WS", "BLOCK_COMMENT", "LINE_JOINING", "UNEXPECTED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_action(_localctx, actionIndex);
			break;

		case 13:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 5:
			return this.KEYWORD_sempred(_localctx, predIndex);

		case 6:
			return this.OPERATOR_sempred(_localctx, predIndex);
		}
		return true;
	}
	private KEYWORD_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return  this.keywords.includes(this.text) ;
		}
		return true;
	}
	private OPERATOR_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return  this.isOperator() ;
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x17\xCC\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04?\n\x04\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x05\x05E\n\x05\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x07\x06K\n\x06\f\x06\x0E\x06N\v\x06\x03\x06\x03\x06\x03\x07\x06\x07" +
		"S\n\x07\r\x07\x0E\x07T\x03\x07\x03\x07\x03\b\x06\bZ\n\b\r\b\x0E\b[\x03" +
		"\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x03\r\x03" +
		"\r\x05\rk\n\r\x03\r\x03\r\x03\r\x05\rp\n\r\x03\x0E\x03\x0E\x07\x0Et\n" +
		"\x0E\f\x0E\x0E\x0Ew\v\x0E\x03\x0F\x03\x0F\x07\x0F{\n\x0F\f\x0F\x0E\x0F" +
		"~\v\x0F\x06\x0F\x80\n\x0F\r\x0F\x0E\x0F\x81\x03\x0F\x03\x0F\x03\x10\x03" +
		"\x10\x03\x10\x03\x10\x07\x10\x8A\n\x10\f\x10\x0E\x10\x8D\v\x10\x03\x11" +
		"\x06\x11\x90\n\x11\r\x11\x0E\x11\x91\x03\x11\x03\x11\x03\x12\x03\x12\x03" +
		"\x12\x03\x12\x03\x12\x07\x12\x9B\n\x12\f\x12\x0E\x12\x9E\v\x12\x03\x12" +
		"\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x07\x13\xA7\n\x13\f\x13" +
		"\x0E\x13\xAA\v\x13\x03\x13\x05\x13\xAD\n\x13\x03\x13\x03\x13\x05\x13\xB1" +
		"\n\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15" +
		"\x05\x15\xBB\n\x15\x03\x15\x03\x15\x03\x16\x03\x16\x07\x16\xC1\n\x16\f" +
		"\x16\x0E\x16\xC4\v\x16\x03\x17\x03\x17\x07\x17\xC8\n\x17\f\x17\x0E\x17" +
		"\xCB\v\x17\x05T[\x9C\x02\x02\x18\x03\x02\x05\x05\x02\x06\x07\x02\x07\t" +
		"\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02" +
		"\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15" +
		"%\x02\x16\'\x02\x17)\x02\x02+\x02\x02-\x02\x02\x03\x02\x0E\x05\x02**]" +
		"]}}\x05\x02++__\x7F\x7F\x03\x02))\n\x02))^^ddhhppttvvxx\x05\x02C\\aac" +
		"|\x06\x022;C\\aac|\x04\x02\f\f\x0F\x0F\x04\x02\v\v\"\"\x03\x022;\x04\x02" +
		"ZZzz\x04\x022;aa\x05\x022;C\\c|\x02\xDF\x02\x03\x03\x02\x02\x02\x02\x05" +
		"\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03" +
		"\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03" +
		"\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03" +
		"\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03" +
		"\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02" +
		"\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x03/\x03\x02\x02\x02" +
		"\x052\x03\x02\x02\x02\x07>\x03\x02\x02\x02\tD\x03\x02\x02\x02\vF\x03\x02" +
		"\x02\x02\rR\x03\x02\x02\x02\x0FY\x03\x02\x02\x02\x11_\x03\x02\x02\x02" +
		"\x13a\x03\x02\x02\x02\x15d\x03\x02\x02\x02\x17f\x03\x02\x02\x02\x19j\x03" +
		"\x02\x02\x02\x1Bq\x03\x02\x02\x02\x1D\x7F\x03\x02\x02\x02\x1F\x85\x03" +
		"\x02\x02\x02!\x8F\x03\x02\x02\x02#\x95\x03\x02\x02\x02%\xA4\x03\x02\x02" +
		"\x02\'\xB4\x03\x02\x02\x02)\xB8\x03\x02\x02\x02+\xBE\x03\x02\x02\x02-" +
		"\xC5\x03\x02\x02\x02/0\t\x02\x02\x0201\b\x02\x02\x021\x04\x03\x02\x02" +
		"\x0223\t\x03\x02\x0234\b\x03\x03\x024\x06\x03\x02\x02\x0256\x05)\x15\x02" +
		"67\x05-\x17\x0278\x070\x02\x0289\x05-\x17\x029?\x03\x02\x02\x02:;\x05" +
		"+\x16\x02;<\x070\x02\x02<=\x05+\x16\x02=?\x03\x02\x02\x02>5\x03\x02\x02" +
		"\x02>:\x03\x02\x02\x02?\b\x03\x02\x02\x02@A\x05)\x15\x02AB\x05-\x17\x02" +
		"BE\x03\x02\x02\x02CE\x05+\x16\x02D@\x03\x02\x02\x02DC\x03\x02\x02\x02" +
		"E\n\x03\x02\x02\x02FL\x07)\x02\x02GK\n\x04\x02\x02HI\x07^\x02\x02IK\t" +
		"\x05\x02\x02JG\x03\x02\x02\x02JH\x03\x02\x02\x02KN\x03\x02\x02\x02LJ\x03" +
		"\x02\x02\x02LM\x03\x02\x02\x02MO\x03\x02\x02\x02NL\x03\x02\x02\x02OP\x07" +
		")\x02\x02P\f\x03\x02\x02\x02QS\v\x02\x02\x02RQ\x03\x02\x02\x02ST\x03\x02" +
		"\x02\x02TU\x03\x02\x02\x02TR\x03\x02\x02\x02UV\x03\x02\x02\x02VW\x06\x07" +
		"\x02\x02W\x0E\x03\x02\x02\x02XZ\v\x02\x02\x02YX\x03\x02\x02\x02Z[\x03" +
		"\x02\x02\x02[\\\x03\x02\x02\x02[Y\x03\x02\x02\x02\\]\x03\x02\x02\x02]" +
		"^\x06\b\x03\x02^\x10\x03\x02\x02\x02_`\x070\x02\x02`\x12\x03\x02\x02\x02" +
		"ab\x07<\x02\x02bc\x07<\x02\x02c\x14\x03\x02\x02\x02de\x07.\x02\x02e\x16" +
		"\x03\x02\x02\x02fg\x07?\x02\x02g\x18\x03\x02\x02\x02hk\x05\x1D\x0F\x02" +
		"ik\x05!\x11\x02jh\x03\x02\x02\x02ji\x03\x02\x02\x02jk\x03\x02\x02\x02" +
		"kl\x03\x02\x02\x02lo\x07<\x02\x02mp\x05\x1D\x0F\x02np\x05!\x11\x02om\x03" +
		"\x02\x02\x02on\x03\x02\x02\x02op\x03\x02\x02\x02p\x1A\x03\x02\x02\x02" +
		"qu\t\x06\x02\x02rt\t\x07\x02\x02sr\x03\x02\x02\x02tw\x03\x02\x02\x02u" +
		"s\x03\x02\x02\x02uv\x03\x02\x02\x02v\x1C\x03\x02\x02\x02wu\x03\x02\x02" +
		"\x02x|\t\b\x02\x02y{\x05!\x11\x02zy\x03\x02\x02\x02{~\x03\x02\x02\x02" +
		"|z\x03\x02\x02\x02|}\x03\x02\x02\x02}\x80\x03\x02\x02\x02~|\x03\x02\x02" +
		"\x02\x7Fx\x03\x02\x02\x02\x80\x81\x03\x02\x02\x02\x81\x7F\x03\x02\x02" +
		"\x02\x81\x82\x03\x02\x02\x02\x82\x83\x03\x02\x02\x02\x83\x84\b\x0F\x04" +
		"\x02\x84\x1E\x03\x02\x02\x02\x85\x86\x07/\x02\x02\x86\x87\x07/\x02\x02" +
		"\x87\x8B\x03\x02\x02\x02\x88\x8A\n\b\x02\x02\x89\x88\x03\x02\x02\x02\x8A" +
		"\x8D\x03\x02\x02\x02\x8B\x89\x03\x02\x02\x02\x8B\x8C\x03\x02\x02\x02\x8C" +
		" \x03\x02\x02\x02\x8D\x8B\x03\x02\x02\x02\x8E\x90\t\t\x02\x02\x8F\x8E" +
		"\x03\x02\x02\x02\x90\x91\x03\x02\x02\x02\x91\x8F\x03\x02\x02\x02\x91\x92" +
		"\x03\x02\x02\x02\x92\x93\x03\x02\x02\x02\x93\x94\b\x11\x05\x02\x94\"\x03" +
		"\x02\x02\x02\x95\x96\x071\x02\x02\x96\x97\x07,\x02\x02\x97\x9C\x03\x02" +
		"\x02\x02\x98\x9B\x05#\x12\x02\x99\x9B\v\x02\x02\x02\x9A\x98\x03\x02\x02" +
		"\x02\x9A\x99\x03\x02\x02\x02\x9B\x9E\x03\x02\x02\x02\x9C\x9D\x03\x02\x02" +
		"\x02\x9C\x9A\x03\x02\x02\x02\x9D\x9F\x03\x02\x02\x02\x9E\x9C\x03\x02\x02" +
		"\x02\x9F\xA0\x07,\x02\x02\xA0\xA1\x071\x02\x02\xA1\xA2\x03\x02\x02\x02" +
		"\xA2\xA3\b\x12\x06\x02\xA3$\x03\x02\x02\x02\xA4\xA8\x07^\x02\x02\xA5\xA7" +
		"\t\t\x02\x02\xA6\xA5\x03\x02\x02\x02\xA7\xAA\x03\x02\x02\x02\xA8\xA6\x03" +
		"\x02\x02\x02\xA8\xA9\x03\x02\x02\x02\xA9\xB0\x03\x02\x02\x02\xAA\xA8\x03" +
		"\x02\x02\x02\xAB\xAD\x07\x0F\x02\x02\xAC\xAB\x03\x02\x02\x02\xAC\xAD\x03" +
		"\x02\x02\x02\xAD\xAE\x03\x02\x02\x02\xAE\xB1\x07\f\x02\x02\xAF\xB1\x04" +
		"\x0E\x0F\x02\xB0\xAC\x03\x02\x02\x02\xB0\xAF\x03\x02\x02\x02\xB1\xB2\x03" +
		"\x02\x02\x02\xB2\xB3\b\x13\x07\x02\xB3&\x03\x02\x02\x02\xB4\xB5\v\x02" +
		"\x02\x02\xB5\xB6\x03\x02\x02\x02\xB6\xB7\b\x14\b\x02\xB7(\x03\x02\x02" +
		"\x02\xB8\xBA\t\n\x02\x02\xB9\xBB\t\n\x02\x02\xBA\xB9\x03\x02\x02\x02\xBA" +
		"\xBB\x03\x02\x02\x02\xBB\xBC\x03\x02\x02\x02\xBC\xBD\t\v\x02\x02\xBD*" +
		"\x03\x02\x02\x02\xBE\xC2\t\n\x02\x02\xBF\xC1\t\f\x02\x02\xC0\xBF\x03\x02" +
		"\x02\x02\xC1\xC4\x03\x02\x02\x02\xC2\xC0\x03\x02\x02\x02\xC2\xC3\x03\x02" +
		"\x02\x02\xC3,\x03\x02\x02\x02\xC4\xC2\x03\x02\x02\x02\xC5\xC9\t\r\x02" +
		"\x02\xC6\xC8\t\x07\x02\x02\xC7\xC6\x03\x02\x02\x02\xC8\xCB\x03\x02\x02" +
		"\x02\xC9\xC7\x03\x02\x02\x02\xC9\xCA\x03\x02\x02\x02\xCA.\x03\x02\x02" +
		"\x02\xCB\xC9\x03\x02\x02\x02\x1A\x02>DJLT[jou|\x81\x8B\x91\x9A\x9C\xA8" +
		"\xAC\xB0\xBA\xC0\xC2\xC7\xC9\t\x03\x02\x02\x03\x03\x03\x03\x0F\x04\x02" +
		"\x05\x02\x02\x06\x02\b\x02\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

