// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN_BRACKET = 3;
	public static readonly CLOSE_BRACKET = 4;
	public static readonly OPEN_PAREN = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_BRACE = 7;
	public static readonly CLOSE_BRACE = 8;
	public static readonly ACTUAL = 9;
	public static readonly BREAK = 10;
	public static readonly CONTINUE = 11;
	public static readonly DO = 12;
	public static readonly ELSE = 13;
	public static readonly EXPECT = 14;
	public static readonly EXPORT = 15;
	public static readonly FOR = 16;
	public static readonly IF = 17;
	public static readonly IMPORT = 18;
	public static readonly RETURN = 19;
	public static readonly WHILE = 20;
	public static readonly AND = 21;
	public static readonly AS = 22;
	public static readonly IS = 23;
	public static readonly OR = 24;
	public static readonly ASSIGN = 25;
	public static readonly COMMA = 26;
	public static readonly COLON = 27;
	public static readonly QUESTION = 28;
	public static readonly DOT = 29;
	public static readonly LAMBDA = 30;
	public static readonly FLOAT_LITERAL = 31;
	public static readonly INTEGER_LITERAL = 32;
	public static readonly STRING_LITERAL = 33;
	public static readonly PREPROCESSOR = 34;
	public static readonly ID = 35;
	public static readonly LESS = 36;
	public static readonly GREAT = 37;
	public static readonly OP = 38;
	public static readonly NL = 39;
	public static readonly LINE_COMMENT = 40;
	public static readonly WS = 41;
	public static readonly BLOCK_COMMENT = 42;
	public static readonly LINE_JOINING = 43;
	public static readonly UNEXPECTED = 44;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", "DO", "ELSE", "EXPECT", 
		"EXPORT", "FOR", "IF", "IMPORT", "RETURN", "WHILE", "AND", "AS", "IS", 
		"OR", "ASSIGN", "COMMA", "COLON", "QUESTION", "DOT", "LAMBDA", "FLOAT_LITERAL", 
		"INTEGER_LITERAL", "STRING_LITERAL", "PREPROCESSOR", "ID", "LESS", "GREAT", 
		"OP", "NL", "LINE_COMMENT", "WS", "BLOCK_COMMENT", "LINE_JOINING", "UNEXPECTED", 
		"Radix", "DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'actual'", "'break'", "'continue'", "'do'", "'else'", "'expect'", "'export'", 
		"'for'", "'if'", "'import'", "'return'", "'while'", "'and'", "'as'", "'is'", 
		"'or'", "'='", "','", "':'", undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "'<'", "'>'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", 
		"DO", "ELSE", "EXPECT", "EXPORT", "FOR", "IF", "IMPORT", "RETURN", "WHILE", 
		"AND", "AS", "IS", "OR", "ASSIGN", "COMMA", "COLON", "QUESTION", "DOT", 
		"LAMBDA", "FLOAT_LITERAL", "INTEGER_LITERAL", "STRING_LITERAL", "PREPROCESSOR", 
		"ID", "LESS", "GREAT", "OP", "NL", "LINE_COMMENT", "WS", "BLOCK_COMMENT", 
		"LINE_JOINING", "UNEXPECTED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 2:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 3:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 4:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 5:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 36:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02.\u0191\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03" +
		"\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b" +
		"\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
		"\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10" +
		"\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12" +
		"\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15" +
		"\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18" +
		"\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x07\x1B\xCC\n\x1B\f\x1B" +
		"\x0E\x1B\xCF\v\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x07\x1C\xD5\n\x1C\f" +
		"\x1C\x0E\x1C\xD8\v\x1C\x03\x1C\x03\x1C\x03\x1C\x07\x1C\xDD\n\x1C\f\x1C" +
		"\x0E\x1C\xE0\v\x1C\x03\x1D\x03\x1D\x07\x1D\xE4\n\x1D\f\x1D\x0E\x1D\xE7" +
		"\v\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07\x1D\xEE\n\x1D\f\x1D" +
		"\x0E\x1D\xF1\v\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03" +
		"\x1E\x03\x1E\x03\x1E\x05\x1E\xFC\n\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F" +
		"\x05\x1F\u0102\n\x1F\x03 \x03 \x03 \x03 \x07 \u0108\n \f \x0E \u010B\v" +
		" \x03 \x03 \x03!\x03!\x03!\x03!\x03!\x03!\x07!\u0115\n!\f!\x0E!\u0118" +
		"\v!\x03!\x03!\x07!\u011C\n!\f!\x0E!\u011F\v!\x03!\x03!\x03\"\x03\"\x07" +
		"\"\u0125\n\"\f\"\x0E\"\u0128\v\"\x03#\x03#\x03$\x03$\x03%\x03%\x03%\x03" +
		"%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x05%\u013C\n%\x03" +
		"&\x03&\x07&\u0140\n&\f&\x0E&\u0143\v&\x06&\u0145\n&\r&\x0E&\u0146\x03" +
		"&\x03&\x03\'\x03\'\x03\'\x03\'\x07\'\u014F\n\'\f\'\x0E\'\u0152\v\'\x03" +
		"(\x06(\u0155\n(\r(\x0E(\u0156\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x07)" +
		"\u0160\n)\f)\x0E)\u0163\v)\x03)\x03)\x03)\x03)\x03)\x03*\x03*\x07*\u016C" +
		"\n*\f*\x0E*\u016F\v*\x03*\x05*\u0172\n*\x03*\x03*\x05*\u0176\n*\x03*\x03" +
		"*\x03+\x03+\x03+\x03+\x03,\x03,\x05,\u0180\n,\x03,\x03,\x03-\x03-\x07" +
		"-\u0186\n-\f-\x0E-\u0189\v-\x03.\x03.\x07.\u018D\n.\f.\x0E.\u0190\v.\x05" +
		"\u0116\u011D\u0161\x02\x02/\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02" +
		"\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F" +
		"\x19\x02\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02" +
		"\x16\'\x02\x17)\x02\x18+\x02\x19-\x02\x1A/\x02\x1B1\x02\x1C3\x02\x1D5" +
		"\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?\x02#A\x02$C\x02%E\x02&G\x02\'I\x02" +
		"(K\x02)M\x02*O\x02+Q\x02,S\x02-U\x02.W\x02\x02Y\x02\x02[\x02\x02\x03\x02" +
		"\r\x03\x02))\n\x02))^^ddhhppttvvxx\x05\x02C\\aac|\x06\x022;C\\aac|\x05" +
		"\x02##\'\',`\x04\x02\f\f\x0F\x0F\x04\x02\v\v\"\"\x03\x022;\x04\x02ZZz" +
		"z\x04\x022;aa\x05\x022;C\\c|\x02\u01B2\x02\x03\x03\x02\x02\x02\x02\x05" +
		"\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03" +
		"\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03" +
		"\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03" +
		"\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03" +
		"\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02" +
		"\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02" +
		"\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03" +
		"\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02" +
		"\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02" +
		"?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02" +
		"\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02" +
		"\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03" +
		"\x02\x02\x02\x02U\x03\x02\x02\x02\x03]\x03\x02\x02\x02\x05`\x03\x02\x02" +
		"\x02\x07c\x03\x02\x02\x02\tf\x03\x02\x02\x02\vi\x03\x02\x02\x02\rl\x03" +
		"\x02\x02\x02\x0Fo\x03\x02\x02\x02\x11v\x03\x02\x02\x02\x13|\x03\x02\x02" +
		"\x02\x15\x85\x03\x02\x02\x02\x17\x88\x03\x02\x02\x02\x19\x8D\x03\x02\x02" +
		"\x02\x1B\x94\x03\x02\x02\x02\x1D\x9B\x03\x02\x02\x02\x1F\x9F\x03\x02\x02" +
		"\x02!\xA2\x03\x02\x02\x02#\xA9\x03\x02\x02\x02%\xB0\x03\x02\x02\x02\'" +
		"\xB6\x03\x02\x02\x02)\xBA\x03\x02\x02\x02+\xBD\x03\x02\x02\x02-\xC0\x03" +
		"\x02\x02\x02/\xC3\x03\x02\x02\x021\xC5\x03\x02\x02\x023\xC7\x03\x02\x02" +
		"\x025\xCD\x03\x02\x02\x027\xD6\x03\x02\x02\x029\xE5\x03\x02\x02\x02;\xFB" +
		"\x03\x02\x02\x02=\u0101\x03\x02\x02\x02?\u0103\x03\x02\x02\x02A\u010E" +
		"\x03\x02\x02\x02C\u0122\x03\x02\x02\x02E\u0129\x03\x02\x02\x02G\u012B" +
		"\x03\x02\x02\x02I\u013B\x03\x02\x02\x02K\u0144\x03\x02\x02\x02M\u014A" +
		"\x03\x02\x02\x02O\u0154\x03\x02\x02\x02Q\u015A\x03\x02\x02\x02S\u0169" +
		"\x03\x02\x02\x02U\u0179\x03\x02\x02\x02W\u017D\x03\x02\x02\x02Y\u0183" +
		"\x03\x02\x02\x02[\u018A\x03\x02\x02\x02]^\x07]\x02\x02^_\b\x02\x02\x02" +
		"_\x04\x03\x02\x02\x02`a\x07_\x02\x02ab\b\x03\x03\x02b\x06\x03\x02\x02" +
		"\x02cd\x07*\x02\x02de\b\x04\x04\x02e\b\x03\x02\x02\x02fg\x07+\x02\x02" +
		"gh\b\x05\x05\x02h\n\x03\x02\x02\x02ij\x07}\x02\x02jk\b\x06\x06\x02k\f" +
		"\x03\x02\x02\x02lm\x07\x7F\x02\x02mn\b\x07\x07\x02n\x0E\x03\x02\x02\x02" +
		"op\x07c\x02\x02pq\x07e\x02\x02qr\x07v\x02\x02rs\x07w\x02\x02st\x07c\x02" +
		"\x02tu\x07n\x02\x02u\x10\x03\x02\x02\x02vw\x07d\x02\x02wx\x07t\x02\x02" +
		"xy\x07g\x02\x02yz\x07c\x02\x02z{\x07m\x02\x02{\x12\x03\x02\x02\x02|}\x07" +
		"e\x02\x02}~\x07q\x02\x02~\x7F\x07p\x02\x02\x7F\x80\x07v\x02\x02\x80\x81" +
		"\x07k\x02\x02\x81\x82\x07p\x02\x02\x82\x83\x07w\x02\x02\x83\x84\x07g\x02" +
		"\x02\x84\x14\x03\x02\x02\x02\x85\x86\x07f\x02\x02\x86\x87\x07q\x02\x02" +
		"\x87\x16\x03\x02\x02\x02\x88\x89\x07g\x02\x02\x89\x8A\x07n\x02\x02\x8A" +
		"\x8B\x07u\x02\x02\x8B\x8C\x07g\x02\x02\x8C\x18\x03\x02\x02\x02\x8D\x8E" +
		"\x07g\x02\x02\x8E\x8F\x07z\x02\x02\x8F\x90\x07r\x02\x02\x90\x91\x07g\x02" +
		"\x02\x91\x92\x07e\x02\x02\x92\x93\x07v\x02\x02\x93\x1A\x03\x02\x02\x02" +
		"\x94\x95\x07g\x02\x02\x95\x96\x07z\x02\x02\x96\x97\x07r\x02\x02\x97\x98" +
		"\x07q\x02\x02\x98\x99\x07t\x02\x02\x99\x9A\x07v\x02\x02\x9A\x1C\x03\x02" +
		"\x02\x02\x9B\x9C\x07h\x02\x02\x9C\x9D\x07q\x02\x02\x9D\x9E\x07t\x02\x02" +
		"\x9E\x1E\x03\x02\x02\x02\x9F\xA0\x07k\x02\x02\xA0\xA1\x07h\x02\x02\xA1" +
		" \x03\x02\x02\x02\xA2\xA3\x07k\x02\x02\xA3\xA4\x07o\x02\x02\xA4\xA5\x07" +
		"r\x02\x02\xA5\xA6\x07q\x02\x02\xA6\xA7\x07t\x02\x02\xA7\xA8\x07v\x02\x02" +
		"\xA8\"\x03\x02\x02\x02\xA9\xAA\x07t\x02\x02\xAA\xAB\x07g\x02\x02\xAB\xAC" +
		"\x07v\x02\x02\xAC\xAD\x07w\x02\x02\xAD\xAE\x07t\x02\x02\xAE\xAF\x07p\x02" +
		"\x02\xAF$\x03\x02\x02\x02\xB0\xB1\x07y\x02\x02\xB1\xB2\x07j\x02\x02\xB2" +
		"\xB3\x07k\x02\x02\xB3\xB4\x07n\x02\x02\xB4\xB5\x07g\x02\x02\xB5&\x03\x02" +
		"\x02\x02\xB6\xB7\x07c\x02\x02\xB7\xB8\x07p\x02\x02\xB8\xB9\x07f\x02\x02" +
		"\xB9(\x03\x02\x02\x02\xBA\xBB\x07c\x02\x02\xBB\xBC\x07u\x02\x02\xBC*\x03" +
		"\x02\x02\x02\xBD\xBE\x07k\x02\x02\xBE\xBF\x07u\x02\x02\xBF,\x03\x02\x02" +
		"\x02\xC0\xC1\x07q\x02\x02\xC1\xC2\x07t\x02\x02\xC2.\x03\x02\x02\x02\xC3" +
		"\xC4\x07?\x02\x02\xC40\x03\x02\x02\x02\xC5\xC6\x07.\x02\x02\xC62\x03\x02" +
		"\x02\x02\xC7\xC8\x07<\x02\x02\xC84\x03\x02\x02\x02\xC9\xCC\x05K&\x02\xCA" +
		"\xCC\x05O(\x02\xCB\xC9\x03\x02\x02\x02\xCB\xCA\x03\x02\x02\x02\xCC\xCF" +
		"\x03\x02\x02\x02\xCD\xCB\x03\x02\x02\x02\xCD\xCE\x03\x02\x02\x02\xCE\xD0" +
		"\x03\x02\x02\x02\xCF\xCD\x03\x02\x02\x02\xD0\xD1\x07A\x02\x02\xD16\x03" +
		"\x02\x02\x02\xD2\xD5\x05K&\x02\xD3\xD5\x05O(\x02\xD4\xD2\x03\x02\x02\x02" +
		"\xD4\xD3\x03\x02\x02\x02\xD5\xD8\x03\x02\x02\x02\xD6\xD4\x03\x02\x02\x02" +
		"\xD6\xD7\x03\x02\x02\x02\xD7\xD9\x03\x02\x02\x02\xD8\xD6\x03\x02\x02\x02" +
		"\xD9\xDE\x070\x02\x02\xDA\xDD\x05K&\x02\xDB\xDD\x05O(\x02\xDC\xDA\x03" +
		"\x02\x02\x02\xDC\xDB\x03\x02\x02\x02\xDD\xE0\x03\x02\x02\x02\xDE\xDC\x03" +
		"\x02\x02\x02\xDE\xDF\x03\x02\x02\x02\xDF8\x03\x02\x02\x02\xE0\xDE\x03" +
		"\x02\x02\x02\xE1\xE4\x05K&\x02\xE2\xE4\x05O(\x02\xE3\xE1\x03\x02\x02\x02" +
		"\xE3\xE2\x03\x02\x02\x02\xE4\xE7\x03\x02\x02\x02\xE5\xE3\x03\x02\x02\x02" +
		"\xE5\xE6\x03\x02\x02\x02\xE6\xE8\x03\x02\x02\x02\xE7\xE5\x03\x02\x02\x02" +
		"\xE8\xE9\x07?\x02\x02\xE9\xEA\x07@\x02\x02\xEA\xEF\x03\x02\x02\x02\xEB" +
		"\xEE\x05K&\x02\xEC\xEE\x05O(\x02\xED\xEB\x03\x02\x02\x02\xED\xEC\x03\x02" +
		"\x02\x02\xEE\xF1\x03\x02\x02\x02\xEF\xED\x03\x02\x02\x02\xEF\xF0\x03\x02" +
		"\x02\x02\xF0:\x03\x02\x02\x02\xF1\xEF\x03\x02\x02\x02\xF2\xF3\x05W,\x02" +
		"\xF3\xF4\x05[.\x02\xF4\xF5\x070\x02\x02\xF5\xF6\x05[.\x02\xF6\xFC\x03" +
		"\x02\x02\x02\xF7\xF8\x05Y-\x02\xF8\xF9\x070\x02\x02\xF9\xFA\x05Y-\x02" +
		"\xFA\xFC\x03\x02\x02\x02\xFB\xF2\x03\x02\x02\x02\xFB\xF7\x03\x02\x02\x02" +
		"\xFC<\x03\x02\x02\x02\xFD\xFE\x05W,\x02\xFE\xFF\x05[.\x02\xFF\u0102\x03" +
		"\x02\x02\x02\u0100\u0102\x05Y-\x02\u0101\xFD\x03\x02\x02\x02\u0101\u0100" +
		"\x03\x02\x02\x02\u0102>\x03\x02\x02\x02\u0103\u0109\x07)\x02\x02\u0104" +
		"\u0108\n\x02\x02\x02\u0105\u0106\x07^\x02\x02\u0106\u0108\t\x03\x02\x02" +
		"\u0107\u0104\x03\x02\x02\x02\u0107\u0105\x03\x02\x02\x02\u0108\u010B\x03" +
		"\x02\x02\x02\u0109\u0107\x03\x02\x02\x02\u0109\u010A\x03\x02\x02\x02\u010A" +
		"\u010C\x03\x02\x02\x02\u010B\u0109\x03\x02\x02\x02\u010C\u010D\x07)\x02" +
		"\x02\u010D@\x03\x02\x02\x02\u010E\u010F\x07%\x02\x02\u010F\u0110\x07}" +
		"\x02\x02\u0110\u011D\x03\x02\x02\x02\u0111\u011C\x05A!\x02\u0112\u0116" +
		"\x07}\x02\x02\u0113\u0115\v\x02\x02\x02\u0114\u0113\x03\x02\x02\x02\u0115" +
		"\u0118\x03\x02\x02\x02\u0116\u0117\x03\x02\x02\x02\u0116\u0114\x03\x02" +
		"\x02\x02\u0117\u0119\x03\x02\x02\x02\u0118\u0116\x03\x02\x02\x02\u0119" +
		"\u011C\x07\x7F\x02\x02\u011A\u011C\v\x02\x02\x02\u011B\u0111\x03\x02\x02" +
		"\x02\u011B\u0112\x03\x02\x02\x02\u011B\u011A\x03\x02\x02\x02\u011C\u011F" +
		"\x03\x02\x02\x02\u011D\u011E\x03\x02\x02\x02\u011D\u011B\x03\x02\x02\x02" +
		"\u011E\u0120\x03\x02\x02\x02\u011F\u011D\x03\x02\x02\x02\u0120\u0121\x07" +
		"\x7F\x02\x02\u0121B\x03\x02\x02\x02\u0122\u0126\t\x04\x02\x02\u0123\u0125" +
		"\t\x05\x02\x02\u0124\u0123\x03\x02\x02\x02\u0125\u0128\x03\x02\x02\x02" +
		"\u0126\u0124\x03\x02\x02\x02\u0126\u0127\x03\x02\x02\x02\u0127D\x03\x02" +
		"\x02\x02\u0128\u0126\x03\x02\x02\x02\u0129\u012A\x07>\x02\x02\u012AF\x03" +
		"\x02\x02\x02\u012B\u012C\x07@\x02\x02\u012CH\x03\x02\x02\x02\u012D\u013C" +
		"\t\x06\x02\x02\u012E\u012F\x070\x02\x02\u012F\u013C\x070\x02\x02\u0130" +
		"\u0131\x070\x02\x02\u0131\u0132\x070\x02\x02\u0132\u013C\x070\x02\x02" +
		"\u0133\u0134\x07>\x02\x02\u0134\u013C\x07?\x02\x02\u0135\u0136\x07@\x02" +
		"\x02\u0136\u013C\x07?\x02\x02\u0137\u0138\x07?\x02\x02\u0138\u013C\x07" +
		"?\x02\x02\u0139\u013A\x07#\x02\x02\u013A\u013C\x07?\x02\x02\u013B\u012D" +
		"\x03\x02\x02\x02\u013B\u012E\x03\x02\x02\x02\u013B\u0130\x03\x02\x02\x02" +
		"\u013B\u0133\x03\x02\x02\x02\u013B\u0135\x03\x02\x02\x02\u013B\u0137\x03" +
		"\x02\x02\x02\u013B\u0139\x03\x02\x02\x02\u013CJ\x03\x02\x02\x02\u013D" +
		"\u0141\t\x07\x02\x02\u013E\u0140\x05O(\x02\u013F\u013E\x03\x02\x02\x02" +
		"\u0140\u0143\x03\x02\x02\x02\u0141\u013F\x03\x02\x02\x02\u0141\u0142\x03" +
		"\x02\x02\x02\u0142\u0145\x03\x02\x02\x02\u0143\u0141\x03\x02\x02\x02\u0144" +
		"\u013D\x03\x02\x02\x02\u0145\u0146\x03\x02\x02\x02\u0146\u0144\x03\x02" +
		"\x02\x02\u0146\u0147\x03\x02\x02\x02\u0147\u0148\x03\x02\x02\x02\u0148" +
		"\u0149\b&\b\x02\u0149L\x03\x02\x02\x02\u014A\u014B\x07/\x02\x02\u014B" +
		"\u014C\x07/\x02\x02\u014C\u0150\x03\x02\x02\x02\u014D\u014F\n\x07\x02" +
		"\x02\u014E\u014D\x03\x02\x02\x02\u014F\u0152\x03\x02\x02\x02\u0150\u014E" +
		"\x03\x02\x02\x02\u0150\u0151\x03\x02\x02\x02\u0151N\x03\x02\x02\x02\u0152" +
		"\u0150\x03\x02\x02\x02\u0153\u0155\t\b\x02\x02\u0154\u0153\x03\x02\x02" +
		"\x02\u0155\u0156\x03\x02\x02\x02\u0156\u0154\x03\x02\x02\x02\u0156\u0157" +
		"\x03\x02\x02\x02\u0157\u0158\x03\x02\x02\x02\u0158\u0159\b(\t\x02\u0159" +
		"P\x03\x02\x02\x02\u015A\u015B\x071\x02\x02\u015B\u015C\x07,\x02\x02\u015C" +
		"\u0161\x03\x02\x02\x02\u015D\u0160\x05Q)\x02\u015E\u0160\v\x02\x02\x02" +
		"\u015F\u015D\x03\x02\x02\x02\u015F\u015E\x03\x02\x02\x02\u0160\u0163\x03" +
		"\x02\x02\x02\u0161\u0162\x03\x02\x02\x02\u0161\u015F\x03\x02\x02\x02\u0162" +
		"\u0164\x03\x02\x02\x02\u0163\u0161\x03\x02\x02\x02\u0164\u0165\x07,\x02" +
		"\x02\u0165\u0166\x071\x02\x02\u0166\u0167\x03\x02\x02\x02\u0167\u0168" +
		"\b)\n\x02\u0168R\x03\x02\x02\x02\u0169\u016D\x07^\x02\x02\u016A\u016C" +
		"\t\b\x02\x02\u016B\u016A\x03\x02\x02\x02\u016C\u016F\x03\x02\x02\x02\u016D" +
		"\u016B\x03\x02\x02\x02\u016D\u016E\x03\x02\x02\x02\u016E\u0175\x03\x02" +
		"\x02\x02\u016F\u016D\x03\x02\x02\x02\u0170\u0172\x07\x0F\x02\x02\u0171" +
		"\u0170\x03\x02\x02\x02\u0171\u0172\x03\x02\x02\x02\u0172\u0173\x03\x02" +
		"\x02\x02\u0173\u0176\x07\f\x02\x02\u0174\u0176\x04\x0E\x0F\x02\u0175\u0171" +
		"\x03\x02\x02\x02\u0175\u0174\x03\x02\x02\x02\u0176\u0177\x03\x02\x02\x02" +
		"\u0177\u0178\b*\v\x02\u0178T\x03\x02\x02\x02\u0179\u017A\v\x02\x02\x02" +
		"\u017A\u017B\x03\x02\x02\x02\u017B\u017C\b+\f\x02\u017CV\x03\x02\x02\x02" +
		"\u017D\u017F\t\t\x02\x02\u017E\u0180\t\t\x02\x02\u017F\u017E\x03\x02\x02" +
		"\x02\u017F\u0180\x03\x02\x02\x02\u0180\u0181\x03\x02\x02\x02\u0181\u0182" +
		"\t\n\x02\x02\u0182X\x03\x02\x02\x02\u0183\u0187\t\t\x02\x02\u0184\u0186" +
		"\t\v\x02\x02\u0185\u0184\x03\x02\x02\x02\u0186\u0189\x03\x02\x02\x02\u0187" +
		"\u0185\x03\x02\x02\x02\u0187\u0188\x03\x02\x02\x02\u0188Z\x03\x02\x02" +
		"\x02\u0189\u0187\x03\x02\x02\x02\u018A\u018E\t\f\x02\x02\u018B\u018D\t" +
		"\x05\x02\x02\u018C\u018B\x03\x02\x02\x02\u018D\u0190\x03\x02\x02\x02\u018E" +
		"\u018C\x03\x02\x02\x02\u018E\u018F\x03\x02\x02\x02\u018F\\\x03\x02\x02" +
		"\x02\u0190\u018E\x03\x02\x02\x02$\x02\xCB\xCD\xD4\xD6\xDC\xDE\xE3\xE5" +
		"\xED\xEF\xFB\u0101\u0107\u0109\u0116\u011B\u011D\u0126\u013B\u0141\u0146" +
		"\u0150\u0156\u015F\u0161\u016D\u0171\u0175\u017F\u0185\u0187\u018C\u018E" +
		"\r\x03\x02\x02\x03\x03\x03\x03\x04\x04\x03\x05\x05\x03\x06\x06\x03\x07" +
		"\x07\x03&\b\x02\x05\x02\x02\x06\x02\b\x02\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

