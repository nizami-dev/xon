// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN_BRACKET = 3;
	public static readonly CLOSE_BRACKET = 4;
	public static readonly OPEN_PAREN = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_BRACE = 7;
	public static readonly CLOSE_BRACE = 8;
	public static readonly ACTUAL = 9;
	public static readonly BREAK = 10;
	public static readonly CONTINUE = 11;
	public static readonly DO = 12;
	public static readonly ELSE = 13;
	public static readonly EXPECT = 14;
	public static readonly EXPORT = 15;
	public static readonly FOR = 16;
	public static readonly IF = 17;
	public static readonly IMPORT = 18;
	public static readonly RETURN = 19;
	public static readonly WHILE = 20;
	public static readonly ASSIGN = 21;
	public static readonly COLON = 22;
	public static readonly COMMA = 23;
	public static readonly DOT = 24;
	public static readonly GENERIC_LEFT = 25;
	public static readonly GENERIC_RIGHT = 26;
	public static readonly HASH = 27;
	public static readonly QUESTION = 28;
	public static readonly FLOAT_LITERAL = 29;
	public static readonly INTEGER_LITERAL = 30;
	public static readonly REGEX_LITERAL = 31;
	public static readonly STRING_LITERAL = 32;
	public static readonly PREPROCESSOR = 33;
	public static readonly ID = 34;
	public static readonly OPERATOR = 35;
	public static readonly NL = 36;
	public static readonly WS = 37;
	public static readonly BLOCK_COMMENT = 38;
	public static readonly LINE_COMMENT = 39;
	public static readonly UNEXPECTED = 40;
	public static readonly LINE_JOINING = 41;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", "DO", "ELSE", "EXPECT", 
		"EXPORT", "FOR", "IF", "IMPORT", "RETURN", "WHILE", "ASSIGN", "COLON", 
		"COMMA", "DOT", "GENERIC_LEFT", "GENERIC_RIGHT", "HASH", "QUESTION", "FLOAT_LITERAL", 
		"INTEGER_LITERAL", "REGEX_LITERAL", "STRING_LITERAL", "PREPROCESSOR", 
		"ID", "OPERATOR", "NL", "WS", "BLOCK_COMMENT", "LINE_COMMENT", "UNEXPECTED", 
		"LINE_JOINING", "Radix", "DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'actual'", "'break'", "'continue'", "'do'", "'else'", "'expect'", "'export'", 
		"'for'", "'if'", "'import'", "'return'", "'while'", "'='", "':'", "','", 
		"'.'", "'<|'", "'|>'", "'#'", "'?'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", 
		"DO", "ELSE", "EXPECT", "EXPORT", "FOR", "IF", "IMPORT", "RETURN", "WHILE", 
		"ASSIGN", "COLON", "COMMA", "DOT", "GENERIC_LEFT", "GENERIC_RIGHT", "HASH", 
		"QUESTION", "FLOAT_LITERAL", "INTEGER_LITERAL", "REGEX_LITERAL", "STRING_LITERAL", 
		"PREPROCESSOR", "ID", "OPERATOR", "NL", "WS", "BLOCK_COMMENT", "LINE_COMMENT", 
		"UNEXPECTED", "LINE_JOINING",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 2:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 3:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 4:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 5:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 33:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 33:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02+\u0164\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03" +
		"\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t" +
		"\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03" +
		"\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12" +
		"\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18" +
		"\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B" +
		"\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C" +
		"\x05\x1C\xCC\n\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\xD2\n\x1D\x03" +
		"\x1E\x03\x1E\x03\x1E\x03\x1E\x07\x1E\xD8\n\x1E\f\x1E\x0E\x1E\xDB\v\x1E" +
		"\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x07\x1F\xE3\n\x1F\f\x1F" +
		"\x0E\x1F\xE6\v\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x03 \x07 \xEE\n \f " +
		"\x0E \xF1\v \x03 \x03 \x03!\x03!\x07!\xF7\n!\f!\x0E!\xFA\v!\x03\"\x03" +
		"\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03" +
		"\"\x05\"\u010A\n\"\x03#\x03#\x03#\x05#\u010F\n#\x03#\x03#\x05#\u0113\n" +
		"#\x03#\x05#\u0116\n#\x05#\u0118\n#\x03#\x03#\x03$\x06$\u011D\n$\r$\x0E" +
		"$\u011E\x03$\x03$\x03%\x03%\x03%\x03%\x03%\x07%\u0128\n%\f%\x0E%\u012B" +
		"\v%\x03%\x03%\x03%\x03%\x03%\x03&\x03&\x03&\x03&\x07&\u0136\n&\f&\x0E" +
		"&\u0139\v&\x03&\x03&\x03\'\x03\'\x03\'\x03\'\x03(\x03(\x07(\u0143\n(\f" +
		"(\x0E(\u0146\v(\x03(\x05(\u0149\n(\x03(\x03(\x05(\u014D\n(\x03(\x03(\x03" +
		")\x03)\x05)\u0153\n)\x03)\x03)\x03*\x03*\x07*\u0159\n*\f*\x0E*\u015C\v" +
		"*\x03+\x03+\x07+\u0160\n+\f+\x0E+\u0163\v+\x04\xEF\u0129\x02\x02,\x03" +
		"\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11" +
		"\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02" +
		"\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19" +
		"-\x02\x1A/\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02" +
		"\"?\x02#A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+Q\x02\x02S\x02" +
		"\x02U\x02\x02\x03\x02\x0F\x03\x02bb\x04\x02^^bb\x03\x02))\n\x02))^^dd" +
		"hhppttvvxx\x05\x02C\\aac|\x06\x022;C\\aac|\x05\x02##\'\',`\x04\x02\v\v" +
		"\"\"\x04\x02\f\f\x0F\x0F\x03\x022;\x04\x02ZZzz\x04\x022;aa\x05\x022;C" +
		"\\c|\x02\u017C\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07" +
		"\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03" +
		"\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03" +
		"\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03" +
		"\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03" +
		"\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02" +
		"\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02" +
		"-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02" +
		"\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02" +
		"\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03" +
		"\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02" +
		"\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02" +
		"O\x03\x02\x02\x02\x03W\x03\x02\x02\x02\x05Z\x03\x02\x02\x02\x07]\x03\x02" +
		"\x02\x02\t`\x03\x02\x02\x02\vc\x03\x02\x02\x02\rf\x03\x02\x02\x02\x0F" +
		"i\x03\x02\x02\x02\x11p\x03\x02\x02\x02\x13v\x03\x02\x02\x02\x15\x7F\x03" +
		"\x02\x02\x02\x17\x82\x03\x02\x02\x02\x19\x87\x03\x02\x02\x02\x1B\x8E\x03" +
		"\x02\x02\x02\x1D\x95\x03\x02\x02\x02\x1F\x99\x03\x02\x02\x02!\x9C\x03" +
		"\x02\x02\x02#\xA3\x03\x02\x02\x02%\xAA\x03\x02\x02\x02\'\xB0\x03\x02\x02" +
		"\x02)\xB2\x03\x02\x02\x02+\xB4\x03\x02\x02\x02-\xB6\x03\x02\x02\x02/\xB8" +
		"\x03\x02\x02\x021\xBB\x03\x02\x02\x023\xBE\x03\x02\x02\x025\xC0\x03\x02" +
		"\x02\x027\xCB\x03\x02\x02\x029\xD1\x03\x02\x02\x02;\xD3\x03\x02\x02\x02" +
		"=\xDE\x03\x02\x02\x02?\xE9\x03\x02\x02\x02A\xF4\x03\x02\x02\x02C\u0109" +
		"\x03\x02\x02\x02E\u0117\x03\x02\x02\x02G\u011C\x03\x02\x02\x02I\u0122" +
		"\x03\x02\x02\x02K\u0131\x03\x02\x02\x02M\u013C\x03\x02\x02\x02O\u0140" +
		"\x03\x02\x02\x02Q\u0150\x03\x02\x02\x02S\u0156\x03\x02\x02\x02U\u015D" +
		"\x03\x02\x02\x02WX\x07]\x02\x02XY\b\x02\x02\x02Y\x04\x03\x02\x02\x02Z" +
		"[\x07_\x02\x02[\\\b\x03\x03\x02\\\x06\x03\x02\x02\x02]^\x07*\x02\x02^" +
		"_\b\x04\x04\x02_\b\x03\x02\x02\x02`a\x07+\x02\x02ab\b\x05\x05\x02b\n\x03" +
		"\x02\x02\x02cd\x07}\x02\x02de\b\x06\x06\x02e\f\x03\x02\x02\x02fg\x07\x7F" +
		"\x02\x02gh\b\x07\x07\x02h\x0E\x03\x02\x02\x02ij\x07c\x02\x02jk\x07e\x02" +
		"\x02kl\x07v\x02\x02lm\x07w\x02\x02mn\x07c\x02\x02no\x07n\x02\x02o\x10" +
		"\x03\x02\x02\x02pq\x07d\x02\x02qr\x07t\x02\x02rs\x07g\x02\x02st\x07c\x02" +
		"\x02tu\x07m\x02\x02u\x12\x03\x02\x02\x02vw\x07e\x02\x02wx\x07q\x02\x02" +
		"xy\x07p\x02\x02yz\x07v\x02\x02z{\x07k\x02\x02{|\x07p\x02\x02|}\x07w\x02" +
		"\x02}~\x07g\x02\x02~\x14\x03\x02\x02\x02\x7F\x80\x07f\x02\x02\x80\x81" +
		"\x07q\x02\x02\x81\x16\x03\x02\x02\x02\x82\x83\x07g\x02\x02\x83\x84\x07" +
		"n\x02\x02\x84\x85\x07u\x02\x02\x85\x86\x07g\x02\x02\x86\x18\x03\x02\x02" +
		"\x02\x87\x88\x07g\x02\x02\x88\x89\x07z\x02\x02\x89\x8A\x07r\x02\x02\x8A" +
		"\x8B\x07g\x02\x02\x8B\x8C\x07e\x02\x02\x8C\x8D\x07v\x02\x02\x8D\x1A\x03" +
		"\x02\x02\x02\x8E\x8F\x07g\x02\x02\x8F\x90\x07z\x02\x02\x90\x91\x07r\x02" +
		"\x02\x91\x92\x07q\x02\x02\x92\x93\x07t\x02\x02\x93\x94\x07v\x02\x02\x94" +
		"\x1C\x03\x02\x02\x02\x95\x96\x07h\x02\x02\x96\x97\x07q\x02\x02\x97\x98" +
		"\x07t\x02\x02\x98\x1E\x03\x02\x02\x02\x99\x9A\x07k\x02\x02\x9A\x9B\x07" +
		"h\x02\x02\x9B \x03\x02\x02\x02\x9C\x9D\x07k\x02\x02\x9D\x9E\x07o\x02\x02" +
		"\x9E\x9F\x07r\x02\x02\x9F\xA0\x07q\x02\x02\xA0\xA1\x07t\x02\x02\xA1\xA2" +
		"\x07v\x02\x02\xA2\"\x03\x02\x02\x02\xA3\xA4\x07t\x02\x02\xA4\xA5\x07g" +
		"\x02\x02\xA5\xA6\x07v\x02\x02\xA6\xA7\x07w\x02\x02\xA7\xA8\x07t\x02\x02" +
		"\xA8\xA9\x07p\x02\x02\xA9$\x03\x02\x02\x02\xAA\xAB\x07y\x02\x02\xAB\xAC" +
		"\x07j\x02\x02\xAC\xAD\x07k\x02\x02\xAD\xAE\x07n\x02\x02\xAE\xAF\x07g\x02" +
		"\x02\xAF&\x03\x02\x02\x02\xB0\xB1\x07?\x02\x02\xB1(\x03\x02\x02\x02\xB2" +
		"\xB3\x07<\x02\x02\xB3*\x03\x02\x02\x02\xB4\xB5\x07.\x02\x02\xB5,\x03\x02" +
		"\x02\x02\xB6\xB7\x070\x02\x02\xB7.\x03\x02\x02\x02\xB8\xB9\x07>\x02\x02" +
		"\xB9\xBA\x07~\x02\x02\xBA0\x03\x02\x02\x02\xBB\xBC\x07~\x02\x02\xBC\xBD" +
		"\x07@\x02\x02\xBD2\x03\x02\x02\x02\xBE\xBF\x07%\x02\x02\xBF4\x03\x02\x02" +
		"\x02\xC0\xC1\x07A\x02\x02\xC16\x03\x02\x02\x02\xC2\xC3\x05Q)\x02\xC3\xC4" +
		"\x05U+\x02\xC4\xC5\x070\x02\x02\xC5\xC6\x05U+\x02\xC6\xCC\x03\x02\x02" +
		"\x02\xC7\xC8\x05S*\x02\xC8\xC9\x070\x02\x02\xC9\xCA\x05S*\x02\xCA\xCC" +
		"\x03\x02\x02\x02\xCB\xC2\x03\x02\x02\x02\xCB\xC7\x03\x02\x02\x02\xCC8" +
		"\x03\x02\x02\x02\xCD\xCE\x05Q)\x02\xCE\xCF\x05U+\x02\xCF\xD2\x03\x02\x02" +
		"\x02\xD0\xD2\x05S*\x02\xD1\xCD\x03\x02\x02\x02\xD1\xD0\x03\x02\x02\x02" +
		"\xD2:\x03\x02\x02\x02\xD3\xD9\x07b\x02\x02\xD4\xD8\n\x02\x02\x02\xD5\xD6" +
		"\x07^\x02\x02\xD6\xD8\t\x03\x02\x02\xD7\xD4\x03\x02\x02\x02\xD7\xD5\x03" +
		"\x02\x02\x02\xD8\xDB\x03\x02\x02\x02\xD9\xD7\x03\x02\x02\x02\xD9\xDA\x03" +
		"\x02\x02\x02\xDA\xDC\x03\x02\x02\x02\xDB\xD9\x03\x02\x02\x02\xDC\xDD\x07" +
		"b\x02\x02\xDD<\x03\x02\x02\x02\xDE\xE4\x07)\x02\x02\xDF\xE3\n\x04\x02" +
		"\x02\xE0\xE1\x07^\x02\x02\xE1\xE3\t\x05\x02\x02\xE2\xDF\x03\x02\x02\x02" +
		"\xE2\xE0\x03\x02\x02\x02\xE3\xE6\x03\x02\x02\x02\xE4\xE2\x03\x02\x02\x02" +
		"\xE4\xE5\x03\x02\x02\x02\xE5\xE7\x03\x02\x02\x02\xE6\xE4\x03\x02\x02\x02" +
		"\xE7\xE8\x07)\x02\x02\xE8>\x03\x02\x02\x02\xE9\xEA\x07%\x02\x02\xEA\xEB" +
		"\x07}\x02\x02\xEB\xEF\x03\x02\x02\x02\xEC\xEE\v\x02\x02\x02\xED\xEC\x03" +
		"\x02\x02\x02\xEE\xF1\x03\x02\x02\x02\xEF\xF0\x03\x02\x02\x02\xEF\xED\x03" +
		"\x02\x02\x02\xF0\xF2\x03\x02\x02\x02\xF1\xEF\x03\x02\x02\x02\xF2\xF3\x07" +
		"\x7F\x02\x02\xF3@\x03\x02\x02\x02\xF4\xF8\t\x06\x02\x02\xF5\xF7\t\x07" +
		"\x02\x02\xF6\xF5\x03\x02\x02\x02\xF7\xFA\x03\x02\x02\x02\xF8\xF6\x03\x02" +
		"\x02\x02\xF8\xF9\x03\x02\x02\x02\xF9B\x03\x02\x02\x02\xFA\xF8\x03\x02" +
		"\x02\x02\xFB\u010A\t\b\x02\x02\xFC\xFD\x070\x02\x02\xFD\u010A\x070\x02" +
		"\x02\xFE\xFF\x070\x02\x02\xFF\u0100\x070\x02\x02\u0100\u010A\x070\x02" +
		"\x02\u0101\u0102\x07>\x02\x02\u0102\u010A\x07?\x02\x02\u0103\u0104\x07" +
		"@\x02\x02\u0104\u010A\x07?\x02\x02\u0105\u0106\x07?\x02\x02\u0106\u010A" +
		"\x07?\x02\x02\u0107\u0108\x07#\x02\x02\u0108\u010A\x07?\x02\x02\u0109" +
		"\xFB\x03\x02\x02\x02\u0109\xFC\x03\x02\x02\x02\u0109\xFE\x03\x02\x02\x02" +
		"\u0109\u0101\x03\x02\x02\x02\u0109\u0103\x03\x02\x02\x02\u0109\u0105\x03" +
		"\x02\x02\x02\u0109\u0107\x03\x02\x02\x02\u010AD\x03\x02\x02\x02\u010B" +
		"\u010C\x06#\x02\x02\u010C\u0118\x05G$\x02\u010D\u010F\x07\x0F\x02\x02" +
		"\u010E\u010D\x03\x02\x02\x02\u010E\u010F\x03\x02\x02\x02\u010F\u0110\x03" +
		"\x02\x02\x02\u0110\u0113\x07\f\x02\x02\u0111\u0113\x07\x0F\x02\x02\u0112" +
		"\u010E\x03\x02\x02\x02\u0112\u0111\x03\x02\x02\x02\u0113\u0115\x03\x02" +
		"\x02\x02\u0114\u0116\x05G$\x02\u0115\u0114\x03\x02\x02\x02\u0115\u0116" +
		"\x03\x02\x02\x02\u0116\u0118\x03\x02\x02\x02\u0117\u010B\x03\x02\x02\x02" +
		"\u0117\u0112\x03\x02\x02\x02\u0118\u0119\x03\x02\x02\x02\u0119\u011A\b" +
		"#\b\x02\u011AF\x03\x02\x02\x02\u011B\u011D\t\t\x02\x02\u011C\u011B\x03" +
		"\x02\x02\x02\u011D\u011E\x03\x02\x02\x02\u011E\u011C\x03\x02\x02\x02\u011E" +
		"\u011F\x03\x02\x02\x02\u011F\u0120\x03\x02\x02\x02\u0120\u0121\b$\t\x02" +
		"\u0121H\x03\x02\x02\x02\u0122\u0123\x071\x02\x02\u0123\u0124\x07,\x02" +
		"\x02\u0124\u0129\x03\x02\x02\x02\u0125\u0128\x05I%\x02\u0126\u0128\v\x02" +
		"\x02\x02\u0127\u0125\x03\x02\x02\x02\u0127\u0126\x03\x02\x02\x02\u0128" +
		"\u012B\x03\x02\x02\x02\u0129\u012A\x03\x02\x02\x02\u0129\u0127\x03\x02" +
		"\x02\x02\u012A\u012C\x03\x02\x02\x02\u012B\u0129\x03\x02\x02\x02\u012C" +
		"\u012D\x07,\x02\x02\u012D\u012E\x071\x02\x02\u012E\u012F\x03\x02\x02\x02" +
		"\u012F\u0130\b%\n\x02\u0130J\x03\x02\x02\x02\u0131\u0132\x07/\x02\x02" +
		"\u0132\u0133\x07/\x02\x02\u0133\u0137\x03\x02\x02\x02\u0134\u0136\n\n" +
		"\x02\x02\u0135\u0134\x03\x02\x02\x02\u0136\u0139\x03\x02\x02\x02\u0137" +
		"\u0135\x03\x02\x02\x02\u0137\u0138\x03\x02\x02\x02\u0138\u013A\x03\x02" +
		"\x02\x02\u0139\u0137\x03\x02\x02\x02\u013A\u013B\b&\n\x02\u013BL\x03\x02" +
		"\x02\x02\u013C\u013D\v\x02\x02\x02\u013D\u013E\x03\x02\x02\x02\u013E\u013F" +
		"\b\'\v\x02\u013FN\x03\x02\x02\x02\u0140\u0144\x07^\x02\x02\u0141\u0143" +
		"\t\t\x02\x02\u0142\u0141\x03\x02\x02\x02\u0143\u0146\x03\x02\x02\x02\u0144" +
		"\u0142\x03\x02\x02\x02\u0144\u0145\x03\x02\x02\x02\u0145\u014C\x03\x02" +
		"\x02\x02\u0146\u0144\x03\x02\x02\x02\u0147\u0149\x07\x0F\x02\x02\u0148" +
		"\u0147\x03\x02\x02\x02\u0148\u0149\x03\x02\x02\x02\u0149\u014A\x03\x02" +
		"\x02\x02\u014A\u014D\x07\f\x02\x02\u014B\u014D\x04\x0E\x0F\x02\u014C\u0148" +
		"\x03\x02\x02\x02\u014C\u014B\x03\x02\x02\x02\u014D\u014E\x03\x02\x02\x02" +
		"\u014E\u014F\b(\f\x02\u014FP\x03\x02\x02\x02\u0150\u0152\t\v\x02\x02\u0151" +
		"\u0153\t\v\x02\x02\u0152\u0151\x03\x02\x02\x02\u0152\u0153\x03\x02\x02" +
		"\x02\u0153\u0154\x03\x02\x02\x02\u0154\u0155\t\f\x02\x02\u0155R\x03\x02" +
		"\x02\x02\u0156\u015A\t\v\x02\x02\u0157\u0159\t\r\x02\x02\u0158\u0157\x03" +
		"\x02\x02\x02\u0159\u015C\x03\x02\x02\x02\u015A\u0158\x03\x02\x02\x02\u015A" +
		"\u015B\x03\x02\x02\x02\u015BT\x03\x02\x02\x02\u015C\u015A\x03\x02\x02" +
		"\x02\u015D\u0161\t\x0E\x02\x02\u015E\u0160\t\x07\x02\x02\u015F\u015E\x03" +
		"\x02\x02\x02\u0160\u0163\x03\x02\x02\x02\u0161\u015F\x03\x02\x02\x02\u0161" +
		"\u0162\x03\x02\x02\x02\u0162V\x03\x02\x02\x02\u0163\u0161\x03\x02\x02" +
		"\x02\x1C\x02\xCB\xD1\xD7\xD9\xE2\xE4\xEF\xF8\u0109\u010E\u0112\u0115\u0117" +
		"\u011E\u0127\u0129\u0137\u0144\u0148\u014C\u0152\u0158\u015A\u015F\u0161" +
		"\r\x03\x02\x02\x03\x03\x03\x03\x04\x04\x03\x05\x05\x03\x06\x06\x03\x07" +
		"\x07\x03#\b\x02\x05\x02\x02\x06\x02\x02\x04\x02\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

