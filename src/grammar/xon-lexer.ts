// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN_BRACKET = 3;
	public static readonly CLOSE_BRACKET = 4;
	public static readonly OPEN_PAREN = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_BRACE = 7;
	public static readonly CLOSE_BRACE = 8;
	public static readonly ACTUAL = 9;
	public static readonly BREAK = 10;
	public static readonly CONTINUE = 11;
	public static readonly DO = 12;
	public static readonly ELSE = 13;
	public static readonly EXPECT = 14;
	public static readonly EXPORT = 15;
	public static readonly FOR = 16;
	public static readonly IF = 17;
	public static readonly IMPORT = 18;
	public static readonly RETURN = 19;
	public static readonly WHILE = 20;
	public static readonly OPERATOR = 21;
	public static readonly AND = 22;
	public static readonly AS = 23;
	public static readonly IS_NOT = 24;
	public static readonly IS = 25;
	public static readonly NOT = 26;
	public static readonly OR = 27;
	public static readonly ASSIGN = 28;
	public static readonly COLON = 29;
	public static readonly COMMA = 30;
	public static readonly DOT = 31;
	public static readonly GENERIC_LEFT = 32;
	public static readonly GENERIC_RIGHT = 33;
	public static readonly LAMBDA = 34;
	public static readonly QUESTION = 35;
	public static readonly FLOAT_LITERAL = 36;
	public static readonly INTEGER_LITERAL = 37;
	public static readonly STRING_LITERAL = 38;
	public static readonly PREPROCESSOR = 39;
	public static readonly ID = 40;
	public static readonly OP = 41;
	public static readonly NL = 42;
	public static readonly WS = 43;
	public static readonly BLOCK_COMMENT = 44;
	public static readonly LINE_COMMENT = 45;
	public static readonly UNEXPECTED = 46;
	public static readonly LINE_JOINING = 47;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", "DO", "ELSE", "EXPECT", 
		"EXPORT", "FOR", "IF", "IMPORT", "RETURN", "WHILE", "OPERATOR", "AND", 
		"AS", "IS_NOT", "IS", "NOT", "OR", "ASSIGN", "COLON", "COMMA", "DOT", 
		"GENERIC_LEFT", "GENERIC_RIGHT", "LAMBDA", "QUESTION", "FLOAT_LITERAL", 
		"INTEGER_LITERAL", "STRING_LITERAL", "PREPROCESSOR", "ID", "OP", "NL", 
		"WS", "BLOCK_COMMENT", "LINE_COMMENT", "UNEXPECTED", "LINE_JOINING", "Radix", 
		"DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'actual'", "'break'", "'continue'", "'do'", "'else'", "'expect'", "'export'", 
		"'for'", "'if'", "'import'", "'return'", "'while'", "'operator'", "'and'", 
		"'as'", "'is not'", "'is'", "'not'", "'or'", "'='", "':'", "','", "'.'", 
		"'<|'", "'|>'", "'=>'", "'?'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", 
		"DO", "ELSE", "EXPECT", "EXPORT", "FOR", "IF", "IMPORT", "RETURN", "WHILE", 
		"OPERATOR", "AND", "AS", "IS_NOT", "IS", "NOT", "OR", "ASSIGN", "COLON", 
		"COMMA", "DOT", "GENERIC_LEFT", "GENERIC_RIGHT", "LAMBDA", "QUESTION", 
		"FLOAT_LITERAL", "INTEGER_LITERAL", "STRING_LITERAL", "PREPROCESSOR", 
		"ID", "OP", "NL", "WS", "BLOCK_COMMENT", "LINE_COMMENT", "UNEXPECTED", 
		"LINE_JOINING",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 2:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 3:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 4:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 5:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 39:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 39:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x021\u0190\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x03\x02\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12" +
		"\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14" +
		"\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15" +
		"\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17" +
		"\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19" +
		"\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D" +
		"\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03 \x03!\x03!\x03" +
		"!\x03\"\x03\"\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x05#\xFA\n" +
		"#\x03$\x03$\x03$\x03$\x05$\u0100\n$\x03%\x03%\x03%\x03%\x07%\u0106\n%" +
		"\f%\x0E%\u0109\v%\x03%\x03%\x03&\x03&\x03&\x03&\x03&\x03&\x07&\u0113\n" +
		"&\f&\x0E&\u0116\v&\x03&\x03&\x07&\u011A\n&\f&\x0E&\u011D\v&\x03&\x03&" +
		"\x03\'\x03\'\x07\'\u0123\n\'\f\'\x0E\'\u0126\v\'\x03(\x03(\x03(\x03(\x03" +
		"(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x05(\u0136\n(\x03)\x03" +
		")\x03)\x05)\u013B\n)\x03)\x03)\x05)\u013F\n)\x03)\x05)\u0142\n)\x05)\u0144" +
		"\n)\x03)\x03)\x03*\x06*\u0149\n*\r*\x0E*\u014A\x03*\x03*\x03+\x03+\x03" +
		"+\x03+\x03+\x07+\u0154\n+\f+\x0E+\u0157\v+\x03+\x03+\x03+\x03+\x03+\x03" +
		",\x03,\x03,\x03,\x07,\u0162\n,\f,\x0E,\u0165\v,\x03,\x03,\x03-\x03-\x03" +
		"-\x03-\x03.\x03.\x07.\u016F\n.\f.\x0E.\u0172\v.\x03.\x05.\u0175\n.\x03" +
		".\x03.\x05.\u0179\n.\x03.\x03.\x03/\x03/\x05/\u017F\n/\x03/\x03/\x030" +
		"\x030\x070\u0185\n0\f0\x0E0\u0188\v0\x031\x031\x071\u018C\n1\f1\x0E1\u018F" +
		"\v1\x05\u0114\u011B\u0155\x02\x022\x03\x02\x05\x05\x02\x06\x07\x02\x07" +
		"\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17" +
		"\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02" +
		"\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19-\x02\x1A/\x02\x1B1\x02\x1C3" +
		"\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?\x02#A\x02$C\x02%E\x02&" +
		"G\x02\'I\x02(K\x02)M\x02*O\x02+Q\x02,S\x02-U\x02.W\x02/Y\x020[\x021]\x02" +
		"\x02_\x02\x02a\x02\x02\x03\x02\r\x03\x02))\n\x02))^^ddhhppttvvxx\x05\x02" +
		"C\\aac|\x06\x022;C\\aac|\x05\x02##\'\',`\x04\x02\v\v\"\"\x04\x02\f\f\x0F" +
		"\x0F\x03\x022;\x04\x02ZZzz\x04\x022;aa\x05\x022;C\\c|\x02\u01A9\x02\x03" +
		"\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t" +
		"\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03" +
		"\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03" +
		"\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03" +
		"\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03" +
		"\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02" +
		"\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02" +
		"/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02" +
		"\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02" +
		"\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03" +
		"\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02" +
		"\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02" +
		"Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02" +
		"\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x03c\x03\x02\x02\x02" +
		"\x05f\x03\x02\x02\x02\x07i\x03\x02\x02\x02\tl\x03\x02\x02\x02\vo\x03\x02" +
		"\x02\x02\rr\x03\x02\x02\x02\x0Fu\x03\x02\x02\x02\x11|\x03\x02\x02\x02" +
		"\x13\x82\x03\x02\x02\x02\x15\x8B\x03\x02\x02\x02\x17\x8E\x03\x02\x02\x02" +
		"\x19\x93\x03\x02\x02\x02\x1B\x9A\x03\x02\x02\x02\x1D\xA1\x03\x02\x02\x02" +
		"\x1F\xA5\x03\x02\x02\x02!\xA8\x03\x02\x02\x02#\xAF\x03\x02\x02\x02%\xB6" +
		"\x03\x02\x02\x02\'\xBC\x03\x02\x02\x02)\xC5\x03\x02\x02\x02+\xC9\x03\x02" +
		"\x02\x02-\xCC\x03\x02\x02\x02/\xD3\x03\x02\x02\x021\xD6\x03\x02\x02\x02" +
		"3\xDA\x03\x02\x02\x025\xDD\x03\x02\x02\x027\xDF\x03\x02\x02\x029\xE1\x03" +
		"\x02\x02\x02;\xE3\x03\x02\x02\x02=\xE5\x03\x02\x02\x02?\xE8\x03\x02\x02" +
		"\x02A\xEB\x03\x02\x02\x02C\xEE\x03\x02\x02\x02E\xF9\x03\x02\x02\x02G\xFF" +
		"\x03\x02\x02\x02I\u0101\x03\x02\x02\x02K\u010C\x03\x02\x02\x02M\u0120" +
		"\x03\x02\x02\x02O\u0135\x03\x02\x02\x02Q\u0143\x03\x02\x02\x02S\u0148" +
		"\x03\x02\x02\x02U\u014E\x03\x02\x02\x02W\u015D\x03\x02\x02\x02Y\u0168" +
		"\x03\x02\x02\x02[\u016C\x03\x02\x02\x02]\u017C\x03\x02\x02\x02_\u0182" +
		"\x03\x02\x02\x02a\u0189\x03\x02\x02\x02cd\x07]\x02\x02de\b\x02\x02\x02" +
		"e\x04\x03\x02\x02\x02fg\x07_\x02\x02gh\b\x03\x03\x02h\x06\x03\x02\x02" +
		"\x02ij\x07*\x02\x02jk\b\x04\x04\x02k\b\x03\x02\x02\x02lm\x07+\x02\x02" +
		"mn\b\x05\x05\x02n\n\x03\x02\x02\x02op\x07}\x02\x02pq\b\x06\x06\x02q\f" +
		"\x03\x02\x02\x02rs\x07\x7F\x02\x02st\b\x07\x07\x02t\x0E\x03\x02\x02\x02" +
		"uv\x07c\x02\x02vw\x07e\x02\x02wx\x07v\x02\x02xy\x07w\x02\x02yz\x07c\x02" +
		"\x02z{\x07n\x02\x02{\x10\x03\x02\x02\x02|}\x07d\x02\x02}~\x07t\x02\x02" +
		"~\x7F\x07g\x02\x02\x7F\x80\x07c\x02\x02\x80\x81\x07m\x02\x02\x81\x12\x03" +
		"\x02\x02\x02\x82\x83\x07e\x02\x02\x83\x84\x07q\x02\x02\x84\x85\x07p\x02" +
		"\x02\x85\x86\x07v\x02\x02\x86\x87\x07k\x02\x02\x87\x88\x07p\x02\x02\x88" +
		"\x89\x07w\x02\x02\x89\x8A\x07g\x02\x02\x8A\x14\x03\x02\x02\x02\x8B\x8C" +
		"\x07f\x02\x02\x8C\x8D\x07q\x02\x02\x8D\x16\x03\x02\x02\x02\x8E\x8F\x07" +
		"g\x02\x02\x8F\x90\x07n\x02\x02\x90\x91\x07u\x02\x02\x91\x92\x07g\x02\x02" +
		"\x92\x18\x03\x02\x02\x02\x93\x94\x07g\x02\x02\x94\x95\x07z\x02\x02\x95" +
		"\x96\x07r\x02\x02\x96\x97\x07g\x02\x02\x97\x98\x07e\x02\x02\x98\x99\x07" +
		"v\x02\x02\x99\x1A\x03\x02\x02\x02\x9A\x9B\x07g\x02\x02\x9B\x9C\x07z\x02" +
		"\x02\x9C\x9D\x07r\x02\x02\x9D\x9E\x07q\x02\x02\x9E\x9F\x07t\x02\x02\x9F" +
		"\xA0\x07v\x02\x02\xA0\x1C\x03\x02\x02\x02\xA1\xA2\x07h\x02\x02\xA2\xA3" +
		"\x07q\x02\x02\xA3\xA4\x07t\x02\x02\xA4\x1E\x03\x02\x02\x02\xA5\xA6\x07" +
		"k\x02\x02\xA6\xA7\x07h\x02\x02\xA7 \x03\x02\x02\x02\xA8\xA9\x07k\x02\x02" +
		"\xA9\xAA\x07o\x02\x02\xAA\xAB\x07r\x02\x02\xAB\xAC\x07q\x02\x02\xAC\xAD" +
		"\x07t\x02\x02\xAD\xAE\x07v\x02\x02\xAE\"\x03\x02\x02\x02\xAF\xB0\x07t" +
		"\x02\x02\xB0\xB1\x07g\x02\x02\xB1\xB2\x07v\x02\x02\xB2\xB3\x07w\x02\x02" +
		"\xB3\xB4\x07t\x02\x02\xB4\xB5\x07p\x02\x02\xB5$\x03\x02\x02\x02\xB6\xB7" +
		"\x07y\x02\x02\xB7\xB8\x07j\x02\x02\xB8\xB9\x07k\x02\x02\xB9\xBA\x07n\x02" +
		"\x02\xBA\xBB\x07g\x02\x02\xBB&\x03\x02\x02\x02\xBC\xBD\x07q\x02\x02\xBD" +
		"\xBE\x07r\x02\x02\xBE\xBF\x07g\x02\x02\xBF\xC0\x07t\x02\x02\xC0\xC1\x07" +
		"c\x02\x02\xC1\xC2\x07v\x02\x02\xC2\xC3\x07q\x02\x02\xC3\xC4\x07t\x02\x02" +
		"\xC4(\x03\x02\x02\x02\xC5\xC6\x07c\x02\x02\xC6\xC7\x07p\x02\x02\xC7\xC8" +
		"\x07f\x02\x02\xC8*\x03\x02\x02\x02\xC9\xCA\x07c\x02\x02\xCA\xCB\x07u\x02" +
		"\x02\xCB,\x03\x02\x02\x02\xCC\xCD\x07k\x02\x02\xCD\xCE\x07u\x02\x02\xCE" +
		"\xCF\x07\"\x02\x02\xCF\xD0\x07p\x02\x02\xD0\xD1\x07q\x02\x02\xD1\xD2\x07" +
		"v\x02\x02\xD2.\x03\x02\x02\x02\xD3\xD4\x07k\x02\x02\xD4\xD5\x07u\x02\x02" +
		"\xD50\x03\x02\x02\x02\xD6\xD7\x07p\x02\x02\xD7\xD8\x07q\x02\x02\xD8\xD9" +
		"\x07v\x02\x02\xD92\x03\x02\x02\x02\xDA\xDB\x07q\x02\x02\xDB\xDC\x07t\x02" +
		"\x02\xDC4\x03\x02\x02\x02\xDD\xDE\x07?\x02\x02\xDE6\x03\x02\x02\x02\xDF" +
		"\xE0\x07<\x02\x02\xE08\x03\x02\x02\x02\xE1\xE2\x07.\x02\x02\xE2:\x03\x02" +
		"\x02\x02\xE3\xE4\x070\x02\x02\xE4<\x03\x02\x02\x02\xE5\xE6\x07>\x02\x02" +
		"\xE6\xE7\x07~\x02\x02\xE7>\x03\x02\x02\x02\xE8\xE9\x07~\x02\x02\xE9\xEA" +
		"\x07@\x02\x02\xEA@\x03\x02\x02\x02\xEB\xEC\x07?\x02\x02\xEC\xED\x07@\x02" +
		"\x02\xEDB\x03\x02\x02\x02\xEE\xEF\x07A\x02\x02\xEFD\x03\x02\x02\x02\xF0" +
		"\xF1\x05]/\x02\xF1\xF2\x05a1\x02\xF2\xF3\x070\x02\x02\xF3\xF4\x05a1\x02" +
		"\xF4\xFA\x03\x02\x02\x02\xF5\xF6\x05_0\x02\xF6\xF7\x070\x02\x02\xF7\xF8" +
		"\x05_0\x02\xF8\xFA\x03\x02\x02\x02\xF9\xF0\x03\x02\x02\x02\xF9\xF5\x03" +
		"\x02\x02\x02\xFAF\x03\x02\x02\x02\xFB\xFC\x05]/\x02\xFC\xFD\x05a1\x02" +
		"\xFD\u0100\x03\x02\x02\x02\xFE\u0100\x05_0\x02\xFF\xFB\x03\x02\x02\x02" +
		"\xFF\xFE\x03\x02\x02\x02\u0100H\x03\x02\x02\x02\u0101\u0107\x07)\x02\x02" +
		"\u0102\u0106\n\x02\x02\x02\u0103\u0104\x07^\x02\x02\u0104\u0106\t\x03" +
		"\x02\x02\u0105\u0102\x03\x02\x02\x02\u0105\u0103\x03\x02\x02\x02\u0106" +
		"\u0109\x03\x02\x02\x02\u0107\u0105\x03\x02\x02\x02\u0107\u0108\x03\x02" +
		"\x02\x02\u0108\u010A\x03\x02\x02\x02\u0109\u0107\x03\x02\x02\x02\u010A" +
		"\u010B\x07)\x02\x02\u010BJ\x03\x02\x02\x02\u010C\u010D\x07%\x02\x02\u010D" +
		"\u010E\x07}\x02\x02\u010E\u011B\x03\x02\x02\x02\u010F\u011A\x05K&\x02" +
		"\u0110\u0114\x07}\x02\x02\u0111\u0113\v\x02\x02\x02\u0112\u0111\x03\x02" +
		"\x02\x02\u0113\u0116\x03\x02\x02\x02\u0114\u0115\x03\x02\x02\x02\u0114" +
		"\u0112\x03\x02\x02\x02\u0115\u0117\x03\x02\x02\x02\u0116\u0114\x03\x02" +
		"\x02\x02\u0117\u011A\x07\x7F\x02\x02\u0118\u011A\v\x02\x02\x02\u0119\u010F" +
		"\x03\x02\x02\x02\u0119\u0110\x03\x02\x02\x02\u0119\u0118\x03\x02\x02\x02" +
		"\u011A\u011D\x03\x02\x02\x02\u011B\u011C\x03\x02\x02\x02\u011B\u0119\x03" +
		"\x02\x02\x02\u011C\u011E\x03\x02\x02\x02\u011D\u011B\x03\x02\x02\x02\u011E" +
		"\u011F\x07\x7F\x02\x02\u011FL\x03\x02\x02\x02\u0120\u0124\t\x04\x02\x02" +
		"\u0121\u0123\t\x05\x02\x02\u0122\u0121\x03\x02\x02\x02\u0123\u0126\x03" +
		"\x02\x02\x02\u0124\u0122\x03\x02\x02\x02\u0124\u0125\x03\x02\x02\x02\u0125" +
		"N\x03\x02\x02\x02\u0126\u0124\x03\x02\x02\x02\u0127\u0136\t\x06\x02\x02" +
		"\u0128\u0129\x070\x02\x02\u0129\u0136\x070\x02\x02\u012A\u012B\x070\x02" +
		"\x02\u012B\u012C\x070\x02\x02\u012C\u0136\x070\x02\x02\u012D\u012E\x07" +
		">\x02\x02\u012E\u0136\x07?\x02\x02\u012F\u0130\x07@\x02\x02\u0130\u0136" +
		"\x07?\x02\x02\u0131\u0132\x07?\x02\x02\u0132\u0136\x07?\x02\x02\u0133" +
		"\u0134\x07#\x02\x02\u0134\u0136\x07?\x02\x02\u0135\u0127\x03\x02\x02\x02" +
		"\u0135\u0128\x03\x02\x02\x02\u0135\u012A\x03\x02\x02\x02\u0135\u012D\x03" +
		"\x02\x02\x02\u0135\u012F\x03\x02\x02\x02\u0135\u0131\x03\x02\x02\x02\u0135" +
		"\u0133\x03\x02\x02\x02\u0136P\x03\x02\x02\x02\u0137\u0138\x06)\x02\x02" +
		"\u0138\u0144\x05S*\x02\u0139\u013B\x07\x0F\x02\x02\u013A\u0139\x03\x02" +
		"\x02\x02\u013A\u013B\x03\x02\x02\x02\u013B\u013C\x03\x02\x02\x02\u013C" +
		"\u013F\x07\f\x02\x02\u013D\u013F\x07\x0F\x02\x02\u013E\u013A\x03\x02\x02" +
		"\x02\u013E\u013D\x03\x02\x02\x02\u013F\u0141\x03\x02\x02\x02\u0140\u0142" +
		"\x05S*\x02\u0141\u0140\x03\x02\x02\x02\u0141\u0142\x03\x02\x02\x02\u0142" +
		"\u0144\x03\x02\x02\x02\u0143\u0137\x03\x02\x02\x02\u0143\u013E\x03\x02" +
		"\x02\x02\u0144\u0145\x03\x02\x02\x02\u0145\u0146\b)\b\x02\u0146R\x03\x02" +
		"\x02\x02\u0147\u0149\t\x07\x02\x02\u0148\u0147\x03\x02\x02\x02\u0149\u014A" +
		"\x03\x02\x02\x02\u014A\u0148\x03\x02\x02\x02\u014A\u014B\x03\x02\x02\x02" +
		"\u014B\u014C\x03\x02\x02\x02\u014C\u014D\b*\t\x02\u014DT\x03\x02\x02\x02" +
		"\u014E\u014F\x071\x02\x02\u014F\u0150\x07,\x02\x02\u0150\u0155\x03\x02" +
		"\x02\x02\u0151\u0154\x05U+\x02\u0152\u0154\v\x02\x02\x02\u0153\u0151\x03" +
		"\x02\x02\x02\u0153\u0152\x03\x02\x02\x02\u0154\u0157\x03\x02\x02\x02\u0155" +
		"\u0156\x03\x02\x02\x02\u0155\u0153\x03\x02\x02\x02\u0156\u0158\x03\x02" +
		"\x02\x02\u0157\u0155\x03\x02\x02\x02\u0158\u0159\x07,\x02\x02\u0159\u015A" +
		"\x071\x02\x02\u015A\u015B\x03\x02\x02\x02\u015B\u015C\b+\n\x02\u015CV" +
		"\x03\x02\x02\x02\u015D\u015E\x07/\x02\x02\u015E\u015F\x07/\x02\x02\u015F" +
		"\u0163\x03\x02\x02\x02\u0160\u0162\n\b\x02\x02\u0161\u0160\x03\x02\x02" +
		"\x02\u0162\u0165\x03\x02\x02\x02\u0163\u0161\x03\x02\x02\x02\u0163\u0164" +
		"\x03\x02\x02\x02\u0164\u0166\x03\x02\x02\x02\u0165\u0163\x03\x02\x02\x02" +
		"\u0166\u0167\b,\n\x02\u0167X\x03\x02\x02\x02\u0168\u0169\v\x02\x02\x02" +
		"\u0169\u016A\x03\x02\x02\x02\u016A\u016B\b-\v\x02\u016BZ\x03\x02\x02\x02" +
		"\u016C\u0170\x07^\x02\x02\u016D\u016F\t\x07\x02\x02\u016E\u016D\x03\x02" +
		"\x02\x02\u016F\u0172\x03\x02\x02\x02\u0170\u016E\x03\x02\x02\x02\u0170" +
		"\u0171\x03\x02\x02\x02\u0171\u0178\x03\x02\x02\x02\u0172\u0170\x03\x02" +
		"\x02\x02\u0173\u0175\x07\x0F\x02\x02\u0174\u0173\x03\x02\x02\x02\u0174" +
		"\u0175\x03\x02\x02\x02\u0175\u0176\x03\x02\x02\x02\u0176\u0179\x07\f\x02" +
		"\x02\u0177\u0179\x04\x0E\x0F\x02\u0178\u0174\x03\x02\x02\x02\u0178\u0177" +
		"\x03\x02\x02\x02\u0179\u017A\x03\x02\x02\x02\u017A\u017B\b.\f\x02\u017B" +
		"\\\x03\x02\x02\x02\u017C\u017E\t\t\x02\x02\u017D\u017F\t\t\x02\x02\u017E" +
		"\u017D\x03\x02\x02\x02\u017E\u017F\x03\x02\x02\x02\u017F\u0180\x03\x02" +
		"\x02\x02\u0180\u0181\t\n\x02\x02\u0181^\x03\x02\x02\x02\u0182\u0186\t" +
		"\t\x02\x02\u0183\u0185\t\v\x02\x02\u0184\u0183\x03\x02\x02\x02\u0185\u0188" +
		"\x03\x02\x02\x02\u0186\u0184\x03\x02\x02\x02\u0186\u0187\x03\x02\x02\x02" +
		"\u0187`\x03\x02\x02\x02\u0188\u0186\x03\x02\x02\x02\u0189\u018D\t\f\x02" +
		"\x02\u018A\u018C\t\x05\x02\x02\u018B\u018A\x03\x02\x02\x02\u018C\u018F" +
		"\x03\x02\x02\x02\u018D\u018B\x03\x02\x02\x02\u018D\u018E\x03\x02\x02\x02" +
		"\u018Eb\x03\x02\x02\x02\u018F\u018D\x03\x02\x02\x02\x1C\x02\xF9\xFF\u0105" +
		"\u0107\u0114\u0119\u011B\u0124\u0135\u013A\u013E\u0141\u0143\u014A\u0153" +
		"\u0155\u0163\u0170\u0174\u0178\u017E\u0184\u0186\u018B\u018D\r\x03\x02" +
		"\x02\x03\x03\x03\x03\x04\x04\x03\x05\x05\x03\x06\x06\x03\x07\x07\x03)" +
		"\b\x02\x05\x02\x02\x06\x02\x02\x04\x02\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

