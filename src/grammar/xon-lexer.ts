// Generated from XonLexer.g4 by ANTLR 4.7.3-SNAPSHOT

 
import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly If = 3;
	public static readonly Else = 4;
	public static readonly Loop = 5;
	public static readonly In = 6;
	public static readonly Continue = 7;
	public static readonly Break = 8;
	public static readonly Return = 9;
	public static readonly As = 10;
	public static readonly Var = 11;
	public static readonly Preprocessor = 12;
	public static readonly LineBreak = 13;
	public static readonly BitAnd = 14;
	public static readonly BitOr = 15;
	public static readonly BitXor = 16;
	public static readonly RightShiftArithmetic = 17;
	public static readonly LeftShiftArithmetic = 18;
	public static readonly RightShiftLogical = 19;
	public static readonly OpenBracket = 20;
	public static readonly CloseBracket = 21;
	public static readonly OpenParen = 22;
	public static readonly CloseParen = 23;
	public static readonly OpenBrace = 24;
	public static readonly CloseBrace = 25;
	public static readonly Comma = 26;
	public static readonly Assign = 27;
	public static readonly QuestionMark = 28;
	public static readonly Colon = 29;
	public static readonly Ellipsis = 30;
	public static readonly Dot = 31;
	public static readonly Plus = 32;
	public static readonly Minus = 33;
	public static readonly BitNot = 34;
	public static readonly Not = 35;
	public static readonly Multiply = 36;
	public static readonly Divide = 37;
	public static readonly Modulus = 38;
	public static readonly Pow = 39;
	public static readonly Sharp = 40;
	public static readonly LessThan = 41;
	public static readonly MoreThan = 42;
	public static readonly LessThanEquals = 43;
	public static readonly MoreThanEquals = 44;
	public static readonly Equals = 45;
	public static readonly NotEquals = 46;
	public static readonly And = 47;
	public static readonly Or = 48;
	public static readonly MultiplyAssign = 49;
	public static readonly DivideAssign = 50;
	public static readonly ModulusAssign = 51;
	public static readonly PlusAssign = 52;
	public static readonly MinusAssign = 53;
	public static readonly LeftShiftArithmeticAssign = 54;
	public static readonly RightShiftArithmeticAssign = 55;
	public static readonly RightShiftLogicalAssign = 56;
	public static readonly BitAndAssign = 57;
	public static readonly BitXorAssign = 58;
	public static readonly BitOrAssign = 59;
	public static readonly LambdaStart = 60;
	public static readonly Pipe = 61;
	public static readonly Underscore = 62;
	public static readonly BooleanLiteral = 63;
	public static readonly DecimalLiteral = 64;
	public static readonly FloatLiteral = 65;
	public static readonly StringLiteral = 66;
	public static readonly StringFormat = 67;
	public static readonly ID = 68;
	public static readonly Skip = 69;
	public static readonly UnexpectedCharacter = 70;
	public static readonly ERROR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"If", "Else", "Loop", "In", "Continue", "Break", "Return", "As", "Var", 
		"Preprocessor", "LineBreak", "BitAnd", "BitOr", "BitXor", "RightShiftArithmetic", 
		"LeftShiftArithmetic", "RightShiftLogical", "OpenBracket", "CloseBracket", 
		"OpenParen", "CloseParen", "OpenBrace", "CloseBrace", "Comma", "Assign", 
		"QuestionMark", "Colon", "Ellipsis", "Dot", "Plus", "Minus", "BitNot", 
		"Not", "Multiply", "Divide", "Modulus", "Pow", "Sharp", "LessThan", "MoreThan", 
		"LessThanEquals", "MoreThanEquals", "Equals", "NotEquals", "And", "Or", 
		"MultiplyAssign", "DivideAssign", "ModulusAssign", "PlusAssign", "MinusAssign", 
		"LeftShiftArithmeticAssign", "RightShiftArithmeticAssign", "RightShiftLogicalAssign", 
		"BitAndAssign", "BitXorAssign", "BitOrAssign", "LambdaStart", "Pipe", 
		"Underscore", "BooleanLiteral", "DecimalLiteral", "FloatLiteral", "StringLiteral", 
		"StringFormat", "ID", "Skip", "UnexpectedCharacter", "SPACES", "MULTI_LINE_COMMENT", 
		"SINGLE_LINE_COMMENT", "LINE_JOINING", "DECIMAL_NUMBER", "DECIMAL_DIGIT",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'if'", "'else'", "'loop'", "'in'", "'continue'", 
		"'break'", "'return'", "'as'", "'var'", undefined, undefined, "'and'", 
		"'or'", "'xor'", "'>>'", "'<<'", "'>>>'", "'['", "']'", "'('", "')'", 
		"'{'", "'}'", "','", "'='", "'?'", "':'", "'...'", "'.'", "'+'", "'-'", 
		"'~'", "'!'", "'*'", "'/'", "'%'", "'^'", "'#'", "'<'", "'>'", "'<='", 
		"'>='", "'=='", "'!='", "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", 
		"'-='", "'<<='", "'>>='", "'>>>='", "'&='", "'^='", "'|='", "'\\'", "'|'", 
		"'_'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "If", "Else", "Loop", "In", "Continue", 
		"Break", "Return", "As", "Var", "Preprocessor", "LineBreak", "BitAnd", 
		"BitOr", "BitXor", "RightShiftArithmetic", "LeftShiftArithmetic", "RightShiftLogical", 
		"OpenBracket", "CloseBracket", "OpenParen", "CloseParen", "OpenBrace", 
		"CloseBrace", "Comma", "Assign", "QuestionMark", "Colon", "Ellipsis", 
		"Dot", "Plus", "Minus", "BitNot", "Not", "Multiply", "Divide", "Modulus", 
		"Pow", "Sharp", "LessThan", "MoreThan", "LessThanEquals", "MoreThanEquals", 
		"Equals", "NotEquals", "And", "Or", "MultiplyAssign", "DivideAssign", 
		"ModulusAssign", "PlusAssign", "MinusAssign", "LeftShiftArithmeticAssign", 
		"RightShiftArithmeticAssign", "RightShiftLogicalAssign", "BitAndAssign", 
		"BitXorAssign", "BitOrAssign", "LambdaStart", "Pipe", "Underscore", "BooleanLiteral", 
		"DecimalLiteral", "FloatLiteral", "StringLiteral", "StringFormat", "ID", 
		"Skip", "UnexpectedCharacter",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 10:
			this.LineBreak_action(_localctx, actionIndex);
			break;

		case 17:
			this.OpenBracket_action(_localctx, actionIndex);
			break;

		case 18:
			this.CloseBracket_action(_localctx, actionIndex);
			break;

		case 19:
			this.OpenParen_action(_localctx, actionIndex);
			break;

		case 20:
			this.CloseParen_action(_localctx, actionIndex);
			break;

		case 21:
			this.OpenBrace_action(_localctx, actionIndex);
			break;

		case 22:
			this.CloseBrace_action(_localctx, actionIndex);
			break;
		}
	}
	private LineBreak_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.handleLineBreak()
			break;
		}
	}
	private OpenBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened++;
			break;
		}
	}
	private CloseBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened--;
			break;
		}
	}
	private OpenParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened++;
			break;
		}
	}
	private CloseParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened--;
			break;
		}
	}
	private OpenBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened++;
			break;
		}
	}
	private CloseBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.opened--;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 10:
			return this.LineBreak_sempred(_localctx, predIndex);
		}
		return true;
	}
	private LineBreak_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02H\u01DB\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x03\x02\x03\x02\x03\x02\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n" +
		"\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x06\v\xC9\n\v\r\v\x0E\v\xCA" +
		"\x03\f\x03\f\x03\f\x05\f\xD0\n\f\x03\f\x03\f\x05\f\xD4\n\f\x03\f\x05\f" +
		"\xD7\n\f\x05\f\xD9\n\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03" +
		"\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03" +
		"\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03" +
		"\x16\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03" +
		"\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03" +
		"\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03" +
		"#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x03\'\x03\'\x03(\x03(\x03)\x03)\x03" +
		"*\x03*\x03*\x03+\x03+\x03+\x03,\x03,\x03,\x03-\x03-\x03-\x03.\x03.\x03" +
		".\x03/\x03/\x03/\x030\x030\x030\x031\x031\x031\x032\x032\x032\x033\x03" +
		"3\x033\x034\x034\x034\x035\x035\x035\x035\x036\x036\x036\x036\x037\x03" +
		"7\x037\x037\x037\x038\x038\x038\x039\x039\x039\x03:\x03:\x03:\x03;\x03" +
		";\x03<\x03<\x03=\x03=\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x03>\x05" +
		">\u016E\n>\x03?\x03?\x03@\x03@\x03@\x03@\x03A\x03A\x07A\u0178\nA\fA\x0E" +
		"A\u017B\vA\x03A\x03A\x03B\x03B\x03B\x03B\x07B\u0183\nB\fB\x0EB\u0186\v" +
		"B\x03B\x03B\x03C\x03C\x07C\u018C\nC\fC\x0EC\u018F\vC\x03C\x03C\x06C\u0193" +
		"\nC\rC\x0EC\u0194\x05C\u0197\nC\x03D\x03D\x03D\x03D\x05D\u019D\nD\x03" +
		"D\x03D\x03E\x03E\x03E\x03E\x03F\x06F\u01A6\nF\rF\x0EF\u01A7\x03G\x03G" +
		"\x03G\x03G\x07G\u01AE\nG\fG\x0EG\u01B1\vG\x03G\x03G\x03G\x03H\x03H\x03" +
		"H\x03H\x07H\u01BA\nH\fH\x0EH\u01BD\vH\x03I\x03I\x05I\u01C1\nI\x03I\x05" +
		"I\u01C4\nI\x03I\x03I\x05I\u01C8\nI\x03J\x06J\u01CB\nJ\rJ\x0EJ\u01CC\x03" +
		"J\x03J\x06J\u01D1\nJ\rJ\x0EJ\u01D2\x07J\u01D5\nJ\fJ\x0EJ\u01D8\vJ\x03" +
		"K\x03K\x03\u01AF\x02\x02L\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b" +
		"\v\x02\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F" +
		"\x19\x02\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02" +
		"\x16\'\x02\x17)\x02\x18+\x02\x19-\x02\x1A/\x02\x1B1\x02\x1C3\x02\x1D5" +
		"\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?\x02#A\x02$C\x02%E\x02&G\x02\'I\x02" +
		"(K\x02)M\x02*O\x02+Q\x02,S\x02-U\x02.W\x02/Y\x020[\x021]\x022_\x023a\x02" +
		"4c\x025e\x026g\x027i\x028k\x029m\x02:o\x02;q\x02<s\x02=u\x02>w\x02?y\x02" +
		"@{\x02A}\x02B\x7F\x02C\x81\x02D\x83\x02E\x85\x02F\x87\x02G\x89\x02H\x8B" +
		"\x02\x02\x8D\x02\x02\x8F\x02\x02\x91\x02\x02\x93\x02\x02\x95\x02\x02\x03" +
		"\x02\t\x04\x02\f\f\x0F\x0F\x03\x02))\x04\x02C\\c|\x06\x022;C\\aac|\x05" +
		"\x02C\\aac|\x04\x02\v\v\"\"\x03\x022;\x02\u01EB\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03" +
		"\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02" +
		"\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x02" +
		"7\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02" +
		"\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02" +
		"\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03" +
		"\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02" +
		"\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02" +
		"Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03\x02" +
		"\x02\x02\x02a\x03\x02\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02\x02" +
		"\x02g\x03\x02\x02\x02\x02i\x03\x02\x02\x02\x02k\x03\x02\x02\x02\x02m\x03" +
		"\x02\x02\x02\x02o\x03\x02\x02\x02\x02q\x03\x02\x02\x02\x02s\x03\x02\x02" +
		"\x02\x02u\x03\x02\x02\x02\x02w\x03\x02\x02\x02\x02y\x03\x02\x02\x02\x02" +
		"{\x03\x02\x02\x02\x02}\x03\x02\x02\x02\x02\x7F\x03\x02\x02\x02\x02\x81" +
		"\x03\x02\x02\x02\x02\x83\x03\x02\x02\x02\x02\x85\x03\x02\x02\x02\x02\x87" +
		"\x03\x02\x02\x02\x02\x89\x03\x02\x02\x02\x03\x97\x03\x02\x02\x02\x05\x9A" +
		"\x03\x02\x02\x02\x07\x9F\x03\x02\x02\x02\t\xA4\x03\x02\x02\x02\v\xA7\x03" +
		"\x02\x02\x02\r\xB0\x03\x02\x02\x02\x0F\xB6\x03\x02\x02\x02\x11\xBD\x03" +
		"\x02\x02\x02\x13\xC0\x03\x02\x02\x02\x15\xC4\x03\x02\x02\x02\x17\xD8\x03" +
		"\x02\x02\x02\x19\xDC\x03\x02\x02\x02\x1B\xE0\x03\x02\x02\x02\x1D\xE3\x03" +
		"\x02\x02\x02\x1F\xE7\x03\x02\x02\x02!\xEA\x03\x02\x02\x02#\xED\x03\x02" +
		"\x02\x02%\xF1\x03\x02\x02\x02\'\xF4\x03\x02\x02\x02)\xF7\x03\x02\x02\x02" +
		"+\xFA\x03\x02\x02\x02-\xFD\x03\x02\x02\x02/\u0100\x03\x02\x02\x021\u0103" +
		"\x03\x02\x02\x023\u0105\x03\x02\x02\x025\u0107\x03\x02\x02\x027\u0109" +
		"\x03\x02\x02\x029\u010B\x03\x02\x02\x02;\u010F\x03\x02\x02\x02=\u0111" +
		"\x03\x02\x02\x02?\u0113\x03\x02\x02\x02A\u0115\x03\x02\x02\x02C\u0117" +
		"\x03\x02\x02\x02E\u0119\x03\x02\x02\x02G\u011B\x03\x02\x02\x02I\u011D" +
		"\x03\x02\x02\x02K\u011F\x03\x02\x02\x02M\u0121\x03\x02\x02\x02O\u0123" +
		"\x03\x02\x02\x02Q\u0125\x03\x02\x02\x02S\u0127\x03\x02\x02\x02U\u012A" +
		"\x03\x02\x02\x02W\u012D\x03\x02\x02\x02Y\u0130\x03\x02\x02\x02[\u0133" +
		"\x03\x02\x02\x02]\u0136\x03\x02\x02\x02_\u0139\x03\x02\x02\x02a\u013C" +
		"\x03\x02\x02\x02c\u013F\x03\x02\x02\x02e\u0142\x03\x02\x02\x02g\u0145" +
		"\x03\x02\x02\x02i\u0148\x03\x02\x02\x02k\u014C\x03\x02\x02\x02m\u0150" +
		"\x03\x02\x02\x02o\u0155\x03\x02\x02\x02q\u0158\x03\x02\x02\x02s\u015B" +
		"\x03\x02\x02\x02u\u015E\x03\x02\x02\x02w\u0160\x03\x02\x02\x02y\u0162" +
		"\x03\x02\x02\x02{\u016D\x03\x02\x02\x02}\u016F\x03\x02\x02\x02\x7F\u0171" +
		"\x03\x02\x02\x02\x81\u0175\x03\x02\x02\x02\x83\u017E\x03\x02\x02\x02\x85" +
		"\u0196\x03\x02\x02\x02\x87\u019C\x03\x02\x02\x02\x89\u01A0\x03\x02\x02" +
		"\x02\x8B\u01A5\x03\x02\x02\x02\x8D\u01A9\x03\x02\x02\x02\x8F\u01B5\x03" +
		"\x02\x02\x02\x91\u01BE\x03\x02\x02\x02\x93\u01CA\x03\x02\x02\x02\x95\u01D9" +
		"\x03\x02\x02\x02\x97\x98\x07k\x02\x02\x98\x99\x07h\x02\x02\x99\x04\x03" +
		"\x02\x02\x02\x9A\x9B\x07g\x02\x02\x9B\x9C\x07n\x02\x02\x9C\x9D\x07u\x02" +
		"\x02\x9D\x9E\x07g\x02\x02\x9E\x06\x03\x02\x02\x02\x9F\xA0\x07n\x02\x02" +
		"\xA0\xA1\x07q\x02\x02\xA1\xA2\x07q\x02\x02\xA2\xA3\x07r\x02\x02\xA3\b" +
		"\x03\x02\x02\x02\xA4\xA5\x07k\x02\x02\xA5\xA6\x07p\x02\x02\xA6\n\x03\x02" +
		"\x02\x02\xA7\xA8\x07e\x02\x02\xA8\xA9\x07q\x02\x02\xA9\xAA\x07p\x02\x02" +
		"\xAA\xAB\x07v\x02\x02\xAB\xAC\x07k\x02\x02\xAC\xAD\x07p\x02\x02\xAD\xAE" +
		"\x07w\x02\x02\xAE\xAF\x07g\x02\x02\xAF\f\x03\x02\x02\x02\xB0\xB1\x07d" +
		"\x02\x02\xB1\xB2\x07t\x02\x02\xB2\xB3\x07g\x02\x02\xB3\xB4\x07c\x02\x02" +
		"\xB4\xB5\x07m\x02\x02\xB5\x0E\x03\x02\x02\x02\xB6\xB7\x07t\x02\x02\xB7" +
		"\xB8\x07g\x02\x02\xB8\xB9\x07v\x02\x02\xB9\xBA\x07w\x02\x02\xBA\xBB\x07" +
		"t\x02\x02\xBB\xBC\x07p\x02\x02\xBC\x10\x03\x02\x02\x02\xBD\xBE\x07c\x02" +
		"\x02\xBE\xBF\x07u\x02\x02\xBF\x12\x03\x02\x02\x02\xC0\xC1\x07x\x02\x02" +
		"\xC1\xC2\x07c\x02\x02\xC2\xC3\x07t\x02\x02\xC3\x14\x03\x02\x02\x02\xC4" +
		"\xC5\x07%\x02\x02\xC5\xC6\x07<\x02\x02\xC6\xC8\x03\x02\x02\x02\xC7\xC9" +
		"\n\x02\x02\x02\xC8\xC7\x03\x02\x02\x02\xC9\xCA\x03\x02\x02\x02\xCA\xC8" +
		"\x03\x02\x02\x02\xCA\xCB\x03\x02\x02\x02\xCB\x16\x03\x02\x02\x02\xCC\xCD" +
		"\x06\f\x02\x02\xCD\xD9\x05\x8BF\x02\xCE\xD0\x07\x0F\x02\x02\xCF\xCE\x03" +
		"\x02\x02\x02\xCF\xD0\x03\x02\x02\x02\xD0\xD1\x03\x02\x02\x02\xD1\xD4\x07" +
		"\f\x02\x02\xD2\xD4\x07\x0F\x02\x02\xD3\xCF\x03\x02\x02\x02\xD3\xD2\x03" +
		"\x02\x02\x02\xD4\xD6\x03\x02\x02\x02\xD5\xD7\x05\x8BF\x02\xD6\xD5\x03" +
		"\x02\x02\x02\xD6\xD7\x03\x02\x02\x02\xD7\xD9\x03\x02\x02\x02\xD8\xCC\x03" +
		"\x02\x02\x02\xD8\xD3\x03\x02\x02\x02\xD9\xDA\x03\x02\x02\x02\xDA\xDB\b" +
		"\f\x02\x02\xDB\x18\x03\x02\x02\x02\xDC\xDD\x07c\x02\x02\xDD\xDE\x07p\x02" +
		"\x02\xDE\xDF\x07f\x02\x02\xDF\x1A\x03\x02\x02\x02\xE0\xE1\x07q\x02\x02" +
		"\xE1\xE2\x07t\x02\x02\xE2\x1C\x03\x02\x02\x02\xE3\xE4\x07z\x02\x02\xE4" +
		"\xE5\x07q\x02\x02\xE5\xE6\x07t\x02\x02\xE6\x1E\x03\x02\x02\x02\xE7\xE8" +
		"\x07@\x02\x02\xE8\xE9\x07@\x02\x02\xE9 \x03\x02\x02\x02\xEA\xEB\x07>\x02" +
		"\x02\xEB\xEC\x07>\x02\x02\xEC\"\x03\x02\x02\x02\xED\xEE\x07@\x02\x02\xEE" +
		"\xEF\x07@\x02\x02\xEF\xF0\x07@\x02\x02\xF0$\x03\x02\x02\x02\xF1\xF2\x07" +
		"]\x02\x02\xF2\xF3\b\x13\x03\x02\xF3&\x03\x02\x02\x02\xF4\xF5\x07_\x02" +
		"\x02\xF5\xF6\b\x14\x04\x02\xF6(\x03\x02\x02\x02\xF7\xF8\x07*\x02\x02\xF8" +
		"\xF9\b\x15\x05\x02\xF9*\x03\x02\x02\x02\xFA\xFB\x07+\x02\x02\xFB\xFC\b" +
		"\x16\x06\x02\xFC,\x03\x02\x02\x02\xFD\xFE\x07}\x02\x02\xFE\xFF\b\x17\x07" +
		"\x02\xFF.\x03\x02\x02\x02\u0100\u0101\x07\x7F\x02\x02\u0101\u0102\b\x18" +
		"\b\x02\u01020\x03\x02\x02\x02\u0103\u0104\x07.\x02\x02\u01042\x03\x02" +
		"\x02\x02\u0105\u0106\x07?\x02\x02\u01064\x03\x02\x02\x02\u0107\u0108\x07" +
		"A\x02\x02\u01086\x03\x02\x02\x02\u0109\u010A\x07<\x02\x02\u010A8\x03\x02" +
		"\x02\x02\u010B\u010C\x070\x02\x02\u010C\u010D\x070\x02\x02\u010D\u010E" +
		"\x070\x02\x02\u010E:\x03\x02\x02\x02\u010F\u0110\x070\x02\x02\u0110<\x03" +
		"\x02\x02\x02\u0111\u0112\x07-\x02\x02\u0112>\x03\x02\x02\x02\u0113\u0114" +
		"\x07/\x02\x02\u0114@\x03\x02\x02\x02\u0115\u0116\x07\x80\x02\x02\u0116" +
		"B\x03\x02\x02\x02\u0117\u0118\x07#\x02\x02\u0118D\x03\x02\x02\x02\u0119" +
		"\u011A\x07,\x02\x02\u011AF\x03\x02\x02\x02\u011B\u011C\x071\x02\x02\u011C" +
		"H\x03\x02\x02\x02\u011D\u011E\x07\'\x02\x02\u011EJ\x03\x02\x02\x02\u011F" +
		"\u0120\x07`\x02\x02\u0120L\x03\x02\x02\x02\u0121\u0122\x07%\x02\x02\u0122" +
		"N\x03\x02\x02\x02\u0123\u0124\x07>\x02\x02\u0124P\x03\x02\x02\x02\u0125" +
		"\u0126\x07@\x02\x02\u0126R\x03\x02\x02\x02\u0127\u0128\x07>\x02\x02\u0128" +
		"\u0129\x07?\x02\x02\u0129T\x03\x02\x02\x02\u012A\u012B\x07@\x02\x02\u012B" +
		"\u012C\x07?\x02\x02\u012CV\x03\x02\x02\x02\u012D\u012E\x07?\x02\x02\u012E" +
		"\u012F\x07?\x02\x02\u012FX\x03\x02\x02\x02\u0130\u0131\x07#\x02\x02\u0131" +
		"\u0132\x07?\x02\x02\u0132Z\x03\x02\x02\x02\u0133\u0134\x07(\x02\x02\u0134" +
		"\u0135\x07(\x02\x02\u0135\\\x03\x02\x02\x02\u0136\u0137\x07~\x02\x02\u0137" +
		"\u0138\x07~\x02\x02\u0138^\x03\x02\x02\x02\u0139\u013A\x07,\x02\x02\u013A" +
		"\u013B\x07?\x02\x02\u013B`\x03\x02\x02\x02\u013C\u013D\x071\x02\x02\u013D" +
		"\u013E\x07?\x02\x02\u013Eb\x03\x02\x02\x02\u013F\u0140\x07\'\x02\x02\u0140" +
		"\u0141\x07?\x02\x02\u0141d\x03\x02\x02\x02\u0142\u0143\x07-\x02\x02\u0143" +
		"\u0144\x07?\x02\x02\u0144f\x03\x02\x02\x02\u0145\u0146\x07/\x02\x02\u0146" +
		"\u0147\x07?\x02\x02\u0147h\x03\x02\x02\x02\u0148\u0149\x07>\x02\x02\u0149" +
		"\u014A\x07>\x02\x02\u014A\u014B\x07?\x02\x02\u014Bj\x03\x02\x02\x02\u014C" +
		"\u014D\x07@\x02\x02\u014D\u014E\x07@\x02\x02\u014E\u014F\x07?\x02\x02" +
		"\u014Fl\x03\x02\x02\x02\u0150\u0151\x07@\x02\x02\u0151\u0152\x07@\x02" +
		"\x02\u0152\u0153\x07@\x02\x02\u0153\u0154\x07?\x02\x02\u0154n\x03\x02" +
		"\x02\x02\u0155\u0156\x07(\x02\x02\u0156\u0157\x07?\x02\x02\u0157p\x03" +
		"\x02\x02\x02\u0158\u0159\x07`\x02\x02\u0159\u015A\x07?\x02\x02\u015Ar" +
		"\x03\x02\x02\x02\u015B\u015C\x07~\x02\x02\u015C\u015D\x07?\x02\x02\u015D" +
		"t\x03\x02\x02\x02\u015E\u015F\x07^\x02\x02\u015Fv\x03\x02\x02\x02\u0160" +
		"\u0161\x07~\x02\x02\u0161x\x03\x02\x02\x02\u0162\u0163\x07a\x02\x02\u0163" +
		"z\x03\x02\x02\x02\u0164\u0165\x07v\x02\x02\u0165\u0166\x07t\x02\x02\u0166" +
		"\u0167\x07w\x02\x02\u0167\u016E\x07g\x02\x02\u0168\u0169\x07h\x02\x02" +
		"\u0169\u016A\x07c\x02\x02\u016A\u016B\x07n\x02\x02\u016B\u016C\x07u\x02" +
		"\x02\u016C\u016E\x07g\x02\x02\u016D\u0164\x03\x02\x02\x02\u016D\u0168" +
		"\x03\x02\x02\x02\u016E|\x03\x02\x02\x02\u016F\u0170\x05\x93J\x02\u0170" +
		"~\x03\x02\x02\x02\u0171\u0172\x05\x93J\x02\u0172\u0173\x070\x02\x02\u0173" +
		"\u0174\x05\x93J\x02\u0174\x80\x03\x02\x02\x02\u0175\u0179\x07)\x02\x02" +
		"\u0176\u0178\n\x03\x02\x02\u0177\u0176\x03\x02\x02\x02\u0178\u017B\x03" +
		"\x02\x02\x02\u0179\u0177\x03\x02\x02\x02\u0179\u017A\x03\x02\x02\x02\u017A" +
		"\u017C\x03\x02\x02\x02\u017B\u0179\x03\x02\x02\x02\u017C\u017D\x07)\x02" +
		"\x02\u017D\x82\x03\x02\x02\x02\u017E\u017F\x07h\x02\x02\u017F\u0180\x07" +
		")\x02\x02\u0180\u0184\x03\x02\x02\x02\u0181\u0183\n\x03\x02\x02\u0182" +
		"\u0181\x03\x02\x02\x02\u0183\u0186\x03\x02\x02\x02\u0184\u0182\x03\x02" +
		"\x02\x02\u0184\u0185\x03\x02\x02\x02\u0185\u0187\x03\x02\x02\x02\u0186" +
		"\u0184\x03\x02\x02\x02\u0187\u0188\x07)\x02\x02\u0188\x84\x03\x02\x02" +
		"\x02\u0189\u018D\t\x04\x02\x02\u018A\u018C\t\x05\x02\x02\u018B\u018A\x03" +
		"\x02\x02\x02\u018C\u018F\x03\x02\x02\x02\u018D\u018B\x03\x02\x02\x02\u018D" +
		"\u018E\x03\x02\x02\x02\u018E\u0197\x03\x02\x02\x02\u018F\u018D\x03\x02" +
		"\x02\x02\u0190\u0192\t\x06\x02\x02\u0191\u0193\t\x05\x02\x02\u0192\u0191" +
		"\x03\x02\x02\x02\u0193\u0194\x03\x02\x02\x02\u0194\u0192\x03\x02\x02\x02" +
		"\u0194\u0195\x03\x02\x02\x02\u0195\u0197\x03\x02\x02\x02\u0196\u0189\x03" +
		"\x02\x02\x02\u0196\u0190\x03\x02\x02\x02\u0197\x86\x03\x02\x02\x02\u0198" +
		"\u019D\x05\x8BF\x02\u0199\u019D\x05\x8FH\x02\u019A\u019D\x05\x8DG\x02" +
		"\u019B\u019D\x05\x91I\x02\u019C\u0198\x03\x02\x02\x02\u019C\u0199\x03" +
		"\x02\x02\x02\u019C\u019A\x03\x02\x02\x02\u019C\u019B\x03\x02\x02\x02\u019D" +
		"\u019E\x03\x02\x02\x02\u019E\u019F\bD\t\x02\u019F\x88\x03\x02\x02\x02" +
		"\u01A0\u01A1\v\x02\x02\x02\u01A1\u01A2\x03\x02\x02\x02\u01A2\u01A3\bE" +
		"\n\x02\u01A3\x8A\x03\x02\x02\x02\u01A4\u01A6\t\x07\x02\x02\u01A5\u01A4" +
		"\x03\x02\x02\x02\u01A6\u01A7\x03\x02\x02\x02\u01A7\u01A5\x03\x02\x02\x02" +
		"\u01A7\u01A8\x03\x02\x02\x02\u01A8\x8C\x03\x02\x02\x02\u01A9\u01AA\x07" +
		"1\x02\x02\u01AA\u01AB\x07,\x02\x02\u01AB\u01AF\x03\x02\x02\x02\u01AC\u01AE" +
		"\v\x02\x02\x02\u01AD\u01AC\x03\x02\x02\x02\u01AE\u01B1\x03\x02\x02\x02" +
		"\u01AF\u01B0\x03\x02\x02\x02\u01AF\u01AD\x03\x02\x02\x02\u01B0\u01B2\x03" +
		"\x02\x02\x02\u01B1\u01AF\x03\x02\x02\x02\u01B2\u01B3\x07,\x02\x02\u01B3" +
		"\u01B4\x071\x02\x02\u01B4\x8E\x03\x02\x02\x02\u01B5\u01B6\x071\x02\x02" +
		"\u01B6\u01B7\x071\x02\x02\u01B7\u01BB\x03\x02\x02\x02\u01B8\u01BA\n\x02" +
		"\x02\x02\u01B9\u01B8\x03\x02\x02\x02\u01BA\u01BD\x03\x02\x02\x02\u01BB" +
		"\u01B9\x03\x02\x02\x02\u01BB\u01BC\x03\x02\x02\x02\u01BC\x90\x03\x02\x02" +
		"\x02\u01BD\u01BB\x03\x02\x02\x02\u01BE\u01C0\x07^\x02\x02\u01BF\u01C1" +
		"\x05\x8BF\x02\u01C0\u01BF\x03\x02\x02\x02\u01C0\u01C1\x03\x02\x02\x02" +
		"\u01C1\u01C7\x03\x02\x02\x02\u01C2\u01C4\x07\x0F\x02\x02\u01C3\u01C2\x03" +
		"\x02\x02\x02\u01C3\u01C4\x03\x02\x02\x02\u01C4\u01C5\x03\x02\x02\x02\u01C5" +
		"\u01C8\x07\f\x02\x02\u01C6\u01C8\x07\x0F\x02\x02\u01C7\u01C3\x03\x02\x02" +
		"\x02\u01C7\u01C6\x03\x02\x02\x02\u01C8\x92\x03\x02\x02\x02\u01C9\u01CB" +
		"\x05\x95K\x02\u01CA\u01C9\x03\x02\x02\x02\u01CB\u01CC\x03\x02\x02\x02" +
		"\u01CC\u01CA\x03\x02\x02\x02\u01CC\u01CD\x03\x02\x02\x02\u01CD\u01D6\x03" +
		"\x02\x02\x02\u01CE\u01D0\x07a\x02\x02\u01CF\u01D1\x05\x95K\x02\u01D0\u01CF" +
		"\x03\x02\x02\x02\u01D1\u01D2\x03\x02\x02\x02\u01D2\u01D0\x03\x02\x02\x02" +
		"\u01D2\u01D3\x03\x02\x02\x02\u01D3\u01D5\x03\x02\x02\x02\u01D4\u01CE\x03" +
		"\x02\x02\x02\u01D5\u01D8\x03\x02\x02\x02\u01D6\u01D4\x03\x02\x02\x02\u01D6" +
		"\u01D7\x03\x02\x02\x02\u01D7\x94\x03\x02\x02\x02\u01D8\u01D6\x03\x02\x02" +
		"\x02\u01D9\u01DA\t\b\x02\x02\u01DA\x96\x03\x02\x02\x02\x18\x02\xCA\xCF" +
		"\xD3\xD6\xD8\u016D\u0179\u0184\u018D\u0194\u0196\u019C\u01A7\u01AF\u01BB" +
		"\u01C0\u01C3\u01C7\u01CC\u01D2\u01D6\v\x03\f\x02\x03\x13\x03\x03\x14\x04" +
		"\x03\x15\x05\x03\x16\x06\x03\x17\x07\x03\x18\b\b\x02\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

