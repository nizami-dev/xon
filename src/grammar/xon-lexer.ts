// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN = 3;
	public static readonly CLOSE = 4;
	public static readonly FLOAT = 5;
	public static readonly INTEGER = 6;
	public static readonly STRING = 7;
	public static readonly KEYWORD = 8;
	public static readonly OPERATOR = 9;
	public static readonly MEMBER_OPERATOR = 10;
	public static readonly COMMA = 11;
	public static readonly ASSIGN = 12;
	public static readonly COLON = 13;
	public static readonly ID = 14;
	public static readonly NL = 15;
	public static readonly LINE_COMMENT = 16;
	public static readonly WS = 17;
	public static readonly BLOCK_COMMENT = 18;
	public static readonly LINE_JOINING = 19;
	public static readonly UNEXPECTED = 20;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN", "CLOSE", "FLOAT", "INTEGER", "STRING", "KEYWORD", "OPERATOR", 
		"MEMBER_OPERATOR", "COMMA", "ASSIGN", "COLON", "ID", "NL", "LINE_COMMENT", 
		"WS", "BLOCK_COMMENT", "LINE_JOINING", "UNEXPECTED", "Radix", "DigitNumber", 
		"AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "','", "'='",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN", "CLOSE", "FLOAT", "INTEGER", "STRING", 
		"KEYWORD", "OPERATOR", "MEMBER_OPERATOR", "COMMA", "ASSIGN", "COLON", 
		"ID", "NL", "LINE_COMMENT", "WS", "BLOCK_COMMENT", "LINE_JOINING", "UNEXPECTED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_action(_localctx, actionIndex);
			break;

		case 12:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 5:
			return this.KEYWORD_sempred(_localctx, predIndex);

		case 6:
			return this.OPERATOR_sempred(_localctx, predIndex);
		}
		return true;
	}
	private KEYWORD_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return  this.keywords.includes(this.text) ;
		}
		return true;
	}
	private OPERATOR_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 1:
			return  this.isOperator() ;
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x16\xCA\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x03\x02\x03" +
		"\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04=\n\x04\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x05\x05C\n\x05\x03\x06\x03\x06\x03\x06\x03\x06\x07\x06I\n" +
		"\x06\f\x06\x0E\x06L\v\x06\x03\x06\x03\x06\x03\x07\x06\x07Q\n\x07\r\x07" +
		"\x0E\x07R\x03\x07\x03\x07\x03\b\x06\bX\n\b\r\b\x0E\bY\x03\b\x03\b\x03" +
		"\t\x03\t\x03\t\x05\ta\n\t\x03\n\x03\n\x03\v\x03\v\x03\f\x03\f\x05\fi\n" +
		"\f\x03\f\x03\f\x03\f\x05\fn\n\f\x03\r\x03\r\x07\rr\n\r\f\r\x0E\ru\v\r" +
		"\x03\x0E\x03\x0E\x07\x0Ey\n\x0E\f\x0E\x0E\x0E|\v\x0E\x06\x0E~\n\x0E\r" +
		"\x0E\x0E\x0E\x7F\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x07\x0F" +
		"\x88\n\x0F\f\x0F\x0E\x0F\x8B\v\x0F\x03\x10\x06\x10\x8E\n\x10\r\x10\x0E" +
		"\x10\x8F\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x07\x11" +
		"\x99\n\x11\f\x11\x0E\x11\x9C\v\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03" +
		"\x11\x03\x12\x03\x12\x07\x12\xA5\n\x12\f\x12\x0E\x12\xA8\v\x12\x03\x12" +
		"\x05\x12\xAB\n\x12\x03\x12\x03\x12\x05\x12\xAF\n\x12\x03\x12\x03\x12\x03" +
		"\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x05\x14\xB9\n\x14\x03\x14" +
		"\x03\x14\x03\x15\x03\x15\x07\x15\xBF\n\x15\f\x15\x0E\x15\xC2\v\x15\x03" +
		"\x16\x03\x16\x07\x16\xC6\n\x16\f\x16\x0E\x16\xC9\v\x16\x05RY\x9A\x02\x02" +
		"\x17\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02" +
		"\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11" +
		"\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x02)\x02\x02" +
		"+\x02\x02\x03\x02\x0E\x05\x02**]]}}\x05\x02++__\x7F\x7F\x03\x02))\n\x02" +
		"))^^ddhhppttvvxx\x05\x02C\\aac|\x06\x022;C\\aac|\x04\x02\f\f\x0F\x0F\x04" +
		"\x02\v\v\"\"\x03\x022;\x04\x02ZZzz\x04\x022;aa\x05\x022;C\\c|\x02\xDE" +
		"\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02" +
		"\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02" +
		"\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02" +
		"\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02" +
		"\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02" +
		"!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x03-\x03\x02" +
		"\x02\x02\x050\x03\x02\x02\x02\x07<\x03\x02\x02\x02\tB\x03\x02\x02\x02" +
		"\vD\x03\x02\x02\x02\rP\x03\x02\x02\x02\x0FW\x03\x02\x02\x02\x11`\x03\x02" +
		"\x02\x02\x13b\x03\x02\x02\x02\x15d\x03\x02\x02\x02\x17h\x03\x02\x02\x02" +
		"\x19o\x03\x02\x02\x02\x1B}\x03\x02\x02\x02\x1D\x83\x03\x02\x02\x02\x1F" +
		"\x8D\x03\x02\x02\x02!\x93\x03\x02\x02\x02#\xA2\x03\x02\x02\x02%\xB2\x03" +
		"\x02\x02\x02\'\xB6\x03\x02\x02\x02)\xBC\x03\x02\x02\x02+\xC3\x03\x02\x02" +
		"\x02-.\t\x02\x02\x02./\b\x02\x02\x02/\x04\x03\x02\x02\x0201\t\x03\x02" +
		"\x0212\b\x03\x03\x022\x06\x03\x02\x02\x0234\x05\'\x14\x0245\x05+\x16\x02" +
		"56\x070\x02\x0267\x05+\x16\x027=\x03\x02\x02\x0289\x05)\x15\x029:\x07" +
		"0\x02\x02:;\x05)\x15\x02;=\x03\x02\x02\x02<3\x03\x02\x02\x02<8\x03\x02" +
		"\x02\x02=\b\x03\x02\x02\x02>?\x05\'\x14\x02?@\x05+\x16\x02@C\x03\x02\x02" +
		"\x02AC\x05)\x15\x02B>\x03\x02\x02\x02BA\x03\x02\x02\x02C\n\x03\x02\x02" +
		"\x02DJ\x07)\x02\x02EI\n\x04\x02\x02FG\x07^\x02\x02GI\t\x05\x02\x02HE\x03" +
		"\x02\x02\x02HF\x03\x02\x02\x02IL\x03\x02\x02\x02JH\x03\x02\x02\x02JK\x03" +
		"\x02\x02\x02KM\x03\x02\x02\x02LJ\x03\x02\x02\x02MN\x07)\x02\x02N\f\x03" +
		"\x02\x02\x02OQ\v\x02\x02\x02PO\x03\x02\x02\x02QR\x03\x02\x02\x02RS\x03" +
		"\x02\x02\x02RP\x03\x02\x02\x02ST\x03\x02\x02\x02TU\x06\x07\x02\x02U\x0E" +
		"\x03\x02\x02\x02VX\v\x02\x02\x02WV\x03\x02\x02\x02XY\x03\x02\x02\x02Y" +
		"Z\x03\x02\x02\x02YW\x03\x02\x02\x02Z[\x03\x02\x02\x02[\\\x06\b\x03\x02" +
		"\\\x10\x03\x02\x02\x02]a\x070\x02\x02^_\x07<\x02\x02_a\x07<\x02\x02`]" +
		"\x03\x02\x02\x02`^\x03\x02\x02\x02a\x12\x03\x02\x02\x02bc\x07.\x02\x02" +
		"c\x14\x03\x02\x02\x02de\x07?\x02\x02e\x16\x03\x02\x02\x02fi\x05\x1B\x0E" +
		"\x02gi\x05\x1F\x10\x02hf\x03\x02\x02\x02hg\x03\x02\x02\x02hi\x03\x02\x02" +
		"\x02ij\x03\x02\x02\x02jm\x07<\x02\x02kn\x05\x1B\x0E\x02ln\x05\x1F\x10" +
		"\x02mk\x03\x02\x02\x02ml\x03\x02\x02\x02mn\x03\x02\x02\x02n\x18\x03\x02" +
		"\x02\x02os\t\x06\x02\x02pr\t\x07\x02\x02qp\x03\x02\x02\x02ru\x03\x02\x02" +
		"\x02sq\x03\x02\x02\x02st\x03\x02\x02\x02t\x1A\x03\x02\x02\x02us\x03\x02" +
		"\x02\x02vz\t\b\x02\x02wy\x05\x1F\x10\x02xw\x03\x02\x02\x02y|\x03\x02\x02" +
		"\x02zx\x03\x02\x02\x02z{\x03\x02\x02\x02{~\x03\x02\x02\x02|z\x03\x02\x02" +
		"\x02}v\x03\x02\x02\x02~\x7F\x03\x02\x02\x02\x7F}\x03\x02\x02\x02\x7F\x80" +
		"\x03\x02\x02\x02\x80\x81\x03\x02\x02\x02\x81\x82\b\x0E\x04\x02\x82\x1C" +
		"\x03\x02\x02\x02\x83\x84\x07/\x02\x02\x84\x85\x07/\x02\x02\x85\x89\x03" +
		"\x02\x02\x02\x86\x88\n\b\x02\x02\x87\x86\x03\x02\x02\x02\x88\x8B\x03\x02" +
		"\x02\x02\x89\x87\x03\x02\x02\x02\x89\x8A\x03\x02\x02\x02\x8A\x1E\x03\x02" +
		"\x02\x02\x8B\x89\x03\x02\x02\x02\x8C\x8E\t\t\x02\x02\x8D\x8C\x03\x02\x02" +
		"\x02\x8E\x8F\x03\x02\x02\x02\x8F\x8D\x03\x02\x02\x02\x8F\x90\x03\x02\x02" +
		"\x02\x90\x91\x03\x02\x02\x02\x91\x92\b\x10\x05\x02\x92 \x03\x02\x02\x02" +
		"\x93\x94\x071\x02\x02\x94\x95\x07,\x02\x02\x95\x9A\x03\x02\x02\x02\x96" +
		"\x99\x05!\x11\x02\x97\x99\v\x02\x02\x02\x98\x96\x03\x02\x02\x02\x98\x97" +
		"\x03\x02\x02\x02\x99\x9C\x03\x02\x02\x02\x9A\x9B\x03\x02\x02\x02\x9A\x98" +
		"\x03\x02\x02\x02\x9B\x9D\x03\x02\x02\x02\x9C\x9A\x03\x02\x02\x02\x9D\x9E" +
		"\x07,\x02\x02\x9E\x9F\x071\x02\x02\x9F\xA0\x03\x02\x02\x02\xA0\xA1\b\x11" +
		"\x06\x02\xA1\"\x03\x02\x02\x02\xA2\xA6\x07^\x02\x02\xA3\xA5\t\t\x02\x02" +
		"\xA4\xA3\x03\x02\x02\x02\xA5\xA8\x03\x02\x02\x02\xA6\xA4\x03\x02\x02\x02" +
		"\xA6\xA7\x03\x02\x02\x02\xA7\xAE\x03\x02\x02\x02\xA8\xA6\x03\x02\x02\x02" +
		"\xA9\xAB\x07\x0F\x02\x02\xAA\xA9\x03\x02\x02\x02\xAA\xAB\x03\x02\x02\x02" +
		"\xAB\xAC\x03\x02\x02\x02\xAC\xAF\x07\f\x02\x02\xAD\xAF\x04\x0E\x0F\x02" +
		"\xAE\xAA\x03\x02\x02\x02\xAE\xAD\x03\x02\x02\x02\xAF\xB0\x03\x02\x02\x02" +
		"\xB0\xB1\b\x12\x07\x02\xB1$\x03\x02\x02\x02\xB2\xB3\v\x02\x02\x02\xB3" +
		"\xB4\x03\x02\x02\x02\xB4\xB5\b\x13\b\x02\xB5&\x03\x02\x02\x02\xB6\xB8" +
		"\t\n\x02\x02\xB7\xB9\t\n\x02\x02\xB8\xB7\x03\x02\x02\x02\xB8\xB9\x03\x02" +
		"\x02\x02\xB9\xBA\x03\x02\x02\x02\xBA\xBB\t\v\x02\x02\xBB(\x03\x02\x02" +
		"\x02\xBC\xC0\t\n\x02\x02\xBD\xBF\t\f\x02\x02\xBE\xBD\x03\x02\x02\x02\xBF" +
		"\xC2\x03\x02\x02\x02\xC0\xBE\x03\x02\x02\x02\xC0\xC1\x03\x02\x02\x02\xC1" +
		"*\x03\x02\x02\x02\xC2\xC0\x03\x02\x02\x02\xC3\xC7\t\r\x02\x02\xC4\xC6" +
		"\t\x07\x02\x02\xC5\xC4\x03\x02\x02\x02\xC6\xC9\x03\x02\x02\x02\xC7\xC5" +
		"\x03\x02\x02\x02\xC7\xC8\x03\x02\x02\x02\xC8,\x03\x02\x02\x02\xC9\xC7" +
		"\x03\x02\x02\x02\x1B\x02<BHJRY`hmsz\x7F\x89\x8F\x98\x9A\xA6\xAA\xAE\xB8" +
		"\xBE\xC0\xC5\xC7\t\x03\x02\x02\x03\x03\x03\x03\x0E\x04\x02\x05\x02\x02" +
		"\x06\x02\b\x02\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

