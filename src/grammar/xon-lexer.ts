// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly IS = 3;
	public static readonly AS = 4;
	public static readonly IF = 5;
	public static readonly ELSE = 6;
	public static readonly ELSE_IF = 7;
	public static readonly LOOP = 8;
	public static readonly IN = 9;
	public static readonly BREAK = 10;
	public static readonly RETURN = 11;
	public static readonly OPEN_BRACKET = 12;
	public static readonly CLOSE_BRACKET = 13;
	public static readonly OPEN_PAREN = 14;
	public static readonly CLOSE_PAREN = 15;
	public static readonly OPEN_BRACE = 16;
	public static readonly CLOSE_BRACE = 17;
	public static readonly COMMA = 18;
	public static readonly ASSIGN = 19;
	public static readonly QUESTION = 20;
	public static readonly COLON = 21;
	public static readonly DOT = 22;
	public static readonly PLUS = 23;
	public static readonly MINUS = 24;
	public static readonly EXCLAMATION = 25;
	public static readonly ASTERISK = 26;
	public static readonly SLASH = 27;
	public static readonly MODULO = 28;
	public static readonly CARET = 29;
	public static readonly HASH = 30;
	public static readonly LESS_THAN = 31;
	public static readonly MORE_THAN = 32;
	public static readonly AMPERSAND = 33;
	public static readonly PIPE = 34;
	public static readonly TILDE = 35;
	public static readonly AD = 36;
	public static readonly UNDERSCORE = 37;
	public static readonly LAMBDA_START = 38;
	public static readonly BOOLEAN_LITERAL = 39;
	public static readonly FLOAT_LITERAL = 40;
	public static readonly INTEGER_LITERAL = 41;
	public static readonly CHAR_LITERAL = 42;
	public static readonly STRING_LITERAL = 43;
	public static readonly STRING_FORMAT_START = 44;
	public static readonly STRING_FORMAT_MIDDLE = 45;
	public static readonly STRING_FORMAT_END = 46;
	public static readonly ID = 47;
	public static readonly PREPROCESSOR = 48;
	public static readonly NL = 49;
	public static readonly WS = 50;
	public static readonly COMMENT = 51;
	public static readonly UNEXPECTED_CHARACTER = 52;
	public static readonly ERROR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"IS", "AS", "IF", "ELSE", "ELSE_IF", "LOOP", "IN", "BREAK", "RETURN", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "COMMA", "ASSIGN", "QUESTION", "COLON", "DOT", "PLUS", 
		"MINUS", "EXCLAMATION", "ASTERISK", "SLASH", "MODULO", "CARET", "HASH", 
		"LESS_THAN", "MORE_THAN", "AMPERSAND", "PIPE", "TILDE", "AD", "UNDERSCORE", 
		"LAMBDA_START", "BOOLEAN_LITERAL", "FLOAT_LITERAL", "INTEGER_LITERAL", 
		"CHAR_LITERAL", "STRING_LITERAL", "STRING_FORMAT_START", "STRING_FORMAT_MIDDLE", 
		"STRING_FORMAT_END", "ID", "PREPROCESSOR", "NL", "WS", "COMMENT", "UNEXPECTED_CHARACTER", 
		"DigitNumber", "AlphabetNumber", "StringCharacter",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'is'", "'as'", "'if'", "'else'", "'elif'", 
		"'loop'", "'in'", "'break'", "'return'", "'['", "']'", "'('", "')'", "'{'", 
		"'}'", "','", "'='", "'?'", "':'", "'.'", "'+'", "'-'", "'!'", "'*'", 
		"'/'", "'%'", "'^'", "'#'", "'<'", "'>'", "'&'", "'|'", "'~'", "'@'", 
		"'_'", "'\\'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "IS", "AS", "IF", "ELSE", "ELSE_IF", "LOOP", 
		"IN", "BREAK", "RETURN", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "COMMA", "ASSIGN", "QUESTION", 
		"COLON", "DOT", "PLUS", "MINUS", "EXCLAMATION", "ASTERISK", "SLASH", "MODULO", 
		"CARET", "HASH", "LESS_THAN", "MORE_THAN", "AMPERSAND", "PIPE", "TILDE", 
		"AD", "UNDERSCORE", "LAMBDA_START", "BOOLEAN_LITERAL", "FLOAT_LITERAL", 
		"INTEGER_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", "STRING_FORMAT_START", 
		"STRING_FORMAT_MIDDLE", "STRING_FORMAT_END", "ID", "PREPROCESSOR", "NL", 
		"WS", "COMMENT", "UNEXPECTED_CHARACTER",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 9:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 10:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 11:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 12:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 13:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 14:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 46:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 46:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x026\u0177\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03" +
		"\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03" +
		"\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03" +
		"\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03" +
		"\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03" +
		"\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03" +
		"\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03" +
		"\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03#\x03" +
		"#\x03$\x03$\x03%\x03%\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x05" +
		"&\xDB\n&\x03\'\x03\'\x05\'\xDF\n\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03\'" +
		"\x03\'\x03\'\x03\'\x05\'\xEA\n\'\x03(\x03(\x05(\xEE\n(\x03(\x03(\x03(" +
		"\x05(\xF3\n(\x03)\x03)\x03)\x03)\x03*\x03*\x07*\xFB\n*\f*\x0E*\xFE\v*" +
		"\x03*\x03*\x03+\x03+\x07+\u0104\n+\f+\x0E+\u0107\v+\x03+\x03+\x03,\x03" +
		",\x07,\u010D\n,\f,\x0E,\u0110\v,\x03,\x03,\x03-\x03-\x07-\u0116\n-\f-" +
		"\x0E-\u0119\v-\x03-\x03-\x03.\x06.\u011E\n.\r.\x0E.\u011F\x03/\x03/\x03" +
		"/\x03/\x07/\u0126\n/\f/\x0E/\u0129\v/\x03/\x03/\x030\x030\x030\x050\u0130" +
		"\n0\x030\x030\x050\u0134\n0\x030\x050\u0137\n0\x050\u0139\n0\x030\x03" +
		"0\x031\x061\u013E\n1\r1\x0E1\u013F\x031\x031\x032\x032\x032\x032\x072" +
		"\u0148\n2\f2\x0E2\u014B\v2\x032\x032\x033\x033\x033\x033\x034\x064\u0154" +
		"\n4\r4\x0E4\u0155\x034\x034\x064\u015A\n4\r4\x0E4\u015B\x074\u015E\n4" +
		"\f4\x0E4\u0161\v4\x035\x065\u0164\n5\r5\x0E5\u0165\x035\x035\x065\u016A" +
		"\n5\r5\x0E5\u016B\x075\u016E\n5\f5\x0E5\u0171\v5\x036\x036\x036\x056\u0176" +
		"\n6\x03\u0127\x02\x027\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02" +
		"\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02" +
		"\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'" +
		"\x02\x17)\x02\x18+\x02\x19-\x02\x1A/\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E" +
		"7\x02\x1F9\x02 ;\x02!=\x02\"?\x02#A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02" +
		")M\x02*O\x02+Q\x02,S\x02-U\x02.W\x02/Y\x020[\x021]\x022_\x023a\x024c\x02" +
		"5e\x026g\x02\x02i\x02\x02k\x02\x02\x03\x02\n\x03\x022;\x03\x02))\x05\x02" +
		"C\\aac|\x04\x02\v\v\"\"\x04\x02\f\f\x0F\x0F\x05\x022;C\\c|\x04\x02$$}" +
		"}\v\x02$$^^ddhhppttvvxx}}\x02\u018B\x02\x03\x03\x02\x02\x02\x02\x05\x03" +
		"\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02" +
		"\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02" +
		"\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02" +
		"\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02" +
		"\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02" +
		"\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02" +
		"+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02" +
		"\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02" +
		"\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03" +
		"\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02" +
		"\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02" +
		"M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02" +
		"\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02" +
		"\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03" +
		"\x02\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02\x02\x03m\x03\x02\x02" +
		"\x02\x05p\x03\x02\x02\x02\x07s\x03\x02\x02\x02\tv\x03\x02\x02\x02\v{\x03" +
		"\x02\x02\x02\r\x80\x03\x02\x02\x02\x0F\x85\x03\x02\x02\x02\x11\x88\x03" +
		"\x02\x02\x02\x13\x8E\x03\x02\x02\x02\x15\x95\x03\x02\x02\x02\x17\x98\x03" +
		"\x02\x02\x02\x19\x9B\x03\x02\x02\x02\x1B\x9E\x03\x02\x02\x02\x1D\xA1\x03" +
		"\x02\x02\x02\x1F\xA4\x03\x02\x02\x02!\xA7\x03\x02\x02\x02#\xA9\x03\x02" +
		"\x02\x02%\xAB\x03\x02\x02\x02\'\xAD\x03\x02\x02\x02)\xAF\x03\x02\x02\x02" +
		"+\xB1\x03\x02\x02\x02-\xB3\x03\x02\x02\x02/\xB5\x03\x02\x02\x021\xB7\x03" +
		"\x02\x02\x023\xB9\x03\x02\x02\x025\xBB\x03\x02\x02\x027\xBD\x03\x02\x02" +
		"\x029\xBF\x03\x02\x02\x02;\xC1\x03\x02\x02\x02=\xC3\x03\x02\x02\x02?\xC5" +
		"\x03\x02\x02\x02A\xC7\x03\x02\x02\x02C\xC9\x03\x02\x02\x02E\xCB\x03\x02" +
		"\x02\x02G\xCD\x03\x02\x02\x02I\xCF\x03\x02\x02\x02K\xDA\x03\x02\x02\x02" +
		"M\xE9\x03\x02\x02\x02O\xF2\x03\x02\x02\x02Q\xF4\x03\x02\x02\x02S\xF8\x03" +
		"\x02\x02\x02U\u0101\x03\x02\x02\x02W\u010A\x03\x02\x02\x02Y\u0113\x03" +
		"\x02\x02\x02[\u011D\x03\x02\x02\x02]\u0121\x03\x02\x02\x02_\u0138\x03" +
		"\x02\x02\x02a\u013D\x03\x02\x02\x02c\u0143\x03\x02\x02\x02e\u014E\x03" +
		"\x02\x02\x02g\u0153\x03\x02\x02\x02i\u0163\x03\x02\x02\x02k\u0175\x03" +
		"\x02\x02\x02mn\x07k\x02\x02no\x07u\x02\x02o\x04\x03\x02\x02\x02pq\x07" +
		"c\x02\x02qr\x07u\x02\x02r\x06\x03\x02\x02\x02st\x07k\x02\x02tu\x07h\x02" +
		"\x02u\b\x03\x02\x02\x02vw\x07g\x02\x02wx\x07n\x02\x02xy\x07u\x02\x02y" +
		"z\x07g\x02\x02z\n\x03\x02\x02\x02{|\x07g\x02\x02|}\x07n\x02\x02}~\x07" +
		"k\x02\x02~\x7F\x07h\x02\x02\x7F\f\x03\x02\x02\x02\x80\x81\x07n\x02\x02" +
		"\x81\x82\x07q\x02\x02\x82\x83\x07q\x02\x02\x83\x84\x07r\x02\x02\x84\x0E" +
		"\x03\x02\x02\x02\x85\x86\x07k\x02\x02\x86\x87\x07p\x02\x02\x87\x10\x03" +
		"\x02\x02\x02\x88\x89\x07d\x02\x02\x89\x8A\x07t\x02\x02\x8A\x8B\x07g\x02" +
		"\x02\x8B\x8C\x07c\x02\x02\x8C\x8D\x07m\x02\x02\x8D\x12\x03\x02\x02\x02" +
		"\x8E\x8F\x07t\x02\x02\x8F\x90\x07g\x02\x02\x90\x91\x07v\x02\x02\x91\x92" +
		"\x07w\x02\x02\x92\x93\x07t\x02\x02\x93\x94\x07p\x02\x02\x94\x14\x03\x02" +
		"\x02\x02\x95\x96\x07]\x02\x02\x96\x97\b\v\x02\x02\x97\x16\x03\x02\x02" +
		"\x02\x98\x99\x07_\x02\x02\x99\x9A\b\f\x03\x02\x9A\x18\x03\x02\x02\x02" +
		"\x9B\x9C\x07*\x02\x02\x9C\x9D\b\r\x04\x02\x9D\x1A\x03\x02\x02\x02\x9E" +
		"\x9F\x07+\x02\x02\x9F\xA0\b\x0E\x05\x02\xA0\x1C\x03\x02\x02\x02\xA1\xA2" +
		"\x07}\x02\x02\xA2\xA3\b\x0F\x06\x02\xA3\x1E\x03\x02\x02\x02\xA4\xA5\x07" +
		"\x7F\x02\x02\xA5\xA6\b\x10\x07\x02\xA6 \x03\x02\x02\x02\xA7\xA8\x07.\x02" +
		"\x02\xA8\"\x03\x02\x02\x02\xA9\xAA\x07?\x02\x02\xAA$\x03\x02\x02\x02\xAB" +
		"\xAC\x07A\x02\x02\xAC&\x03\x02\x02\x02\xAD\xAE\x07<\x02\x02\xAE(\x03\x02" +
		"\x02\x02\xAF\xB0\x070\x02\x02\xB0*\x03\x02\x02\x02\xB1\xB2\x07-\x02\x02" +
		"\xB2,\x03\x02\x02\x02\xB3\xB4\x07/\x02\x02\xB4.\x03\x02\x02\x02\xB5\xB6" +
		"\x07#\x02\x02\xB60\x03\x02\x02\x02\xB7\xB8\x07,\x02\x02\xB82\x03\x02\x02" +
		"\x02\xB9\xBA\x071\x02\x02\xBA4\x03\x02\x02\x02\xBB\xBC\x07\'\x02\x02\xBC" +
		"6\x03\x02\x02\x02\xBD\xBE\x07`\x02\x02\xBE8\x03\x02\x02\x02\xBF\xC0\x07" +
		"%\x02\x02\xC0:\x03\x02\x02\x02\xC1\xC2\x07>\x02\x02\xC2<\x03\x02\x02\x02" +
		"\xC3\xC4\x07@\x02\x02\xC4>\x03\x02\x02\x02\xC5\xC6\x07(\x02\x02\xC6@\x03" +
		"\x02\x02\x02\xC7\xC8\x07~\x02\x02\xC8B\x03\x02\x02\x02\xC9\xCA\x07\x80" +
		"\x02\x02\xCAD\x03\x02\x02\x02\xCB\xCC\x07B\x02\x02\xCCF\x03\x02\x02\x02" +
		"\xCD\xCE\x07a\x02\x02\xCEH\x03\x02\x02\x02\xCF\xD0\x07^\x02\x02\xD0J\x03" +
		"\x02\x02\x02\xD1\xD2\x07v\x02\x02\xD2\xD3\x07t\x02\x02\xD3\xD4\x07w\x02" +
		"\x02\xD4\xDB\x07g\x02\x02\xD5\xD6\x07h\x02\x02\xD6\xD7\x07c\x02\x02\xD7" +
		"\xD8\x07n\x02\x02\xD8\xD9\x07u\x02\x02\xD9\xDB\x07g\x02\x02\xDA\xD1\x03" +
		"\x02\x02\x02\xDA\xD5\x03\x02\x02\x02\xDBL\x03\x02\x02\x02\xDC\xDE\t\x02" +
		"\x02\x02\xDD\xDF\t\x02\x02\x02\xDE\xDD\x03\x02\x02\x02\xDE\xDF\x03\x02" +
		"\x02\x02\xDF\xE0\x03\x02\x02\x02\xE0\xE1\x07z\x02\x02\xE1\xE2\x05i5\x02" +
		"\xE2\xE3\x070\x02\x02\xE3\xE4\x05i5\x02\xE4\xEA\x03\x02\x02\x02\xE5\xE6" +
		"\x05g4\x02\xE6\xE7\x070\x02\x02\xE7\xE8\x05g4\x02\xE8\xEA\x03\x02\x02" +
		"\x02\xE9\xDC\x03\x02\x02\x02\xE9\xE5\x03\x02\x02\x02\xEAN\x03\x02\x02" +
		"\x02\xEB\xED\t\x02\x02\x02\xEC\xEE\t\x02\x02\x02\xED\xEC\x03\x02\x02\x02" +
		"\xED\xEE\x03\x02\x02\x02\xEE\xEF\x03\x02\x02\x02\xEF\xF0\x07z\x02\x02" +
		"\xF0\xF3\x05i5\x02\xF1\xF3\x05g4\x02\xF2\xEB\x03\x02\x02\x02\xF2\xF1\x03" +
		"\x02\x02\x02\xF3P\x03\x02\x02\x02\xF4\xF5\x07)\x02\x02\xF5\xF6\n\x03\x02" +
		"\x02\xF6\xF7\x07)\x02\x02\xF7R\x03\x02\x02\x02\xF8\xFC\x07$\x02\x02\xF9" +
		"\xFB\x05k6\x02\xFA\xF9\x03\x02\x02\x02\xFB\xFE\x03\x02\x02\x02\xFC\xFA" +
		"\x03\x02\x02\x02\xFC\xFD\x03\x02\x02\x02\xFD\xFF\x03\x02\x02\x02\xFE\xFC" +
		"\x03\x02\x02\x02\xFF\u0100\x07$\x02\x02\u0100T\x03\x02\x02\x02\u0101\u0105" +
		"\x07$\x02\x02\u0102\u0104\x05k6\x02\u0103\u0102\x03\x02\x02\x02\u0104" +
		"\u0107\x03\x02\x02\x02\u0105\u0103\x03\x02\x02\x02\u0105\u0106\x03\x02" +
		"\x02\x02\u0106\u0108\x03\x02\x02\x02\u0107\u0105\x03\x02\x02\x02\u0108" +
		"\u0109\x07}\x02\x02\u0109V\x03\x02\x02\x02\u010A\u010E\x07\x7F\x02\x02" +
		"\u010B\u010D\x05k6\x02\u010C\u010B\x03\x02\x02\x02\u010D\u0110\x03\x02" +
		"\x02\x02\u010E\u010C\x03\x02\x02\x02\u010E\u010F\x03\x02\x02\x02\u010F" +
		"\u0111\x03\x02\x02\x02\u0110\u010E\x03\x02\x02\x02\u0111\u0112\x07}\x02" +
		"\x02\u0112X\x03\x02\x02\x02\u0113\u0117\x07\x7F\x02\x02\u0114\u0116\x05" +
		"k6\x02\u0115\u0114\x03\x02\x02\x02\u0116\u0119\x03\x02\x02\x02\u0117\u0115" +
		"\x03\x02\x02\x02\u0117\u0118\x03\x02\x02\x02\u0118\u011A\x03\x02\x02\x02" +
		"\u0119\u0117\x03\x02\x02\x02\u011A\u011B\x07$\x02\x02\u011BZ\x03\x02\x02" +
		"\x02\u011C\u011E\t\x04\x02\x02\u011D\u011C\x03\x02\x02\x02\u011E\u011F" +
		"\x03\x02\x02\x02\u011F\u011D\x03\x02\x02\x02\u011F\u0120\x03\x02\x02\x02" +
		"\u0120\\\x03\x02\x02\x02\u0121\u0122\x07%\x02\x02\u0122\u0123\x07}\x02" +
		"\x02\u0123\u0127\x03\x02\x02\x02\u0124\u0126\v\x02\x02\x02\u0125\u0124" +
		"\x03\x02\x02\x02\u0126\u0129\x03\x02\x02\x02\u0127\u0128\x03\x02\x02\x02" +
		"\u0127\u0125\x03\x02\x02\x02\u0128\u012A\x03\x02\x02\x02\u0129\u0127\x03" +
		"\x02\x02\x02\u012A\u012B\x07\x7F\x02\x02\u012B^\x03\x02\x02\x02\u012C" +
		"\u012D\x060\x02\x02\u012D\u0139\x05a1\x02\u012E\u0130\x07\x0F\x02\x02" +
		"\u012F\u012E\x03\x02\x02\x02\u012F\u0130\x03\x02\x02\x02\u0130\u0131\x03" +
		"\x02\x02\x02\u0131\u0134\x07\f\x02\x02\u0132\u0134\x07\x0F\x02\x02\u0133" +
		"\u012F\x03\x02\x02\x02\u0133\u0132\x03\x02\x02\x02\u0134\u0136\x03\x02" +
		"\x02\x02\u0135\u0137\x05a1\x02\u0136\u0135\x03\x02\x02\x02\u0136\u0137" +
		"\x03\x02\x02\x02\u0137\u0139\x03\x02\x02\x02\u0138\u012C\x03\x02\x02\x02" +
		"\u0138\u0133\x03\x02\x02\x02\u0139\u013A\x03\x02\x02\x02\u013A\u013B\b" +
		"0\b\x02\u013B`\x03\x02\x02\x02\u013C\u013E\t\x05\x02\x02\u013D\u013C\x03" +
		"\x02\x02\x02\u013E\u013F\x03\x02\x02\x02\u013F\u013D\x03\x02\x02\x02\u013F" +
		"\u0140\x03\x02\x02\x02\u0140\u0141\x03\x02\x02\x02\u0141\u0142\b1\t\x02" +
		"\u0142b\x03\x02\x02\x02\u0143\u0144\x071\x02\x02\u0144\u0145\x071\x02" +
		"\x02\u0145\u0149\x03\x02\x02\x02\u0146\u0148\n\x06\x02\x02\u0147\u0146" +
		"\x03\x02\x02\x02\u0148\u014B\x03\x02\x02\x02\u0149\u0147\x03\x02\x02\x02" +
		"\u0149\u014A\x03\x02\x02\x02\u014A\u014C\x03\x02\x02\x02\u014B\u0149\x03" +
		"\x02\x02\x02\u014C\u014D\b2\t\x02\u014Dd\x03\x02\x02\x02\u014E\u014F\v" +
		"\x02\x02\x02\u014F\u0150\x03\x02\x02\x02\u0150\u0151\b3\n\x02\u0151f\x03" +
		"\x02\x02\x02\u0152\u0154\t\x02\x02\x02\u0153\u0152\x03\x02\x02\x02\u0154" +
		"\u0155\x03\x02\x02\x02\u0155\u0153\x03\x02\x02\x02\u0155\u0156\x03\x02" +
		"\x02\x02\u0156\u015F\x03\x02\x02\x02\u0157\u0159\x07a\x02\x02\u0158\u015A" +
		"\t\x02\x02\x02\u0159\u0158\x03\x02\x02\x02\u015A\u015B\x03\x02\x02\x02" +
		"\u015B\u0159\x03\x02\x02\x02\u015B\u015C\x03\x02\x02\x02\u015C\u015E\x03" +
		"\x02\x02\x02\u015D\u0157\x03\x02\x02\x02\u015E\u0161\x03\x02\x02\x02\u015F" +
		"\u015D\x03\x02\x02\x02\u015F\u0160\x03\x02\x02\x02\u0160h\x03\x02\x02" +
		"\x02\u0161\u015F\x03\x02\x02\x02\u0162\u0164\t\x07\x02\x02\u0163\u0162" +
		"\x03\x02\x02\x02\u0164\u0165\x03\x02\x02\x02\u0165\u0163\x03\x02\x02\x02" +
		"\u0165\u0166\x03\x02\x02\x02\u0166\u016F\x03\x02\x02\x02\u0167\u0169\x07" +
		"a\x02\x02\u0168\u016A\t\x07\x02\x02\u0169\u0168\x03\x02\x02\x02\u016A" +
		"\u016B\x03\x02\x02\x02\u016B\u0169\x03\x02\x02\x02\u016B\u016C\x03\x02" +
		"\x02\x02\u016C\u016E\x03\x02\x02\x02\u016D\u0167\x03\x02\x02\x02\u016E" +
		"\u0171\x03\x02\x02\x02\u016F\u016D\x03\x02\x02\x02\u016F\u0170\x03\x02" +
		"\x02\x02\u0170j\x03\x02\x02\x02\u0171\u016F\x03\x02\x02\x02\u0172\u0176" +
		"\n\b\x02\x02\u0173\u0174\x07^\x02\x02\u0174\u0176\t\t\x02\x02\u0175\u0172" +
		"\x03\x02\x02\x02\u0175\u0173\x03\x02\x02\x02\u0176l\x03\x02\x02\x02\x1B" +
		"\x02\xDA\xDE\xE9\xED\xF2\xFC\u0105\u010E\u0117\u011F\u0127\u012F\u0133" +
		"\u0136\u0138\u013F\u0149\u0155\u015B\u015F\u0165\u016B\u016F\u0175\v\x03" +
		"\v\x02\x03\f\x03\x03\r\x04\x03\x0E\x05\x03\x0F\x06\x03\x10\x07\x030\b" +
		"\b\x02\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

