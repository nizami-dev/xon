// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly Is = 3;
	public static readonly As = 4;
	public static readonly If = 5;
	public static readonly Else = 6;
	public static readonly ElseIf = 7;
	public static readonly Loop = 8;
	public static readonly In = 9;
	public static readonly Break = 10;
	public static readonly Return = 11;
	public static readonly Operator = 12;
	public static readonly Preprocessor = 13;
	public static readonly LineBreak = 14;
	public static readonly OpenBracket = 15;
	public static readonly CloseBracket = 16;
	public static readonly OpenParen = 17;
	public static readonly CloseParen = 18;
	public static readonly OpenBrace = 19;
	public static readonly CloseBrace = 20;
	public static readonly Comma = 21;
	public static readonly Assign = 22;
	public static readonly Question = 23;
	public static readonly Colon = 24;
	public static readonly Dot = 25;
	public static readonly Plus = 26;
	public static readonly Minus = 27;
	public static readonly Exclamation = 28;
	public static readonly Asterisk = 29;
	public static readonly Slash = 30;
	public static readonly Modulo = 31;
	public static readonly Caret = 32;
	public static readonly Hash = 33;
	public static readonly LessThan = 34;
	public static readonly MoreThan = 35;
	public static readonly Ampersand = 36;
	public static readonly Pipe = 37;
	public static readonly Tilde = 38;
	public static readonly Ad = 39;
	public static readonly Underscore = 40;
	public static readonly LambdaStart = 41;
	public static readonly BooleanLiteral = 42;
	public static readonly FloatLiteral = 43;
	public static readonly IntegerLiteral = 44;
	public static readonly CharLiteral = 45;
	public static readonly StringLiteral = 46;
	public static readonly StringFormatStart = 47;
	public static readonly StringFormatMiddle = 48;
	public static readonly StringFormatEnd = 49;
	public static readonly ID = 50;
	public static readonly Spaces = 51;
	public static readonly Comment = 52;
	public static readonly LineJoining = 53;
	public static readonly UnexpectedCharacter = 54;
	public static readonly ERROR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"Is", "As", "If", "Else", "ElseIf", "Loop", "In", "Break", "Return", "Operator", 
		"Preprocessor", "LineBreak", "OpenBracket", "CloseBracket", "OpenParen", 
		"CloseParen", "OpenBrace", "CloseBrace", "Comma", "Assign", "Question", 
		"Colon", "Dot", "Plus", "Minus", "Exclamation", "Asterisk", "Slash", "Modulo", 
		"Caret", "Hash", "LessThan", "MoreThan", "Ampersand", "Pipe", "Tilde", 
		"Ad", "Underscore", "LambdaStart", "BooleanLiteral", "FloatLiteral", "IntegerLiteral", 
		"CharLiteral", "StringLiteral", "StringFormatStart", "StringFormatMiddle", 
		"StringFormatEnd", "ID", "Spaces", "Comment", "LineJoining", "UnexpectedCharacter", 
		"SPACES", "DIGIT_NUMBER", "ALPHABET_NUMBER", "STRING_CHARACTER",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'is'", "'as'", "'if'", "'else'", "'elif'", 
		"'loop'", "'in'", "'break'", "'return'", "'operator'", undefined, undefined, 
		"'['", "']'", "'('", "')'", "'{'", "'}'", "','", "'='", "'?'", "':'", 
		"'.'", "'+'", "'-'", "'!'", "'*'", "'/'", "'%'", "'^'", "'#'", "'<'", 
		"'>'", "'&'", "'|'", "'~'", "'@'", "'_'", "'\\'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "Is", "As", "If", "Else", "ElseIf", "Loop", 
		"In", "Break", "Return", "Operator", "Preprocessor", "LineBreak", "OpenBracket", 
		"CloseBracket", "OpenParen", "CloseParen", "OpenBrace", "CloseBrace", 
		"Comma", "Assign", "Question", "Colon", "Dot", "Plus", "Minus", "Exclamation", 
		"Asterisk", "Slash", "Modulo", "Caret", "Hash", "LessThan", "MoreThan", 
		"Ampersand", "Pipe", "Tilde", "Ad", "Underscore", "LambdaStart", "BooleanLiteral", 
		"FloatLiteral", "IntegerLiteral", "CharLiteral", "StringLiteral", "StringFormatStart", 
		"StringFormatMiddle", "StringFormatEnd", "ID", "Spaces", "Comment", "LineJoining", 
		"UnexpectedCharacter",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 11:
			this.LineBreak_action(_localctx, actionIndex);
			break;

		case 12:
			this.OpenBracket_action(_localctx, actionIndex);
			break;

		case 13:
			this.CloseBracket_action(_localctx, actionIndex);
			break;

		case 14:
			this.OpenParen_action(_localctx, actionIndex);
			break;

		case 15:
			this.CloseParen_action(_localctx, actionIndex);
			break;

		case 16:
			this.OpenBrace_action(_localctx, actionIndex);
			break;

		case 17:
			this.CloseBrace_action(_localctx, actionIndex);
			break;
		}
	}
	private LineBreak_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.handleLineBreak()
			break;
		}
	}
	private OpenBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened++;
			break;
		}
	}
	private CloseBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened--;
			break;
		}
	}
	private OpenParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened++;
			break;
		}
	}
	private CloseParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened--;
			break;
		}
	}
	private OpenBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened++;
			break;
		}
	}
	private CloseBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.opened--;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 11:
			return this.LineBreak_sempred(_localctx, predIndex);
		}
		return true;
	}
	private LineBreak_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x028\u0193\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x03\x02\x03\x02\x03\x02\x03" +
		"\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x07\f\xA9\n\f\f\f\x0E" +
		"\f\xAC\v\f\x03\f\x03\f\x03\r\x03\r\x03\r\x05\r\xB3\n\r\x03\r\x03\r\x05" +
		"\r\xB7\n\r\x03\r\x05\r\xBA\n\r\x05\r\xBC\n\r\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14" +
		"\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19" +
		"\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D" +
		"\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03#" +
		"\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x03\'\x03\'\x03(\x03(\x03)\x03)\x03" +
		")\x03)\x03)\x03)\x03)\x03)\x03)\x05)\u0105\n)\x03*\x03*\x05*\u0109\n*" +
		"\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x03*\x05*\u0114\n*\x03+\x03+" +
		"\x05+\u0118\n+\x03+\x03+\x03+\x05+\u011D\n+\x03,\x03,\x03,\x03,\x03-\x03" +
		"-\x07-\u0125\n-\f-\x0E-\u0128\v-\x03-\x03-\x03.\x03.\x07.\u012E\n.\f." +
		"\x0E.\u0131\v.\x03.\x03.\x03/\x03/\x07/\u0137\n/\f/\x0E/\u013A\v/\x03" +
		"/\x03/\x030\x030\x070\u0140\n0\f0\x0E0\u0143\v0\x030\x030\x031\x061\u0148" +
		"\n1\r1\x0E1\u0149\x032\x032\x032\x032\x033\x033\x033\x033\x073\u0154\n" +
		"3\f3\x0E3\u0157\v3\x033\x033\x034\x034\x034\x054\u015E\n4\x034\x034\x05" +
		"4\u0162\n4\x034\x034\x035\x035\x035\x035\x036\x066\u016B\n6\r6\x0E6\u016C" +
		"\x037\x067\u0170\n7\r7\x0E7\u0171\x037\x037\x067\u0176\n7\r7\x0E7\u0177" +
		"\x077\u017A\n7\f7\x0E7\u017D\v7\x038\x068\u0180\n8\r8\x0E8\u0181\x038" +
		"\x038\x068\u0186\n8\r8\x0E8\u0187\x078\u018A\n8\f8\x0E8\u018D\v8\x039" +
		"\x039\x039\x059\u0192\n9\x03\xAA\x02\x02:\x03\x02\x05\x05\x02\x06\x07" +
		"\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r\x15\x02" +
		"\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13!\x02" +
		"\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19-\x02\x1A/\x02\x1B1" +
		"\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?\x02#A\x02$C\x02" +
		"%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+Q\x02,S\x02-U\x02.W\x02/Y\x020[" +
		"\x021]\x022_\x023a\x024c\x025e\x026g\x027i\x028k\x02\x02m\x02\x02o\x02" +
		"\x02q\x02\x02\x03\x02\n\x03\x022;\x03\x02))\x05\x02C\\aac|\x04\x02\f\f" +
		"\x0F\x0F\x04\x02\v\v\"\"\x04\x022;c|\x04\x02$$}}\v\x02$$^^ddhhppttvvx" +
		"x}}\x02\u01A8\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07" +
		"\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03" +
		"\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03" +
		"\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03" +
		"\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03" +
		"\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02" +
		"\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02" +
		"-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02" +
		"\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02" +
		"\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03" +
		"\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02" +
		"\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02" +
		"O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02" +
		"\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02" +
		"\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03" +
		"\x02\x02\x02\x02e\x03\x02\x02\x02\x02g\x03\x02\x02\x02\x02i\x03\x02\x02" +
		"\x02\x03s\x03\x02\x02\x02\x05v\x03\x02\x02\x02\x07y\x03\x02\x02\x02\t" +
		"|\x03\x02\x02\x02\v\x81\x03\x02\x02\x02\r\x86\x03\x02\x02\x02\x0F\x8B" +
		"\x03\x02\x02\x02\x11\x8E\x03\x02\x02\x02\x13\x94\x03\x02\x02\x02\x15\x9B" +
		"\x03\x02\x02\x02\x17\xA4\x03\x02\x02\x02\x19\xBB\x03\x02\x02\x02\x1B\xBF" +
		"\x03\x02\x02\x02\x1D\xC2\x03\x02\x02\x02\x1F\xC5\x03\x02\x02\x02!\xC8" +
		"\x03\x02\x02\x02#\xCB\x03\x02\x02\x02%\xCE\x03\x02\x02\x02\'\xD1\x03\x02" +
		"\x02\x02)\xD3\x03\x02\x02\x02+\xD5\x03\x02\x02\x02-\xD7\x03\x02\x02\x02" +
		"/\xD9\x03\x02\x02\x021\xDB\x03\x02\x02\x023\xDD\x03\x02\x02\x025\xDF\x03" +
		"\x02\x02\x027\xE1\x03\x02\x02\x029\xE3\x03\x02\x02\x02;\xE5\x03\x02\x02" +
		"\x02=\xE7\x03\x02\x02\x02?\xE9\x03\x02\x02\x02A\xEB\x03\x02\x02\x02C\xED" +
		"\x03\x02\x02\x02E\xEF\x03\x02\x02\x02G\xF1\x03\x02\x02\x02I\xF3\x03\x02" +
		"\x02\x02K\xF5\x03\x02\x02\x02M\xF7\x03\x02\x02\x02O\xF9\x03\x02\x02\x02" +
		"Q\u0104\x03\x02\x02\x02S\u0113\x03\x02\x02\x02U\u011C\x03\x02\x02\x02" +
		"W\u011E\x03\x02\x02\x02Y\u0122\x03\x02\x02\x02[\u012B\x03\x02\x02\x02" +
		"]\u0134\x03\x02\x02\x02_\u013D\x03\x02\x02\x02a\u0147\x03\x02\x02\x02" +
		"c\u014B\x03\x02\x02\x02e\u014F\x03\x02\x02\x02g\u015A\x03\x02\x02\x02" +
		"i\u0165\x03\x02\x02\x02k\u016A\x03\x02\x02\x02m\u016F\x03\x02\x02\x02" +
		"o\u017F\x03\x02\x02\x02q\u0191\x03\x02\x02\x02st\x07k\x02\x02tu\x07u\x02" +
		"\x02u\x04\x03\x02\x02\x02vw\x07c\x02\x02wx\x07u\x02\x02x\x06\x03\x02\x02" +
		"\x02yz\x07k\x02\x02z{\x07h\x02\x02{\b\x03\x02\x02\x02|}\x07g\x02\x02}" +
		"~\x07n\x02\x02~\x7F\x07u\x02\x02\x7F\x80\x07g\x02\x02\x80\n\x03\x02\x02" +
		"\x02\x81\x82\x07g\x02\x02\x82\x83\x07n\x02\x02\x83\x84\x07k\x02\x02\x84" +
		"\x85\x07h\x02\x02\x85\f\x03\x02\x02\x02\x86\x87\x07n\x02\x02\x87\x88\x07" +
		"q\x02\x02\x88\x89\x07q\x02\x02\x89\x8A\x07r\x02\x02\x8A\x0E\x03\x02\x02" +
		"\x02\x8B\x8C\x07k\x02\x02\x8C\x8D\x07p\x02\x02\x8D\x10\x03\x02\x02\x02" +
		"\x8E\x8F\x07d\x02\x02\x8F\x90\x07t\x02\x02\x90\x91\x07g\x02\x02\x91\x92" +
		"\x07c\x02\x02\x92\x93\x07m\x02\x02\x93\x12\x03\x02\x02\x02\x94\x95\x07" +
		"t\x02\x02\x95\x96\x07g\x02\x02\x96\x97\x07v\x02\x02\x97\x98\x07w\x02\x02" +
		"\x98\x99\x07t\x02\x02\x99\x9A\x07p\x02\x02\x9A\x14\x03\x02\x02\x02\x9B" +
		"\x9C\x07q\x02\x02\x9C\x9D\x07r\x02\x02\x9D\x9E\x07g\x02\x02\x9E\x9F\x07" +
		"t\x02\x02\x9F\xA0\x07c\x02\x02\xA0\xA1\x07v\x02\x02\xA1\xA2\x07q\x02\x02" +
		"\xA2\xA3\x07t\x02\x02\xA3\x16\x03\x02\x02\x02\xA4\xA5\x07%\x02\x02\xA5" +
		"\xA6\x07}\x02\x02\xA6\xAA\x03\x02\x02\x02\xA7\xA9\v\x02\x02\x02\xA8\xA7" +
		"\x03\x02\x02\x02\xA9\xAC\x03\x02\x02\x02\xAA\xAB\x03\x02\x02\x02\xAA\xA8" +
		"\x03\x02\x02\x02\xAB\xAD\x03\x02\x02\x02\xAC\xAA\x03\x02\x02\x02\xAD\xAE" +
		"\x07\x7F\x02\x02\xAE\x18\x03\x02\x02\x02\xAF\xB0\x06\r\x02\x02\xB0\xBC" +
		"\x05k6\x02\xB1\xB3\x07\x0F\x02\x02\xB2\xB1\x03\x02\x02\x02\xB2\xB3\x03" +
		"\x02\x02\x02\xB3\xB4\x03\x02\x02\x02\xB4\xB7\x07\f\x02\x02\xB5\xB7\x07" +
		"\x0F\x02\x02\xB6\xB2\x03\x02\x02\x02\xB6\xB5\x03\x02\x02\x02\xB7\xB9\x03" +
		"\x02\x02\x02\xB8\xBA\x05k6\x02\xB9\xB8\x03\x02\x02\x02\xB9\xBA\x03\x02" +
		"\x02\x02\xBA\xBC\x03\x02\x02\x02\xBB\xAF\x03\x02\x02\x02\xBB\xB6\x03\x02" +
		"\x02\x02\xBC\xBD\x03\x02\x02\x02\xBD\xBE\b\r\x02\x02\xBE\x1A\x03\x02\x02" +
		"\x02\xBF\xC0\x07]\x02\x02\xC0\xC1\b\x0E\x03\x02\xC1\x1C\x03\x02\x02\x02" +
		"\xC2\xC3\x07_\x02\x02\xC3\xC4\b\x0F\x04\x02\xC4\x1E\x03\x02\x02\x02\xC5" +
		"\xC6\x07*\x02\x02\xC6\xC7\b\x10\x05\x02\xC7 \x03\x02\x02\x02\xC8\xC9\x07" +
		"+\x02\x02\xC9\xCA\b\x11\x06\x02\xCA\"\x03\x02\x02\x02\xCB\xCC\x07}\x02" +
		"\x02\xCC\xCD\b\x12\x07\x02\xCD$\x03\x02\x02\x02\xCE\xCF\x07\x7F\x02\x02" +
		"\xCF\xD0\b\x13\b\x02\xD0&\x03\x02\x02\x02\xD1\xD2\x07.\x02\x02\xD2(\x03" +
		"\x02\x02\x02\xD3\xD4\x07?\x02\x02\xD4*\x03\x02\x02\x02\xD5\xD6\x07A\x02" +
		"\x02\xD6,\x03\x02\x02\x02\xD7\xD8\x07<\x02\x02\xD8.\x03\x02\x02\x02\xD9" +
		"\xDA\x070\x02\x02\xDA0\x03\x02\x02\x02\xDB\xDC\x07-\x02\x02\xDC2\x03\x02" +
		"\x02\x02\xDD\xDE\x07/\x02\x02\xDE4\x03\x02\x02\x02\xDF\xE0\x07#\x02\x02" +
		"\xE06\x03\x02\x02\x02\xE1\xE2\x07,\x02\x02\xE28\x03\x02\x02\x02\xE3\xE4" +
		"\x071\x02\x02\xE4:\x03\x02\x02\x02\xE5\xE6\x07\'\x02\x02\xE6<\x03\x02" +
		"\x02\x02\xE7\xE8\x07`\x02\x02\xE8>\x03\x02\x02\x02\xE9\xEA\x07%\x02\x02" +
		"\xEA@\x03\x02\x02\x02\xEB\xEC\x07>\x02\x02\xECB\x03\x02\x02\x02\xED\xEE" +
		"\x07@\x02\x02\xEED\x03\x02\x02\x02\xEF\xF0\x07(\x02\x02\xF0F\x03\x02\x02" +
		"\x02\xF1\xF2\x07~\x02\x02\xF2H\x03\x02\x02\x02\xF3\xF4\x07\x80\x02\x02" +
		"\xF4J\x03\x02\x02\x02\xF5\xF6\x07B\x02\x02\xF6L\x03\x02\x02\x02\xF7\xF8" +
		"\x07a\x02\x02\xF8N\x03\x02\x02\x02\xF9\xFA\x07^\x02\x02\xFAP\x03\x02\x02" +
		"\x02\xFB\xFC\x07v\x02\x02\xFC\xFD\x07t\x02\x02\xFD\xFE\x07w\x02\x02\xFE" +
		"\u0105\x07g\x02\x02\xFF\u0100\x07h\x02\x02\u0100\u0101\x07c\x02\x02\u0101" +
		"\u0102\x07n\x02\x02\u0102\u0103\x07u\x02\x02\u0103\u0105\x07g\x02\x02" +
		"\u0104\xFB\x03\x02\x02\x02\u0104\xFF\x03\x02\x02\x02\u0105R\x03\x02\x02" +
		"\x02\u0106\u0108\t\x02\x02\x02\u0107\u0109\t\x02\x02\x02\u0108\u0107\x03" +
		"\x02\x02\x02\u0108\u0109\x03\x02\x02\x02\u0109\u010A\x03\x02\x02\x02\u010A" +
		"\u010B\x07z\x02\x02\u010B\u010C\x05o8\x02\u010C\u010D\x070\x02\x02\u010D" +
		"\u010E\x05o8\x02\u010E\u0114\x03\x02\x02\x02\u010F\u0110\x05m7\x02\u0110" +
		"\u0111\x070\x02\x02\u0111\u0112\x05m7\x02\u0112\u0114\x03\x02\x02\x02" +
		"\u0113\u0106\x03\x02\x02\x02\u0113\u010F\x03\x02\x02\x02\u0114T\x03\x02" +
		"\x02\x02\u0115\u0117\t\x02\x02\x02\u0116\u0118\t\x02\x02\x02\u0117\u0116" +
		"\x03\x02\x02\x02\u0117\u0118\x03\x02\x02\x02\u0118\u0119\x03\x02\x02\x02" +
		"\u0119\u011A\x07z\x02\x02\u011A\u011D\x05o8\x02\u011B\u011D\x05m7\x02" +
		"\u011C\u0115\x03\x02\x02\x02\u011C\u011B\x03\x02\x02\x02\u011DV\x03\x02" +
		"\x02\x02\u011E\u011F\x07)\x02\x02\u011F\u0120\n\x03\x02\x02\u0120\u0121" +
		"\x07)\x02\x02\u0121X\x03\x02\x02\x02\u0122\u0126\x07$\x02\x02\u0123\u0125" +
		"\x05q9\x02\u0124\u0123\x03\x02\x02\x02\u0125\u0128\x03\x02\x02\x02\u0126" +
		"\u0124\x03\x02\x02\x02\u0126\u0127\x03\x02\x02\x02\u0127\u0129\x03\x02" +
		"\x02\x02\u0128\u0126\x03\x02\x02\x02\u0129\u012A\x07$\x02\x02\u012AZ\x03" +
		"\x02\x02\x02\u012B\u012F\x07$\x02\x02\u012C\u012E\x05q9\x02\u012D\u012C" +
		"\x03\x02\x02\x02\u012E\u0131\x03\x02\x02\x02\u012F\u012D\x03\x02\x02\x02" +
		"\u012F\u0130\x03\x02\x02\x02\u0130\u0132\x03\x02\x02\x02\u0131\u012F\x03" +
		"\x02\x02\x02\u0132\u0133\x07}\x02\x02\u0133\\\x03\x02\x02\x02\u0134\u0138" +
		"\x07\x7F\x02\x02\u0135\u0137\x05q9\x02\u0136\u0135\x03\x02\x02\x02\u0137" +
		"\u013A\x03\x02\x02\x02\u0138\u0136\x03\x02\x02\x02\u0138\u0139\x03\x02" +
		"\x02\x02\u0139\u013B\x03\x02\x02\x02\u013A\u0138\x03\x02\x02\x02\u013B" +
		"\u013C\x07}\x02\x02\u013C^\x03\x02\x02\x02\u013D\u0141\x07\x7F\x02\x02" +
		"\u013E\u0140\x05q9\x02\u013F\u013E\x03\x02\x02\x02\u0140\u0143\x03\x02" +
		"\x02\x02\u0141\u013F\x03\x02\x02\x02\u0141\u0142\x03\x02\x02\x02\u0142" +
		"\u0144\x03\x02\x02\x02\u0143\u0141\x03\x02\x02\x02\u0144\u0145\x07$\x02" +
		"\x02\u0145`\x03\x02\x02\x02\u0146\u0148\t\x04\x02\x02\u0147\u0146\x03" +
		"\x02\x02\x02\u0148\u0149\x03\x02\x02\x02\u0149\u0147\x03\x02\x02\x02\u0149" +
		"\u014A\x03\x02\x02\x02\u014Ab\x03\x02\x02\x02\u014B\u014C\x05k6\x02\u014C" +
		"\u014D\x03\x02\x02\x02\u014D\u014E\b2\t\x02\u014Ed\x03\x02\x02\x02\u014F" +
		"\u0150\x071\x02\x02\u0150\u0151\x071\x02\x02\u0151\u0155\x03\x02\x02\x02" +
		"\u0152\u0154\n\x05\x02\x02\u0153\u0152\x03\x02\x02\x02\u0154\u0157\x03" +
		"\x02\x02\x02\u0155\u0153\x03\x02\x02\x02\u0155\u0156\x03\x02\x02\x02\u0156" +
		"\u0158\x03\x02\x02\x02\u0157\u0155\x03\x02\x02\x02\u0158\u0159\b3\t\x02" +
		"\u0159f\x03\x02\x02\x02\u015A\u015B\x07^\x02\x02\u015B\u0161\x05k6\x02" +
		"\u015C\u015E\x07\x0F\x02\x02\u015D\u015C\x03\x02\x02\x02\u015D\u015E\x03" +
		"\x02\x02\x02\u015E\u015F\x03\x02\x02\x02\u015F\u0162\x07\f\x02\x02\u0160" +
		"\u0162\x07\x0F\x02\x02\u0161\u015D\x03\x02\x02\x02\u0161\u0160\x03\x02" +
		"\x02\x02\u0162\u0163\x03\x02\x02\x02\u0163\u0164\b4\t\x02\u0164h\x03\x02" +
		"\x02\x02\u0165\u0166\v\x02\x02\x02\u0166\u0167\x03\x02\x02\x02\u0167\u0168" +
		"\b5\n\x02\u0168j\x03\x02\x02\x02\u0169\u016B\t\x06\x02\x02\u016A\u0169" +
		"\x03\x02\x02\x02\u016B\u016C\x03\x02\x02\x02\u016C\u016A\x03\x02\x02\x02" +
		"\u016C\u016D\x03\x02\x02\x02\u016Dl\x03\x02\x02\x02\u016E\u0170\t\x02" +
		"\x02\x02\u016F\u016E\x03\x02\x02\x02\u0170\u0171\x03\x02\x02\x02\u0171" +
		"\u016F\x03\x02\x02\x02\u0171\u0172\x03\x02\x02\x02\u0172\u017B\x03\x02" +
		"\x02\x02\u0173\u0175\x07a\x02\x02\u0174\u0176\t\x02\x02\x02\u0175\u0174" +
		"\x03\x02\x02\x02\u0176\u0177\x03\x02\x02\x02\u0177\u0175\x03\x02\x02\x02" +
		"\u0177\u0178\x03\x02\x02\x02\u0178\u017A\x03\x02\x02\x02\u0179\u0173\x03" +
		"\x02\x02\x02\u017A\u017D\x03\x02\x02\x02\u017B\u0179\x03\x02\x02\x02\u017B" +
		"\u017C\x03\x02\x02\x02\u017Cn\x03\x02\x02\x02\u017D\u017B\x03\x02\x02" +
		"\x02\u017E\u0180\t\x07\x02\x02\u017F\u017E\x03\x02\x02\x02\u0180\u0181" +
		"\x03\x02\x02\x02\u0181\u017F\x03\x02\x02\x02\u0181\u0182\x03\x02\x02\x02" +
		"\u0182\u018B\x03\x02\x02\x02\u0183\u0185\x07a\x02\x02\u0184\u0186\t\x07" +
		"\x02\x02\u0185\u0184\x03\x02\x02\x02\u0186\u0187\x03\x02\x02\x02\u0187" +
		"\u0185\x03\x02\x02\x02\u0187\u0188\x03\x02\x02\x02\u0188\u018A\x03\x02" +
		"\x02\x02\u0189\u0183\x03\x02\x02\x02\u018A\u018D\x03\x02\x02\x02\u018B" +
		"\u0189\x03\x02\x02\x02\u018B\u018C\x03\x02\x02\x02\u018Cp\x03\x02\x02" +
		"\x02\u018D\u018B\x03\x02\x02\x02\u018E\u0192\n\b\x02\x02\u018F\u0190\x07" +
		"^\x02\x02\u0190\u0192\t\t\x02\x02\u0191\u018E\x03\x02\x02\x02\u0191\u018F" +
		"\x03\x02\x02\x02\u0192r\x03\x02\x02\x02\x1D\x02\xAA\xB2\xB6\xB9\xBB\u0104" +
		"\u0108\u0113\u0117\u011C\u0126\u012F\u0138\u0141\u0149\u0155\u015D\u0161" +
		"\u016C\u0171\u0177\u017B\u0181\u0187\u018B\u0191\v\x03\r\x02\x03\x0E\x03" +
		"\x03\x0F\x04\x03\x10\x05\x03\x11\x06\x03\x12\x07\x03\x13\b\b\x02\x02\x02" +
		"\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

