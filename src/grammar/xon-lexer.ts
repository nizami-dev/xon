// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN_BRACKET = 3;
	public static readonly CLOSE_BRACKET = 4;
	public static readonly OPEN_PAREN = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_BRACE = 7;
	public static readonly CLOSE_BRACE = 8;
	public static readonly ACTUAL = 9;
	public static readonly BREAK = 10;
	public static readonly CONTINUE = 11;
	public static readonly DO = 12;
	public static readonly ELSE = 13;
	public static readonly EXPECT = 14;
	public static readonly EXPORT = 15;
	public static readonly FOR = 16;
	public static readonly IF = 17;
	public static readonly IMPORT = 18;
	public static readonly OPERATOR = 19;
	public static readonly RETURN = 20;
	public static readonly WHILE = 21;
	public static readonly AND = 22;
	public static readonly AS = 23;
	public static readonly IS = 24;
	public static readonly OR = 25;
	public static readonly ASSIGN = 26;
	public static readonly COMMA = 27;
	public static readonly COLON = 28;
	public static readonly QUESTION = 29;
	public static readonly DOT = 30;
	public static readonly LAMBDA = 31;
	public static readonly FLOAT_LITERAL = 32;
	public static readonly INTEGER_LITERAL = 33;
	public static readonly STRING_LITERAL = 34;
	public static readonly PREPROCESSOR = 35;
	public static readonly ID = 36;
	public static readonly OP = 37;
	public static readonly NL = 38;
	public static readonly WS = 39;
	public static readonly BLOCK_COMMENT = 40;
	public static readonly LINE_COMMENT = 41;
	public static readonly UNEXPECTED = 42;
	public static readonly LINE_JOINING = 43;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", "DO", "ELSE", "EXPECT", 
		"EXPORT", "FOR", "IF", "IMPORT", "OPERATOR", "RETURN", "WHILE", "AND", 
		"AS", "IS", "OR", "ASSIGN", "COMMA", "COLON", "QUESTION", "DOT", "LAMBDA", 
		"FLOAT_LITERAL", "INTEGER_LITERAL", "STRING_LITERAL", "PREPROCESSOR", 
		"ID", "OP", "NL", "WS", "BLOCK_COMMENT", "LINE_COMMENT", "UNEXPECTED", 
		"LINE_JOINING", "Radix", "DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'actual'", "'break'", "'continue'", "'do'", "'else'", "'expect'", "'export'", 
		"'for'", "'if'", "'import'", "'operator'", "'return'", "'while'", "'and'", 
		"'as'", "'is'", "'or'", "'='", "','", "':'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", 
		"DO", "ELSE", "EXPECT", "EXPORT", "FOR", "IF", "IMPORT", "OPERATOR", "RETURN", 
		"WHILE", "AND", "AS", "IS", "OR", "ASSIGN", "COMMA", "COLON", "QUESTION", 
		"DOT", "LAMBDA", "FLOAT_LITERAL", "INTEGER_LITERAL", "STRING_LITERAL", 
		"PREPROCESSOR", "ID", "OP", "NL", "WS", "BLOCK_COMMENT", "LINE_COMMENT", 
		"UNEXPECTED", "LINE_JOINING",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 2:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 3:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 4:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 5:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 35:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 35:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02-\u0199\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03" +
		"\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03" +
		"\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03" +
		"\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03" +
		"\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03" +
		"\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03" +
		"\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03" +
		"\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x07\x1C\xD3\n\x1C\f\x1C\x0E\x1C\xD6" +
		"\v\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x07\x1D\xDC\n\x1D\f\x1D\x0E\x1D" +
		"\xDF\v\x1D\x03\x1D\x03\x1D\x03\x1D\x07\x1D\xE4\n\x1D\f\x1D\x0E\x1D\xE7" +
		"\v\x1D\x03\x1E\x03\x1E\x07\x1E\xEB\n\x1E\f\x1E\x0E\x1E\xEE\v\x1E\x03\x1E" +
		"\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x07\x1E\xF5\n\x1E\f\x1E\x0E\x1E\xF8\v" +
		"\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03" +
		"\x1F\x05\x1F\u0103\n\x1F\x03 \x03 \x03 \x03 \x05 \u0109\n \x03!\x03!\x03" +
		"!\x03!\x07!\u010F\n!\f!\x0E!\u0112\v!\x03!\x03!\x03\"\x03\"\x03\"\x03" +
		"\"\x03\"\x03\"\x07\"\u011C\n\"\f\"\x0E\"\u011F\v\"\x03\"\x03\"\x07\"\u0123" +
		"\n\"\f\"\x0E\"\u0126\v\"\x03\"\x03\"\x03#\x03#\x07#\u012C\n#\f#\x0E#\u012F" +
		"\v#\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03$\x03" +
		"$\x05$\u013F\n$\x03%\x03%\x03%\x05%\u0144\n%\x03%\x03%\x05%\u0148\n%\x03" +
		"%\x05%\u014B\n%\x05%\u014D\n%\x03%\x03%\x03&\x06&\u0152\n&\r&\x0E&\u0153" +
		"\x03&\x03&\x03\'\x03\'\x03\'\x03\'\x03\'\x07\'\u015D\n\'\f\'\x0E\'\u0160" +
		"\v\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03(\x03(\x03(\x03(\x07(\u016B\n(\f" +
		"(\x0E(\u016E\v(\x03(\x03(\x03)\x03)\x03)\x03)\x03*\x03*\x07*\u0178\n*" +
		"\f*\x0E*\u017B\v*\x03*\x05*\u017E\n*\x03*\x03*\x05*\u0182\n*\x03*\x03" +
		"*\x03+\x03+\x05+\u0188\n+\x03+\x03+\x03,\x03,\x07,\u018E\n,\f,\x0E,\u0191" +
		"\v,\x03-\x03-\x07-\u0195\n-\f-\x0E-\u0198\v-\x05\u011D\u0124\u015E\x02" +
		"\x02.\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F" +
		"\x02\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02" +
		"\x11\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02" +
		"\x18+\x02\x19-\x02\x1A/\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02" +
		" ;\x02!=\x02\"?\x02#A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+" +
		"Q\x02,S\x02-U\x02\x02W\x02\x02Y\x02\x02\x03\x02\r\x03\x02))\n\x02))^^" +
		"ddhhppttvvxx\x05\x02C\\aac|\x06\x022;C\\aac|\x05\x02##\'\',`\x04\x02\v" +
		"\v\"\"\x04\x02\f\f\x0F\x0F\x03\x022;\x04\x02ZZzz\x04\x022;aa\x05\x022" +
		";C\\c|\x02\u01BC\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07" +
		"\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03" +
		"\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03" +
		"\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03" +
		"\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03" +
		"\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02" +
		"\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02" +
		"-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02" +
		"\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02" +
		"\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03" +
		"\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02" +
		"\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02" +
		"O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x03[\x03\x02" +
		"\x02\x02\x05^\x03\x02\x02\x02\x07a\x03\x02\x02\x02\td\x03\x02\x02\x02" +
		"\vg\x03\x02\x02\x02\rj\x03\x02\x02\x02\x0Fm\x03\x02\x02\x02\x11t\x03\x02" +
		"\x02\x02\x13z\x03\x02\x02\x02\x15\x83\x03\x02\x02\x02\x17\x86\x03\x02" +
		"\x02\x02\x19\x8B\x03\x02\x02\x02\x1B\x92\x03\x02\x02\x02\x1D\x99\x03\x02" +
		"\x02\x02\x1F\x9D\x03\x02\x02\x02!\xA0\x03\x02\x02\x02#\xA7\x03\x02\x02" +
		"\x02%\xB0\x03\x02\x02\x02\'\xB7\x03\x02\x02\x02)\xBD\x03\x02\x02\x02+" +
		"\xC1\x03\x02\x02\x02-\xC4\x03\x02\x02\x02/\xC7\x03\x02\x02\x021\xCA\x03" +
		"\x02\x02\x023\xCC\x03\x02\x02\x025\xCE\x03\x02\x02\x027\xD4\x03\x02\x02" +
		"\x029\xDD\x03\x02\x02\x02;\xEC\x03\x02\x02\x02=\u0102\x03\x02\x02\x02" +
		"?\u0108\x03\x02\x02\x02A\u010A\x03\x02\x02\x02C\u0115\x03\x02\x02\x02" +
		"E\u0129\x03\x02\x02\x02G\u013E\x03\x02\x02\x02I\u014C\x03\x02\x02\x02" +
		"K\u0151\x03\x02\x02\x02M\u0157\x03\x02\x02\x02O\u0166\x03\x02\x02\x02" +
		"Q\u0171\x03\x02\x02\x02S\u0175\x03\x02\x02\x02U\u0185\x03\x02\x02\x02" +
		"W\u018B\x03\x02\x02\x02Y\u0192\x03\x02\x02\x02[\\\x07]\x02\x02\\]\b\x02" +
		"\x02\x02]\x04\x03\x02\x02\x02^_\x07_\x02\x02_`\b\x03\x03\x02`\x06\x03" +
		"\x02\x02\x02ab\x07*\x02\x02bc\b\x04\x04\x02c\b\x03\x02\x02\x02de\x07+" +
		"\x02\x02ef\b\x05\x05\x02f\n\x03\x02\x02\x02gh\x07}\x02\x02hi\b\x06\x06" +
		"\x02i\f\x03\x02\x02\x02jk\x07\x7F\x02\x02kl\b\x07\x07\x02l\x0E\x03\x02" +
		"\x02\x02mn\x07c\x02\x02no\x07e\x02\x02op\x07v\x02\x02pq\x07w\x02\x02q" +
		"r\x07c\x02\x02rs\x07n\x02\x02s\x10\x03\x02\x02\x02tu\x07d\x02\x02uv\x07" +
		"t\x02\x02vw\x07g\x02\x02wx\x07c\x02\x02xy\x07m\x02\x02y\x12\x03\x02\x02" +
		"\x02z{\x07e\x02\x02{|\x07q\x02\x02|}\x07p\x02\x02}~\x07v\x02\x02~\x7F" +
		"\x07k\x02\x02\x7F\x80\x07p\x02\x02\x80\x81\x07w\x02\x02\x81\x82\x07g\x02" +
		"\x02\x82\x14\x03\x02\x02\x02\x83\x84\x07f\x02\x02\x84\x85\x07q\x02\x02" +
		"\x85\x16\x03\x02\x02\x02\x86\x87\x07g\x02\x02\x87\x88\x07n\x02\x02\x88" +
		"\x89\x07u\x02\x02\x89\x8A\x07g\x02\x02\x8A\x18\x03\x02\x02\x02\x8B\x8C" +
		"\x07g\x02\x02\x8C\x8D\x07z\x02\x02\x8D\x8E\x07r\x02\x02\x8E\x8F\x07g\x02" +
		"\x02\x8F\x90\x07e\x02\x02\x90\x91\x07v\x02\x02\x91\x1A\x03\x02\x02\x02" +
		"\x92\x93\x07g\x02\x02\x93\x94\x07z\x02\x02\x94\x95\x07r\x02\x02\x95\x96" +
		"\x07q\x02\x02\x96\x97\x07t\x02\x02\x97\x98\x07v\x02\x02\x98\x1C\x03\x02" +
		"\x02\x02\x99\x9A\x07h\x02\x02\x9A\x9B\x07q\x02\x02\x9B\x9C\x07t\x02\x02" +
		"\x9C\x1E\x03\x02\x02\x02\x9D\x9E\x07k\x02\x02\x9E\x9F\x07h\x02\x02\x9F" +
		" \x03\x02\x02\x02\xA0\xA1\x07k\x02\x02\xA1\xA2\x07o\x02\x02\xA2\xA3\x07" +
		"r\x02\x02\xA3\xA4\x07q\x02\x02\xA4\xA5\x07t\x02\x02\xA5\xA6\x07v\x02\x02" +
		"\xA6\"\x03\x02\x02\x02\xA7\xA8\x07q\x02\x02\xA8\xA9\x07r\x02\x02\xA9\xAA" +
		"\x07g\x02\x02\xAA\xAB\x07t\x02\x02\xAB\xAC\x07c\x02\x02\xAC\xAD\x07v\x02" +
		"\x02\xAD\xAE\x07q\x02\x02\xAE\xAF\x07t\x02\x02\xAF$\x03\x02\x02\x02\xB0" +
		"\xB1\x07t\x02\x02\xB1\xB2\x07g\x02\x02\xB2\xB3\x07v\x02\x02\xB3\xB4\x07" +
		"w\x02\x02\xB4\xB5\x07t\x02\x02\xB5\xB6\x07p\x02\x02\xB6&\x03\x02\x02\x02" +
		"\xB7\xB8\x07y\x02\x02\xB8\xB9\x07j\x02\x02\xB9\xBA\x07k\x02\x02\xBA\xBB" +
		"\x07n\x02\x02\xBB\xBC\x07g\x02\x02\xBC(\x03\x02\x02\x02\xBD\xBE\x07c\x02" +
		"\x02\xBE\xBF\x07p\x02\x02\xBF\xC0\x07f\x02\x02\xC0*\x03\x02\x02\x02\xC1" +
		"\xC2\x07c\x02\x02\xC2\xC3\x07u\x02\x02\xC3,\x03\x02\x02\x02\xC4\xC5\x07" +
		"k\x02\x02\xC5\xC6\x07u\x02\x02\xC6.\x03\x02\x02\x02\xC7\xC8\x07q\x02\x02" +
		"\xC8\xC9\x07t\x02\x02\xC90\x03\x02\x02\x02\xCA\xCB\x07?\x02\x02\xCB2\x03" +
		"\x02\x02\x02\xCC\xCD\x07.\x02\x02\xCD4\x03\x02\x02\x02\xCE\xCF\x07<\x02" +
		"\x02\xCF6\x03\x02\x02\x02\xD0\xD3\x05I%\x02\xD1\xD3\x05K&\x02\xD2\xD0" +
		"\x03\x02\x02\x02\xD2\xD1\x03\x02\x02\x02\xD3\xD6\x03\x02\x02\x02\xD4\xD2" +
		"\x03\x02\x02\x02\xD4\xD5\x03\x02\x02\x02\xD5\xD7\x03\x02\x02\x02\xD6\xD4" +
		"\x03\x02\x02\x02\xD7\xD8\x07A\x02\x02\xD88\x03\x02\x02\x02\xD9\xDC\x05" +
		"I%\x02\xDA\xDC\x05K&\x02\xDB\xD9\x03\x02\x02\x02\xDB\xDA\x03\x02\x02\x02" +
		"\xDC\xDF\x03\x02\x02\x02\xDD\xDB\x03\x02\x02\x02\xDD\xDE\x03\x02\x02\x02" +
		"\xDE\xE0\x03\x02\x02\x02\xDF\xDD\x03\x02\x02\x02\xE0\xE5\x070\x02\x02" +
		"\xE1\xE4\x05I%\x02\xE2\xE4\x05K&\x02\xE3\xE1\x03\x02\x02\x02\xE3\xE2\x03" +
		"\x02\x02\x02\xE4\xE7\x03\x02\x02\x02\xE5\xE3\x03\x02\x02\x02\xE5\xE6\x03" +
		"\x02\x02\x02\xE6:\x03\x02\x02\x02\xE7\xE5\x03\x02\x02\x02\xE8\xEB\x05" +
		"I%\x02\xE9\xEB\x05K&\x02\xEA\xE8\x03\x02\x02\x02\xEA\xE9\x03\x02\x02\x02" +
		"\xEB\xEE\x03\x02\x02\x02\xEC\xEA\x03\x02\x02\x02\xEC\xED\x03\x02\x02\x02" +
		"\xED\xEF\x03\x02\x02\x02\xEE\xEC\x03\x02\x02\x02\xEF\xF0\x07?\x02\x02" +
		"\xF0\xF1\x07@\x02\x02\xF1\xF6\x03\x02\x02\x02\xF2\xF5\x05I%\x02\xF3\xF5" +
		"\x05K&\x02\xF4\xF2\x03\x02\x02\x02\xF4\xF3\x03\x02\x02\x02\xF5\xF8\x03" +
		"\x02\x02\x02\xF6\xF4\x03\x02\x02\x02\xF6\xF7\x03\x02\x02\x02\xF7<\x03" +
		"\x02\x02\x02\xF8\xF6\x03\x02\x02\x02\xF9\xFA\x05U+\x02\xFA\xFB\x05Y-\x02" +
		"\xFB\xFC\x070\x02\x02\xFC\xFD\x05Y-\x02\xFD\u0103\x03\x02\x02\x02\xFE" +
		"\xFF\x05W,\x02\xFF\u0100\x070\x02\x02\u0100\u0101\x05W,\x02\u0101\u0103" +
		"\x03\x02\x02\x02\u0102\xF9\x03\x02\x02\x02\u0102\xFE\x03\x02\x02\x02\u0103" +
		">\x03\x02\x02\x02\u0104\u0105\x05U+\x02\u0105\u0106\x05Y-\x02\u0106\u0109" +
		"\x03\x02\x02\x02\u0107\u0109\x05W,\x02\u0108\u0104\x03\x02\x02\x02\u0108" +
		"\u0107\x03\x02\x02\x02\u0109@\x03\x02\x02\x02\u010A\u0110\x07)\x02\x02" +
		"\u010B\u010F\n\x02\x02\x02\u010C\u010D\x07^\x02\x02\u010D\u010F\t\x03" +
		"\x02\x02\u010E\u010B\x03\x02\x02\x02\u010E\u010C\x03\x02\x02\x02\u010F" +
		"\u0112\x03\x02\x02\x02\u0110\u010E\x03\x02\x02\x02\u0110\u0111\x03\x02" +
		"\x02\x02\u0111\u0113\x03\x02\x02\x02\u0112\u0110\x03\x02\x02\x02\u0113" +
		"\u0114\x07)\x02\x02\u0114B\x03\x02\x02\x02\u0115\u0116\x07%\x02\x02\u0116" +
		"\u0117\x07}\x02\x02\u0117\u0124\x03\x02\x02\x02\u0118\u0123\x05C\"\x02" +
		"\u0119\u011D\x07}\x02\x02\u011A\u011C\v\x02\x02\x02\u011B\u011A\x03\x02" +
		"\x02\x02\u011C\u011F\x03\x02\x02\x02\u011D\u011E\x03\x02\x02\x02\u011D" +
		"\u011B\x03\x02\x02\x02\u011E\u0120\x03\x02\x02\x02\u011F\u011D\x03\x02" +
		"\x02\x02\u0120\u0123\x07\x7F\x02\x02\u0121\u0123\v\x02\x02\x02\u0122\u0118" +
		"\x03\x02\x02\x02\u0122\u0119\x03\x02\x02\x02\u0122\u0121\x03\x02\x02\x02" +
		"\u0123\u0126\x03\x02\x02\x02\u0124\u0125\x03\x02\x02\x02\u0124\u0122\x03" +
		"\x02\x02\x02\u0125\u0127\x03\x02\x02\x02\u0126\u0124\x03\x02\x02\x02\u0127" +
		"\u0128\x07\x7F\x02\x02\u0128D\x03\x02\x02\x02\u0129\u012D\t\x04\x02\x02" +
		"\u012A\u012C\t\x05\x02\x02\u012B\u012A\x03\x02\x02\x02\u012C\u012F\x03" +
		"\x02\x02\x02\u012D\u012B\x03\x02\x02\x02\u012D\u012E\x03\x02\x02\x02\u012E" +
		"F\x03\x02\x02\x02\u012F\u012D\x03\x02\x02\x02\u0130\u013F\t\x06\x02\x02" +
		"\u0131\u0132\x070\x02\x02\u0132\u013F\x070\x02\x02\u0133\u0134\x070\x02" +
		"\x02\u0134\u0135\x070\x02\x02\u0135\u013F\x070\x02\x02\u0136\u0137\x07" +
		">\x02\x02\u0137\u013F\x07?\x02\x02\u0138\u0139\x07@\x02\x02\u0139\u013F" +
		"\x07?\x02\x02\u013A\u013B\x07?\x02\x02\u013B\u013F\x07?\x02\x02\u013C" +
		"\u013D\x07#\x02\x02\u013D\u013F\x07?\x02\x02\u013E\u0130\x03\x02\x02\x02" +
		"\u013E\u0131\x03\x02\x02\x02\u013E\u0133\x03\x02\x02\x02\u013E\u0136\x03" +
		"\x02\x02\x02\u013E\u0138\x03\x02\x02\x02\u013E\u013A\x03\x02\x02\x02\u013E" +
		"\u013C\x03\x02\x02\x02\u013FH\x03\x02\x02\x02\u0140\u0141\x06%\x02\x02" +
		"\u0141\u014D\x05K&\x02\u0142\u0144\x07\x0F\x02\x02\u0143\u0142\x03\x02" +
		"\x02\x02\u0143\u0144\x03\x02\x02\x02\u0144\u0145\x03\x02\x02\x02\u0145" +
		"\u0148\x07\f\x02\x02\u0146\u0148\x07\x0F\x02\x02\u0147\u0143\x03\x02\x02" +
		"\x02\u0147\u0146\x03\x02\x02\x02\u0148\u014A\x03\x02\x02\x02\u0149\u014B" +
		"\x05K&\x02\u014A\u0149\x03\x02\x02\x02\u014A\u014B\x03\x02\x02\x02\u014B" +
		"\u014D\x03\x02\x02\x02\u014C\u0140\x03\x02\x02\x02\u014C\u0147\x03\x02" +
		"\x02\x02\u014D\u014E\x03\x02\x02\x02\u014E\u014F\b%\b\x02\u014FJ\x03\x02" +
		"\x02\x02\u0150\u0152\t\x07\x02\x02\u0151\u0150\x03\x02\x02\x02\u0152\u0153" +
		"\x03\x02\x02\x02\u0153\u0151\x03\x02\x02\x02\u0153\u0154\x03\x02\x02\x02" +
		"\u0154\u0155\x03\x02\x02\x02\u0155\u0156\b&\t\x02\u0156L\x03\x02\x02\x02" +
		"\u0157\u0158\x071\x02\x02\u0158\u0159\x07,\x02\x02\u0159\u015E\x03\x02" +
		"\x02\x02\u015A\u015D\x05M\'\x02\u015B\u015D\v\x02\x02\x02\u015C\u015A" +
		"\x03\x02\x02\x02\u015C\u015B\x03\x02\x02\x02\u015D\u0160\x03\x02\x02\x02" +
		"\u015E\u015F\x03\x02\x02\x02\u015E\u015C\x03\x02\x02\x02\u015F\u0161\x03" +
		"\x02\x02\x02\u0160\u015E\x03\x02\x02\x02\u0161\u0162\x07,\x02\x02\u0162" +
		"\u0163\x071\x02\x02\u0163\u0164\x03\x02\x02\x02\u0164\u0165\b\'\n\x02" +
		"\u0165N\x03\x02\x02\x02\u0166\u0167\x07/\x02\x02\u0167\u0168\x07/\x02" +
		"\x02\u0168\u016C\x03\x02\x02\x02\u0169\u016B\n\b\x02\x02\u016A\u0169\x03" +
		"\x02\x02\x02\u016B\u016E\x03\x02\x02\x02\u016C\u016A\x03\x02\x02\x02\u016C" +
		"\u016D\x03\x02\x02\x02\u016D\u016F\x03\x02\x02\x02\u016E\u016C\x03\x02" +
		"\x02\x02\u016F\u0170\b(\n\x02\u0170P\x03\x02\x02\x02\u0171\u0172\v\x02" +
		"\x02\x02\u0172\u0173\x03\x02\x02\x02\u0173\u0174\b)\v\x02\u0174R\x03\x02" +
		"\x02\x02\u0175\u0179\x07^\x02\x02\u0176\u0178\t\x07\x02\x02\u0177\u0176" +
		"\x03\x02\x02\x02\u0178\u017B\x03\x02\x02\x02\u0179\u0177\x03\x02\x02\x02" +
		"\u0179\u017A\x03\x02\x02\x02\u017A\u0181\x03\x02\x02\x02\u017B\u0179\x03" +
		"\x02\x02\x02\u017C\u017E\x07\x0F\x02\x02\u017D\u017C\x03\x02\x02\x02\u017D" +
		"\u017E\x03\x02\x02\x02\u017E\u017F\x03\x02\x02\x02\u017F\u0182\x07\f\x02" +
		"\x02\u0180\u0182\x04\x0E\x0F\x02\u0181\u017D\x03\x02\x02\x02\u0181\u0180" +
		"\x03\x02\x02\x02\u0182\u0183\x03\x02\x02\x02\u0183\u0184\b*\f\x02\u0184" +
		"T\x03\x02\x02\x02\u0185\u0187\t\t\x02\x02\u0186\u0188\t\t\x02\x02\u0187" +
		"\u0186\x03\x02\x02\x02\u0187\u0188\x03\x02\x02\x02\u0188\u0189\x03\x02" +
		"\x02\x02\u0189\u018A\t\n\x02\x02\u018AV\x03\x02\x02\x02\u018B\u018F\t" +
		"\t\x02\x02\u018C\u018E\t\v\x02\x02\u018D\u018C\x03\x02\x02\x02\u018E\u0191" +
		"\x03\x02\x02\x02\u018F\u018D\x03\x02\x02\x02\u018F\u0190\x03\x02\x02\x02" +
		"\u0190X\x03\x02\x02\x02\u0191\u018F\x03\x02\x02\x02\u0192\u0196\t\f\x02" +
		"\x02\u0193\u0195\t\x05\x02\x02\u0194\u0193\x03\x02\x02\x02\u0195\u0198" +
		"\x03\x02\x02\x02\u0196\u0194\x03\x02\x02\x02\u0196\u0197\x03\x02\x02\x02" +
		"\u0197Z\x03\x02\x02\x02\u0198\u0196\x03\x02\x02\x02&\x02\xD2\xD4\xDB\xDD" +
		"\xE3\xE5\xEA\xEC\xF4\xF6\u0102\u0108\u010E\u0110\u011D\u0122\u0124\u012D" +
		"\u013E\u0143\u0147\u014A\u014C\u0153\u015C\u015E\u016C\u0179\u017D\u0181" +
		"\u0187\u018D\u018F\u0194\u0196\r\x03\x02\x02\x03\x03\x03\x03\x04\x04\x03" +
		"\x05\x05\x03\x06\x06\x03\x07\x07\x03%\b\x02\x05\x02\x02\x06\x02\x02\x04" +
		"\x02\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

