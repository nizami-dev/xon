// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN_BRACKET = 3;
	public static readonly CLOSE_BRACKET = 4;
	public static readonly OPEN_PAREN = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_BRACE = 7;
	public static readonly CLOSE_BRACE = 8;
	public static readonly ACTUAL = 9;
	public static readonly BREAK = 10;
	public static readonly CONTINUE = 11;
	public static readonly DO = 12;
	public static readonly ELSE = 13;
	public static readonly EXPECT = 14;
	public static readonly EXPORT = 15;
	public static readonly FOR = 16;
	public static readonly IF = 17;
	public static readonly IMPORT = 18;
	public static readonly RETURN = 19;
	public static readonly WHILE = 20;
	public static readonly AS = 21;
	public static readonly IS = 22;
	public static readonly OR = 23;
	public static readonly AND = 24;
	public static readonly DOT = 25;
	public static readonly COLON = 26;
	public static readonly COMMA = 27;
	public static readonly ASSIGN = 28;
	public static readonly QUESTION = 29;
	public static readonly LAMBDA = 30;
	public static readonly FLOAT_LITERAL = 31;
	public static readonly INTEGER_LITERAL = 32;
	public static readonly STRING_LITERAL = 33;
	public static readonly PREPROCESSOR = 34;
	public static readonly ID = 35;
	public static readonly OP = 36;
	public static readonly NL = 37;
	public static readonly WS = 38;
	public static readonly LINE_JOINING = 39;
	public static readonly BLOCK_COMMENT = 40;
	public static readonly LINE_COMMENT = 41;
	public static readonly UNEXPECTED = 42;
	public static readonly ERROR = 2;
	public static readonly COMMENT_CHANNEL = 3;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", "DO", "ELSE", "EXPECT", 
		"EXPORT", "FOR", "IF", "IMPORT", "RETURN", "WHILE", "AS", "IS", "OR", 
		"AND", "DOT", "COLON", "COMMA", "ASSIGN", "QUESTION", "LAMBDA", "FLOAT_LITERAL", 
		"INTEGER_LITERAL", "STRING_LITERAL", "PREPROCESSOR", "ID", "OP", "NL", 
		"WS", "LINE_JOINING", "BLOCK_COMMENT", "LINE_COMMENT", "UNEXPECTED", "Radix", 
		"DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'actual'", "'break'", "'continue'", "'do'", "'else'", "'expect'", "'export'", 
		"'for'", "'if'", "'import'", "'return'", "'while'", "'as'", "'is'", "'or'", 
		"'and'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", 
		"DO", "ELSE", "EXPECT", "EXPORT", "FOR", "IF", "IMPORT", "RETURN", "WHILE", 
		"AS", "IS", "OR", "AND", "DOT", "COLON", "COMMA", "ASSIGN", "QUESTION", 
		"LAMBDA", "FLOAT_LITERAL", "INTEGER_LITERAL", "STRING_LITERAL", "PREPROCESSOR", 
		"ID", "OP", "NL", "WS", "LINE_JOINING", "BLOCK_COMMENT", "LINE_COMMENT", 
		"UNEXPECTED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 2:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 3:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 4:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 5:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 34:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 34:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02,\u01B0\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03" +
		"\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03" +
		"\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03" +
		"\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03" +
		"\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03" +
		"\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03" +
		"\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x07\x18\xC2\n\x18" +
		"\f\x18\x0E\x18\xC5\v\x18\x03\x18\x03\x18\x03\x18\x07\x18\xCA\n\x18\f\x18" +
		"\x0E\x18\xCD\v\x18\x03\x19\x03\x19\x07\x19\xD1\n\x19\f\x19\x0E\x19\xD4" +
		"\v\x19\x03\x19\x03\x19\x03\x19\x07\x19\xD9\n\x19\f\x19\x0E\x19\xDC\v\x19" +
		"\x03\x1A\x03\x1A\x07\x1A\xE0\n\x1A\f\x1A\x0E\x1A\xE3\v\x1A\x03\x1A\x03" +
		"\x1A\x03\x1A\x07\x1A\xE8\n\x1A\f\x1A\x0E\x1A\xEB\v\x1A\x03\x1B\x03\x1B" +
		"\x07\x1B\xEF\n\x1B\f\x1B\x0E\x1B\xF2\v\x1B\x03\x1B\x03\x1B\x03\x1B\x07" +
		"\x1B\xF7\n\x1B\f\x1B\x0E\x1B\xFA\v\x1B\x03\x1C\x03\x1C\x07\x1C\xFE\n\x1C" +
		"\f\x1C\x0E\x1C\u0101\v\x1C\x03\x1C\x03\x1C\x03\x1C\x07\x1C\u0106\n\x1C" +
		"\f\x1C\x0E\x1C\u0109\v\x1C\x03\x1D\x03\x1D\x07\x1D\u010D\n\x1D\f\x1D\x0E" +
		"\x1D\u0110\v\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07\x1D\u0117" +
		"\n\x1D\f\x1D\x0E\x1D\u011A\v\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E" +
		"\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E\u0125\n\x1E\x03\x1F\x03\x1F\x03" +
		"\x1F\x03\x1F\x05\x1F\u012B\n\x1F\x03 \x03 \x03 \x03 \x07 \u0131\n \f " +
		"\x0E \u0134\v \x03 \x03 \x03!\x03!\x03!\x03!\x03!\x03!\x07!\u013E\n!\f" +
		"!\x0E!\u0141\v!\x03!\x03!\x07!\u0145\n!\f!\x0E!\u0148\v!\x03!\x03!\x03" +
		"\"\x03\"\x07\"\u014E\n\"\f\"\x0E\"\u0151\v\"\x03#\x03#\x03#\x03#\x03#" +
		"\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x05#\u0161\n#\x03$\x03$" +
		"\x03$\x03$\x05$\u0167\n$\x05$\u0169\n$\x03$\x03$\x03%\x06%\u016E\n%\r" +
		"%\x0E%\u016F\x03%\x03%\x03&\x03&\x07&\u0176\n&\f&\x0E&\u0179\v&\x03&\x03" +
		"&\x03&\x03&\x03\'\x03\'\x03\'\x03\'\x03\'\x07\'\u0184\n\'\f\'\x0E\'\u0187" +
		"\v\'\x03\'\x03\'\x03\'\x03\'\x03\'\x03(\x03(\x03(\x03(\x07(\u0192\n(\f" +
		"(\x0E(\u0195\v(\x03(\x03(\x03)\x03)\x03)\x03)\x03*\x03*\x05*\u019F\n*" +
		"\x03*\x03*\x03+\x03+\x07+\u01A5\n+\f+\x0E+\u01A8\v+\x03,\x03,\x07,\u01AC" +
		"\n,\f,\x0E,\u01AF\v,\x05\u013F\u0146\u0185\x02\x02-\x03\x02\x05\x05\x02" +
		"\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r" +
		"\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13" +
		"!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19-\x02\x1A/\x02" +
		"\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?\x02#A\x02" +
		"$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+Q\x02,S\x02\x02U\x02\x02W" +
		"\x02\x02\x03\x02\r\x03\x02))\n\x02))^^ddhhppttvvxx\x05\x02C\\aac|\x06" +
		"\x022;C\\aac|\x05\x02##\'\',`\x04\x02\f\f\x0F\x0F\x04\x02\v\v\"\"\x03" +
		"\x022;\x04\x02ZZzz\x04\x022;aa\x05\x022;C\\c|\x02\u01DD\x02\x03\x03\x02" +
		"\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02" +
		"\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02" +
		"\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02" +
		"\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02" +
		"\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02" +
		"\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02" +
		")\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02" +
		"\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02" +
		"\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03" +
		"\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02" +
		"\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02" +
		"K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02" +
		"\x02\x02\x03Y\x03\x02\x02\x02\x05\\\x03\x02\x02\x02\x07_\x03\x02\x02\x02" +
		"\tb\x03\x02\x02\x02\ve\x03\x02\x02\x02\rh\x03\x02\x02\x02\x0Fk\x03\x02" +
		"\x02\x02\x11r\x03\x02\x02\x02\x13x\x03\x02\x02\x02\x15\x81\x03\x02\x02" +
		"\x02\x17\x84\x03\x02\x02\x02\x19\x89\x03\x02\x02\x02\x1B\x90\x03\x02\x02" +
		"\x02\x1D\x97\x03\x02\x02\x02\x1F\x9B\x03\x02\x02\x02!\x9E\x03\x02\x02" +
		"\x02#\xA5\x03\x02\x02\x02%\xAC\x03\x02\x02\x02\'\xB2\x03\x02\x02\x02)" +
		"\xB5\x03\x02\x02\x02+\xB8\x03\x02\x02\x02-\xBB\x03\x02\x02\x02/\xC3\x03" +
		"\x02\x02\x021\xD2\x03\x02\x02\x023\xE1\x03\x02\x02\x025\xF0\x03\x02\x02" +
		"\x027\xFF\x03\x02\x02\x029\u010E\x03\x02\x02\x02;\u0124\x03\x02\x02\x02" +
		"=\u012A\x03\x02\x02\x02?\u012C\x03\x02\x02\x02A\u0137\x03\x02\x02\x02" +
		"C\u014B\x03\x02\x02\x02E\u0160\x03\x02\x02\x02G\u0168\x03\x02\x02\x02" +
		"I\u016D\x03\x02\x02\x02K\u0173\x03\x02\x02\x02M\u017E\x03\x02\x02\x02" +
		"O\u018D\x03\x02\x02\x02Q\u0198\x03\x02\x02\x02S\u019C\x03\x02\x02\x02" +
		"U\u01A2\x03\x02\x02\x02W\u01A9\x03\x02\x02\x02YZ\x07]\x02\x02Z[\b\x02" +
		"\x02\x02[\x04\x03\x02\x02\x02\\]\x07_\x02\x02]^\b\x03\x03\x02^\x06\x03" +
		"\x02\x02\x02_`\x07*\x02\x02`a\b\x04\x04\x02a\b\x03\x02\x02\x02bc\x07+" +
		"\x02\x02cd\b\x05\x05\x02d\n\x03\x02\x02\x02ef\x07}\x02\x02fg\b\x06\x06" +
		"\x02g\f\x03\x02\x02\x02hi\x07\x7F\x02\x02ij\b\x07\x07\x02j\x0E\x03\x02" +
		"\x02\x02kl\x07c\x02\x02lm\x07e\x02\x02mn\x07v\x02\x02no\x07w\x02\x02o" +
		"p\x07c\x02\x02pq\x07n\x02\x02q\x10\x03\x02\x02\x02rs\x07d\x02\x02st\x07" +
		"t\x02\x02tu\x07g\x02\x02uv\x07c\x02\x02vw\x07m\x02\x02w\x12\x03\x02\x02" +
		"\x02xy\x07e\x02\x02yz\x07q\x02\x02z{\x07p\x02\x02{|\x07v\x02\x02|}\x07" +
		"k\x02\x02}~\x07p\x02\x02~\x7F\x07w\x02\x02\x7F\x80\x07g\x02\x02\x80\x14" +
		"\x03\x02\x02\x02\x81\x82\x07f\x02\x02\x82\x83\x07q\x02\x02\x83\x16\x03" +
		"\x02\x02\x02\x84\x85\x07g\x02\x02\x85\x86\x07n\x02\x02\x86\x87\x07u\x02" +
		"\x02\x87\x88\x07g\x02\x02\x88\x18\x03\x02\x02\x02\x89\x8A\x07g\x02\x02" +
		"\x8A\x8B\x07z\x02\x02\x8B\x8C\x07r\x02\x02\x8C\x8D\x07g\x02\x02\x8D\x8E" +
		"\x07e\x02\x02\x8E\x8F\x07v\x02\x02\x8F\x1A\x03\x02\x02\x02\x90\x91\x07" +
		"g\x02\x02\x91\x92\x07z\x02\x02\x92\x93\x07r\x02\x02\x93\x94\x07q\x02\x02" +
		"\x94\x95\x07t\x02\x02\x95\x96\x07v\x02\x02\x96\x1C\x03\x02\x02\x02\x97" +
		"\x98\x07h\x02\x02\x98\x99\x07q\x02\x02\x99\x9A\x07t\x02\x02\x9A\x1E\x03" +
		"\x02\x02\x02\x9B\x9C\x07k\x02\x02\x9C\x9D\x07h\x02\x02\x9D \x03\x02\x02" +
		"\x02\x9E\x9F\x07k\x02\x02\x9F\xA0\x07o\x02\x02\xA0\xA1\x07r\x02\x02\xA1" +
		"\xA2\x07q\x02\x02\xA2\xA3\x07t\x02\x02\xA3\xA4\x07v\x02\x02\xA4\"\x03" +
		"\x02\x02\x02\xA5\xA6\x07t\x02\x02\xA6\xA7\x07g\x02\x02\xA7\xA8\x07v\x02" +
		"\x02\xA8\xA9\x07w\x02\x02\xA9\xAA\x07t\x02\x02\xAA\xAB\x07p\x02\x02\xAB" +
		"$\x03\x02\x02\x02\xAC\xAD\x07y\x02\x02\xAD\xAE\x07j\x02\x02\xAE\xAF\x07" +
		"k\x02\x02\xAF\xB0\x07n\x02\x02\xB0\xB1\x07g\x02\x02\xB1&\x03\x02\x02\x02" +
		"\xB2\xB3\x07c\x02\x02\xB3\xB4\x07u\x02\x02\xB4(\x03\x02\x02\x02\xB5\xB6" +
		"\x07k\x02\x02\xB6\xB7\x07u\x02\x02\xB7*\x03\x02\x02\x02\xB8\xB9\x07q\x02" +
		"\x02\xB9\xBA\x07t\x02\x02\xBA,\x03\x02\x02\x02\xBB\xBC\x07c\x02\x02\xBC" +
		"\xBD\x07p\x02\x02\xBD\xBE\x07f\x02\x02\xBE.\x03\x02\x02\x02\xBF\xC2\x05" +
		"G$\x02\xC0\xC2\x05I%\x02\xC1\xBF\x03\x02\x02\x02\xC1\xC0\x03\x02\x02\x02" +
		"\xC2\xC5\x03\x02\x02\x02\xC3\xC1\x03\x02\x02\x02\xC3\xC4\x03\x02\x02\x02" +
		"\xC4\xC6\x03\x02\x02\x02\xC5\xC3\x03\x02\x02\x02\xC6\xCB\x070\x02\x02" +
		"\xC7\xCA\x05G$\x02\xC8\xCA\x05I%\x02\xC9\xC7\x03\x02\x02\x02\xC9\xC8\x03" +
		"\x02\x02\x02\xCA\xCD\x03\x02\x02\x02\xCB\xC9\x03\x02\x02\x02\xCB\xCC\x03" +
		"\x02\x02\x02\xCC0\x03\x02\x02\x02\xCD\xCB\x03\x02\x02\x02\xCE\xD1\x05" +
		"G$\x02\xCF\xD1\x05I%\x02\xD0\xCE\x03\x02\x02\x02\xD0\xCF\x03\x02\x02\x02" +
		"\xD1\xD4\x03\x02\x02\x02\xD2\xD0\x03\x02\x02\x02\xD2\xD3\x03\x02\x02\x02" +
		"\xD3\xD5\x03\x02\x02\x02\xD4\xD2\x03\x02\x02\x02\xD5\xDA\x07<\x02\x02" +
		"\xD6\xD9\x05G$\x02\xD7\xD9\x05I%\x02\xD8\xD6\x03\x02\x02\x02\xD8\xD7\x03" +
		"\x02\x02\x02\xD9\xDC\x03\x02\x02\x02\xDA\xD8\x03\x02\x02\x02\xDA\xDB\x03" +
		"\x02\x02\x02\xDB2\x03\x02\x02\x02\xDC\xDA\x03\x02\x02\x02\xDD\xE0\x05" +
		"G$\x02\xDE\xE0\x05I%\x02\xDF\xDD\x03\x02\x02\x02\xDF\xDE\x03\x02\x02\x02" +
		"\xE0\xE3\x03\x02\x02\x02\xE1\xDF\x03\x02\x02\x02\xE1\xE2\x03\x02\x02\x02" +
		"\xE2\xE4\x03\x02\x02\x02\xE3\xE1\x03\x02\x02\x02\xE4\xE9\x07.\x02\x02" +
		"\xE5\xE8\x05G$\x02\xE6\xE8\x05I%\x02\xE7\xE5\x03\x02\x02\x02\xE7\xE6\x03" +
		"\x02\x02\x02\xE8\xEB\x03\x02\x02\x02\xE9\xE7\x03\x02\x02\x02\xE9\xEA\x03" +
		"\x02\x02\x02\xEA4\x03\x02\x02\x02\xEB\xE9\x03\x02\x02\x02\xEC\xEF\x05" +
		"G$\x02\xED\xEF\x05I%\x02\xEE\xEC\x03\x02\x02\x02\xEE\xED\x03\x02\x02\x02" +
		"\xEF\xF2\x03\x02\x02\x02\xF0\xEE\x03\x02\x02\x02\xF0\xF1\x03\x02\x02\x02" +
		"\xF1\xF3\x03\x02\x02\x02\xF2\xF0\x03\x02\x02\x02\xF3\xF8\x07?\x02\x02" +
		"\xF4\xF7\x05G$\x02\xF5\xF7\x05I%\x02\xF6\xF4\x03\x02\x02\x02\xF6\xF5\x03" +
		"\x02\x02\x02\xF7\xFA\x03\x02\x02\x02\xF8\xF6\x03\x02\x02\x02\xF8\xF9\x03" +
		"\x02\x02\x02\xF96\x03\x02\x02\x02\xFA\xF8\x03\x02\x02\x02\xFB\xFE\x05" +
		"G$\x02\xFC\xFE\x05I%\x02\xFD\xFB\x03\x02\x02\x02\xFD\xFC\x03\x02\x02\x02" +
		"\xFE\u0101\x03\x02\x02\x02\xFF\xFD\x03\x02\x02\x02\xFF\u0100\x03\x02\x02" +
		"\x02\u0100\u0102\x03\x02\x02\x02\u0101\xFF\x03\x02\x02\x02\u0102\u0107" +
		"\x07A\x02\x02\u0103\u0106\x05G$\x02\u0104\u0106\x05I%\x02\u0105\u0103" +
		"\x03\x02\x02\x02\u0105\u0104\x03\x02\x02\x02\u0106\u0109\x03\x02\x02\x02" +
		"\u0107\u0105\x03\x02\x02\x02\u0107\u0108\x03\x02\x02\x02\u01088\x03\x02" +
		"\x02\x02\u0109\u0107\x03\x02\x02\x02\u010A\u010D\x05G$\x02\u010B\u010D" +
		"\x05I%\x02\u010C\u010A\x03\x02\x02\x02\u010C\u010B\x03\x02\x02\x02\u010D" +
		"\u0110\x03\x02\x02\x02\u010E\u010C\x03\x02\x02\x02\u010E\u010F\x03\x02" +
		"\x02\x02\u010F\u0111\x03\x02\x02\x02\u0110\u010E\x03\x02\x02\x02\u0111" +
		"\u0112\x07?\x02\x02\u0112\u0113\x07@\x02\x02\u0113\u0118\x03\x02\x02\x02" +
		"\u0114\u0117\x05G$\x02\u0115\u0117\x05I%\x02\u0116\u0114\x03\x02\x02\x02" +
		"\u0116\u0115\x03\x02\x02\x02\u0117\u011A\x03\x02\x02\x02\u0118\u0116\x03" +
		"\x02\x02\x02\u0118\u0119\x03\x02\x02\x02\u0119:\x03\x02\x02\x02\u011A" +
		"\u0118\x03\x02\x02\x02\u011B\u011C\x05S*\x02\u011C\u011D\x05W,\x02\u011D" +
		"\u011E\x070\x02\x02\u011E\u011F\x05W,\x02\u011F\u0125\x03\x02\x02\x02" +
		"\u0120\u0121\x05U+\x02\u0121\u0122\x070\x02\x02\u0122\u0123\x05U+\x02" +
		"\u0123\u0125\x03\x02\x02\x02\u0124\u011B\x03\x02\x02\x02\u0124\u0120\x03" +
		"\x02\x02\x02\u0125<\x03\x02\x02\x02\u0126\u0127\x05S*\x02\u0127\u0128" +
		"\x05W,\x02\u0128\u012B\x03\x02\x02\x02\u0129\u012B\x05U+\x02\u012A\u0126" +
		"\x03\x02\x02\x02\u012A\u0129\x03\x02\x02\x02\u012B>\x03\x02\x02\x02\u012C" +
		"\u0132\x07)\x02\x02\u012D\u0131\n\x02\x02\x02\u012E\u012F\x07^\x02\x02" +
		"\u012F\u0131\t\x03\x02\x02\u0130\u012D\x03\x02\x02\x02\u0130\u012E\x03" +
		"\x02\x02\x02\u0131\u0134\x03\x02\x02\x02\u0132\u0130\x03\x02\x02\x02\u0132" +
		"\u0133\x03\x02\x02\x02\u0133\u0135\x03\x02\x02\x02\u0134\u0132\x03\x02" +
		"\x02\x02\u0135\u0136\x07)\x02\x02\u0136@\x03\x02\x02\x02\u0137\u0138\x07" +
		"%\x02\x02\u0138\u0139\x07}\x02\x02\u0139\u0146\x03\x02\x02\x02\u013A\u0145" +
		"\x05A!\x02\u013B\u013F\x07}\x02\x02\u013C\u013E\v\x02\x02\x02\u013D\u013C" +
		"\x03\x02\x02\x02\u013E\u0141\x03\x02\x02\x02\u013F\u0140\x03\x02\x02\x02" +
		"\u013F\u013D\x03\x02\x02\x02\u0140\u0142\x03\x02\x02\x02\u0141\u013F\x03" +
		"\x02\x02\x02\u0142\u0145\x07\x7F\x02\x02\u0143\u0145\v\x02\x02\x02\u0144" +
		"\u013A\x03\x02\x02\x02\u0144\u013B\x03\x02\x02\x02\u0144\u0143\x03\x02" +
		"\x02\x02\u0145\u0148\x03\x02\x02\x02\u0146\u0147\x03\x02\x02\x02\u0146" +
		"\u0144\x03\x02\x02\x02\u0147\u0149\x03\x02\x02\x02\u0148\u0146\x03\x02" +
		"\x02\x02\u0149\u014A\x07\x7F\x02\x02\u014AB\x03\x02\x02\x02\u014B\u014F" +
		"\t\x04\x02\x02\u014C\u014E\t\x05\x02\x02\u014D\u014C\x03\x02\x02\x02\u014E" +
		"\u0151\x03\x02\x02\x02\u014F\u014D\x03\x02\x02\x02\u014F\u0150\x03\x02" +
		"\x02\x02\u0150D\x03\x02\x02\x02\u0151\u014F\x03\x02\x02\x02\u0152\u0161" +
		"\t\x06\x02\x02\u0153\u0154\x070\x02\x02\u0154\u0161\x070\x02\x02\u0155" +
		"\u0156\x070\x02\x02\u0156\u0157\x070\x02\x02\u0157\u0161\x070\x02\x02" +
		"\u0158\u0159\x07>\x02\x02\u0159\u0161\x07?\x02\x02\u015A\u015B\x07@\x02" +
		"\x02\u015B\u0161\x07?\x02\x02\u015C\u015D\x07?\x02\x02\u015D\u0161\x07" +
		"?\x02\x02\u015E\u015F\x07#\x02\x02\u015F\u0161\x07?\x02\x02\u0160\u0152" +
		"\x03\x02\x02\x02\u0160\u0153\x03\x02\x02\x02\u0160\u0155\x03\x02\x02\x02" +
		"\u0160\u0158\x03\x02\x02\x02\u0160\u015A\x03\x02\x02\x02\u0160\u015C\x03" +
		"\x02\x02\x02\u0160\u015E\x03\x02\x02\x02\u0161F\x03\x02\x02\x02\u0162" +
		"\u0163\x06$\x02\x02\u0163\u0169\x05I%\x02\u0164\u0166\t\x07\x02\x02\u0165" +
		"\u0167\x05I%\x02\u0166\u0165\x03\x02\x02\x02\u0166\u0167\x03\x02\x02\x02" +
		"\u0167\u0169\x03\x02\x02\x02\u0168\u0162\x03\x02\x02\x02\u0168\u0164\x03" +
		"\x02\x02\x02\u0169\u016A\x03\x02\x02\x02\u016A\u016B\b$\b\x02\u016BH\x03" +
		"\x02\x02\x02\u016C\u016E\t\b\x02\x02\u016D\u016C\x03\x02\x02\x02\u016E" +
		"\u016F\x03\x02\x02\x02\u016F\u016D\x03\x02\x02\x02\u016F\u0170\x03\x02" +
		"\x02\x02\u0170\u0171\x03\x02\x02\x02\u0171\u0172\b%\t\x02\u0172J\x03\x02" +
		"\x02\x02\u0173\u0177\x07^\x02\x02\u0174\u0176\t\b\x02\x02\u0175\u0174" +
		"\x03\x02\x02\x02\u0176\u0179\x03\x02\x02\x02\u0177\u0175\x03\x02\x02\x02" +
		"\u0177\u0178\x03\x02\x02\x02\u0178\u017A\x03\x02\x02\x02\u0179\u0177\x03" +
		"\x02\x02\x02\u017A\u017B\t\x07\x02\x02\u017B\u017C\x03\x02\x02\x02\u017C" +
		"\u017D\b&\t\x02\u017DL\x03\x02\x02\x02\u017E\u017F\x071\x02\x02\u017F" +
		"\u0180\x07,\x02\x02\u0180\u0185\x03\x02\x02\x02\u0181\u0184\x05M\'\x02" +
		"\u0182\u0184\v\x02\x02\x02\u0183\u0181\x03\x02\x02\x02\u0183\u0182\x03" +
		"\x02\x02\x02\u0184\u0187\x03\x02\x02\x02\u0185\u0186\x03\x02\x02\x02\u0185" +
		"\u0183\x03\x02\x02\x02\u0186\u0188\x03\x02\x02\x02\u0187\u0185\x03\x02" +
		"\x02\x02\u0188\u0189\x07,\x02\x02\u0189\u018A\x071\x02\x02\u018A\u018B" +
		"\x03\x02\x02\x02\u018B\u018C\b\'\n\x02\u018CN\x03\x02\x02\x02\u018D\u018E" +
		"\x07/\x02\x02\u018E\u018F\x07/\x02\x02\u018F\u0193\x03\x02\x02\x02\u0190" +
		"\u0192\n\x07\x02\x02\u0191\u0190\x03\x02\x02\x02\u0192\u0195\x03\x02\x02" +
		"\x02\u0193\u0191\x03\x02\x02\x02\u0193\u0194\x03\x02\x02\x02\u0194\u0196" +
		"\x03\x02\x02\x02\u0195\u0193\x03\x02\x02\x02\u0196\u0197\b(\n\x02\u0197" +
		"P\x03\x02\x02\x02\u0198\u0199\v\x02\x02\x02\u0199\u019A\x03\x02\x02\x02" +
		"\u019A\u019B\b)\v\x02\u019BR\x03\x02\x02\x02\u019C\u019E\t\t\x02\x02\u019D" +
		"\u019F\t\t\x02\x02\u019E\u019D\x03\x02\x02\x02\u019E\u019F\x03\x02\x02" +
		"\x02\u019F\u01A0\x03\x02\x02\x02\u01A0\u01A1\t\n\x02\x02\u01A1T\x03\x02" +
		"\x02\x02\u01A2\u01A6\t\t\x02\x02\u01A3\u01A5\t\v\x02\x02\u01A4\u01A3\x03" +
		"\x02\x02\x02\u01A5\u01A8\x03\x02\x02\x02\u01A6\u01A4\x03\x02\x02\x02\u01A6" +
		"\u01A7\x03\x02\x02\x02\u01A7V\x03\x02\x02\x02\u01A8\u01A6\x03\x02\x02" +
		"\x02\u01A9\u01AD\t\f\x02\x02\u01AA\u01AC\t\x05\x02\x02\u01AB\u01AA\x03" +
		"\x02\x02\x02\u01AC\u01AF\x03\x02\x02\x02\u01AD\u01AB\x03\x02\x02\x02\u01AD" +
		"\u01AE\x03\x02\x02\x02\u01AEX\x03\x02\x02\x02\u01AF\u01AD\x03\x02\x02" +
		"\x020\x02\xC1\xC3\xC9\xCB\xD0\xD2\xD8\xDA\xDF\xE1\xE7\xE9\xEE\xF0\xF6" +
		"\xF8\xFD\xFF\u0105\u0107\u010C\u010E\u0116\u0118\u0124\u012A\u0130\u0132" +
		"\u013F\u0144\u0146\u014F\u0160\u0166\u0168\u016F\u0177\u0183\u0185\u0193" +
		"\u019E\u01A4\u01A6\u01AB\u01AD\f\x03\x02\x02\x03\x03\x03\x03\x04\x04\x03" +
		"\x05\x05\x03\x06\x06\x03\x07\x07\x03$\b\b\x02\x02\x02\x05\x02\x02\x04" +
		"\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

