// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
// @ts-nocheck
import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly Infix = 3;
	public static readonly As = 4;
	public static readonly If = 5;
	public static readonly Else = 6;
	public static readonly ElseIf = 7;
	public static readonly Loop = 8;
	public static readonly In = 9;
	public static readonly Break = 10;
	public static readonly Return = 11;
	public static readonly Preprocessor = 12;
	public static readonly LineBreak = 13;
	public static readonly OpenBracket = 14;
	public static readonly CloseBracket = 15;
	public static readonly OpenParen = 16;
	public static readonly CloseParen = 17;
	public static readonly OpenBrace = 18;
	public static readonly CloseBrace = 19;
	public static readonly Comma = 20;
	public static readonly Assign = 21;
	public static readonly Question = 22;
	public static readonly Colon = 23;
	public static readonly Dot = 24;
	public static readonly Plus = 25;
	public static readonly Minus = 26;
	public static readonly Exclamation = 27;
	public static readonly Asterisk = 28;
	public static readonly Slash = 29;
	public static readonly Modulo = 30;
	public static readonly Caret = 31;
	public static readonly Hash = 32;
	public static readonly LessThan = 33;
	public static readonly MoreThan = 34;
	public static readonly LessThanEquals = 35;
	public static readonly MoreThanEquals = 36;
	public static readonly Equals = 37;
	public static readonly NotEquals = 38;
	public static readonly And = 39;
	public static readonly Or = 40;
	public static readonly AsteriskAssign = 41;
	public static readonly SlashAssign = 42;
	public static readonly PercentAssign = 43;
	public static readonly PlusAssign = 44;
	public static readonly MinusAssign = 45;
	public static readonly Pipe = 46;
	public static readonly LambdaStart = 47;
	public static readonly Elipsis = 48;
	public static readonly BooleanLiteral = 49;
	public static readonly NumberLiteral = 50;
	public static readonly StringLiteral = 51;
	public static readonly ID = 52;
	public static readonly Skip = 53;
	public static readonly UnexpectedCharacter = 54;
	public static readonly ERROR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"Infix", "As", "If", "Else", "ElseIf", "Loop", "In", "Break", "Return", 
		"Preprocessor", "LineBreak", "OpenBracket", "CloseBracket", "OpenParen", 
		"CloseParen", "OpenBrace", "CloseBrace", "Comma", "Assign", "Question", 
		"Colon", "Dot", "Plus", "Minus", "Exclamation", "Asterisk", "Slash", "Modulo", 
		"Caret", "Hash", "LessThan", "MoreThan", "LessThanEquals", "MoreThanEquals", 
		"Equals", "NotEquals", "And", "Or", "AsteriskAssign", "SlashAssign", "PercentAssign", 
		"PlusAssign", "MinusAssign", "Pipe", "LambdaStart", "Elipsis", "BooleanLiteral", 
		"NumberLiteral", "StringLiteral", "ID", "Skip", "UnexpectedCharacter", 
		"SPACES", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "LINE_JOINING", 
		"NUMBER", "CHARACTER",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'infix'", "'as'", "'if'", "'else'", 
		"'elif'", "'loop'", "'in'", "'break'", "'return'", undefined, undefined, 
		"'['", "']'", "'('", "')'", "'{'", "'}'", "','", "'='", "'?'", "':'", 
		"'.'", "'+'", "'-'", "'!'", "'*'", "'/'", "'%'", "'^'", "'#'", "'<'", 
		"'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'", "'*='", "'/='", 
		"'%='", "'+='", "'-='", "'|'", "'\\'", "'...'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "Infix", "As", "If", "Else", "ElseIf", 
		"Loop", "In", "Break", "Return", "Preprocessor", "LineBreak", "OpenBracket", 
		"CloseBracket", "OpenParen", "CloseParen", "OpenBrace", "CloseBrace", 
		"Comma", "Assign", "Question", "Colon", "Dot", "Plus", "Minus", "Exclamation", 
		"Asterisk", "Slash", "Modulo", "Caret", "Hash", "LessThan", "MoreThan", 
		"LessThanEquals", "MoreThanEquals", "Equals", "NotEquals", "And", "Or", 
		"AsteriskAssign", "SlashAssign", "PercentAssign", "PlusAssign", "MinusAssign", 
		"Pipe", "LambdaStart", "Elipsis", "BooleanLiteral", "NumberLiteral", "StringLiteral", 
		"ID", "Skip", "UnexpectedCharacter",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 10:
			this.LineBreak_action(_localctx, actionIndex);
			break;

		case 11:
			this.OpenBracket_action(_localctx, actionIndex);
			break;

		case 12:
			this.CloseBracket_action(_localctx, actionIndex);
			break;

		case 13:
			this.OpenParen_action(_localctx, actionIndex);
			break;

		case 14:
			this.CloseParen_action(_localctx, actionIndex);
			break;

		case 15:
			this.OpenBrace_action(_localctx, actionIndex);
			break;

		case 16:
			this.CloseBrace_action(_localctx, actionIndex);
			break;
		}
	}
	private LineBreak_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.handleLineBreak()
			break;
		}
	}
	private OpenBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened++;
			break;
		}
	}
	private CloseBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened--;
			break;
		}
	}
	private OpenParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened++;
			break;
		}
	}
	private CloseParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened--;
			break;
		}
	}
	private OpenBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened++;
			break;
		}
	}
	private CloseBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.opened--;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 10:
			return this.LineBreak_sempred(_localctx, predIndex);
		}
		return true;
	}
	private LineBreak_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x028\u0196\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03" +
		"\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03" +
		"\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x07\v\xA7\n\v\f\v\x0E\v\xAA\v\v" +
		"\x03\v\x03\v\x03\f\x03\f\x03\f\x05\f\xB1\n\f\x03\f\x03\f\x05\f\xB5\n\f" +
		"\x03\f\x05\f\xB8\n\f\x05\f\xBA\n\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11" +
		"\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14" +
		"\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19" +
		"\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D" +
		"\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03\"" +
		"\x03#\x03#\x03#\x03$\x03$\x03$\x03%\x03%\x03%\x03&\x03&\x03&\x03\'\x03" +
		"\'\x03\'\x03(\x03(\x03(\x03)\x03)\x03)\x03*\x03*\x03*\x03+\x03+\x03+\x03" +
		",\x03,\x03,\x03-\x03-\x03.\x03.\x03/\x03/\x03/\x03/\x030\x030\x030\x03" +
		"0\x030\x030\x030\x030\x030\x050\u0120\n0\x031\x031\x051\u0124\n1\x031" +
		"\x031\x051\u0128\n1\x032\x032\x072\u012C\n2\f2\x0E2\u012F\v2\x032\x03" +
		"2\x033\x033\x073\u0135\n3\f3\x0E3\u0138\v3\x034\x034\x034\x034\x054\u013E" +
		"\n4\x034\x034\x035\x035\x035\x035\x036\x066\u0147\n6\r6\x0E6\u0148\x03" +
		"7\x037\x037\x037\x077\u014F\n7\f7\x0E7\u0152\v7\x037\x037\x037\x038\x03" +
		"8\x038\x038\x078\u015B\n8\f8\x0E8\u015E\v8\x039\x039\x059\u0162\n9\x03" +
		"9\x059\u0165\n9\x039\x039\x059\u0169\n9\x03:\x03:\x05:\u016D\n:\x03:\x03" +
		":\x06:\u0171\n:\r:\x0E:\u0172\x03:\x03:\x06:\u0177\n:\r:\x0E:\u0178\x07" +
		":\u017B\n:\f:\x0E:\u017E\v:\x03:\x06:\u0181\n:\r:\x0E:\u0182\x03:\x03" +
		":\x06:\u0187\n:\r:\x0E:\u0188\x07:\u018B\n:\f:\x0E:\u018E\v:\x05:\u0190" +
		"\n:\x03;\x03;\x03;\x05;\u0195\n;\x04\xA8\u0150\x02\x02<\x03\x02\x05\x05" +
		"\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02" +
		"\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02" +
		"\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19-\x02\x1A/" +
		"\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?\x02#" +
		"A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+Q\x02,S\x02-U\x02.W\x02" +
		"/Y\x020[\x021]\x022_\x023a\x024c\x025e\x026g\x027i\x028k\x02\x02m\x02" +
		"\x02o\x02\x02q\x02\x02s\x02\x02u\x02\x02\x03\x02\n\x05\x02C\\aac|\x06" +
		"\x022;C\\aac|\x04\x02\v\v\"\"\x04\x02\f\f\x0F\x0F\x03\x022;\x05\x022;" +
		"C\\c|\x03\x02))\v\x02$$))^^ddhhppttvvxx\x02\u01AB\x02\x03\x03\x02\x02" +
		"\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02" +
		"\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02" +
		"\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02" +
		"\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02" +
		"\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02" +
		"\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)" +
		"\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02" +
		"\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02" +
		"\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03" +
		"\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02" +
		"\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02" +
		"K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02" +
		"\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02" +
		"\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03" +
		"\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02" +
		"\x02\x02g\x03\x02\x02\x02\x02i\x03\x02\x02\x02\x03w\x03\x02\x02\x02\x05" +
		"}\x03\x02\x02\x02\x07\x80\x03\x02\x02\x02\t\x83\x03\x02\x02\x02\v\x88" +
		"\x03\x02\x02\x02\r\x8D\x03\x02\x02\x02\x0F\x92\x03\x02\x02\x02\x11\x95" +
		"\x03\x02\x02\x02\x13\x9B\x03\x02\x02\x02\x15\xA2\x03\x02\x02\x02\x17\xB9" +
		"\x03\x02\x02\x02\x19\xBD\x03\x02\x02\x02\x1B\xC0\x03\x02\x02\x02\x1D\xC3" +
		"\x03\x02\x02\x02\x1F\xC6\x03\x02\x02\x02!\xC9\x03\x02\x02\x02#\xCC\x03" +
		"\x02\x02\x02%\xCF\x03\x02\x02\x02\'\xD1\x03\x02\x02\x02)\xD3\x03\x02\x02" +
		"\x02+\xD5\x03\x02\x02\x02-\xD7\x03\x02\x02\x02/\xD9\x03\x02\x02\x021\xDB" +
		"\x03\x02\x02\x023\xDD\x03\x02\x02\x025\xDF\x03\x02\x02\x027\xE1\x03\x02" +
		"\x02\x029\xE3\x03\x02\x02\x02;\xE5\x03\x02\x02\x02=\xE7\x03\x02\x02\x02" +
		"?\xE9\x03\x02\x02\x02A\xEB\x03\x02\x02\x02C\xED\x03\x02\x02\x02E\xF0\x03" +
		"\x02\x02\x02G\xF3\x03\x02\x02\x02I\xF6\x03\x02\x02\x02K\xF9\x03\x02\x02" +
		"\x02M\xFC\x03\x02\x02\x02O\xFF\x03\x02\x02\x02Q\u0102\x03\x02\x02\x02" +
		"S\u0105\x03\x02\x02\x02U\u0108\x03\x02\x02\x02W\u010B\x03\x02\x02\x02" +
		"Y\u010E\x03\x02\x02\x02[\u0110\x03\x02\x02\x02]\u0112\x03\x02\x02\x02" +
		"_\u011F\x03\x02\x02\x02a\u0127\x03\x02\x02\x02c\u0129\x03\x02\x02\x02" +
		"e\u0132\x03\x02\x02\x02g\u013D\x03\x02\x02\x02i\u0141\x03\x02\x02\x02" +
		"k\u0146\x03\x02\x02\x02m\u014A\x03\x02\x02\x02o\u0156\x03\x02\x02\x02" +
		"q\u015F\x03\x02\x02\x02s\u018F\x03\x02\x02\x02u\u0194\x03\x02\x02\x02" +
		"wx\x07k\x02\x02xy\x07p\x02\x02yz\x07h\x02\x02z{\x07k\x02\x02{|\x07z\x02" +
		"\x02|\x04\x03\x02\x02\x02}~\x07c\x02\x02~\x7F\x07u\x02\x02\x7F\x06\x03" +
		"\x02\x02\x02\x80\x81\x07k\x02\x02\x81\x82\x07h\x02\x02\x82\b\x03\x02\x02" +
		"\x02\x83\x84\x07g\x02\x02\x84\x85\x07n\x02\x02\x85\x86\x07u\x02\x02\x86" +
		"\x87\x07g\x02\x02\x87\n\x03\x02\x02\x02\x88\x89\x07g\x02\x02\x89\x8A\x07" +
		"n\x02\x02\x8A\x8B\x07k\x02\x02\x8B\x8C\x07h\x02\x02\x8C\f\x03\x02\x02" +
		"\x02\x8D\x8E\x07n\x02\x02\x8E\x8F\x07q\x02\x02\x8F\x90\x07q\x02\x02\x90" +
		"\x91\x07r\x02\x02\x91\x0E\x03\x02\x02\x02\x92\x93\x07k\x02\x02\x93\x94" +
		"\x07p\x02\x02\x94\x10\x03\x02\x02\x02\x95\x96\x07d\x02\x02\x96\x97\x07" +
		"t\x02\x02\x97\x98\x07g\x02\x02\x98\x99\x07c\x02\x02\x99\x9A\x07m\x02\x02" +
		"\x9A\x12\x03\x02\x02\x02\x9B\x9C\x07t\x02\x02\x9C\x9D\x07g\x02\x02\x9D" +
		"\x9E\x07v\x02\x02\x9E\x9F\x07w\x02\x02\x9F\xA0\x07t\x02\x02\xA0\xA1\x07" +
		"p\x02\x02\xA1\x14\x03\x02\x02\x02\xA2\xA3\x07%\x02\x02\xA3\xA4\x07}\x02" +
		"\x02\xA4\xA8\x03\x02\x02\x02\xA5\xA7\v\x02\x02\x02\xA6\xA5\x03\x02\x02" +
		"\x02\xA7\xAA\x03\x02\x02\x02\xA8\xA9\x03\x02\x02\x02\xA8\xA6\x03\x02\x02" +
		"\x02\xA9\xAB\x03\x02\x02\x02\xAA\xA8\x03\x02\x02\x02\xAB\xAC\x07\x7F\x02" +
		"\x02\xAC\x16\x03\x02\x02\x02\xAD\xAE\x06\f\x02\x02\xAE\xBA\x05k6\x02\xAF" +
		"\xB1\x07\x0F\x02\x02\xB0\xAF\x03\x02\x02\x02\xB0\xB1\x03\x02\x02\x02\xB1" +
		"\xB2\x03\x02\x02\x02\xB2\xB5\x07\f\x02\x02\xB3\xB5\x07\x0F\x02\x02\xB4" +
		"\xB0\x03\x02\x02\x02\xB4\xB3\x03\x02\x02\x02\xB5\xB7\x03\x02\x02\x02\xB6" +
		"\xB8\x05k6\x02\xB7\xB6\x03\x02\x02\x02\xB7\xB8\x03\x02\x02\x02\xB8\xBA" +
		"\x03\x02\x02\x02\xB9\xAD\x03\x02\x02\x02\xB9\xB4\x03\x02\x02\x02\xBA\xBB" +
		"\x03\x02\x02\x02\xBB\xBC\b\f\x02\x02\xBC\x18\x03\x02\x02\x02\xBD\xBE\x07" +
		"]\x02\x02\xBE\xBF\b\r\x03\x02\xBF\x1A\x03\x02\x02\x02\xC0\xC1\x07_\x02" +
		"\x02\xC1\xC2\b\x0E\x04\x02\xC2\x1C\x03\x02\x02\x02\xC3\xC4\x07*\x02\x02" +
		"\xC4\xC5\b\x0F\x05\x02\xC5\x1E\x03\x02\x02\x02\xC6\xC7\x07+\x02\x02\xC7" +
		"\xC8\b\x10\x06\x02\xC8 \x03\x02\x02\x02\xC9\xCA\x07}\x02\x02\xCA\xCB\b" +
		"\x11\x07\x02\xCB\"\x03\x02\x02\x02\xCC\xCD\x07\x7F\x02\x02\xCD\xCE\b\x12" +
		"\b\x02\xCE$\x03\x02\x02\x02\xCF\xD0\x07.\x02\x02\xD0&\x03\x02\x02\x02" +
		"\xD1\xD2\x07?\x02\x02\xD2(\x03\x02\x02\x02\xD3\xD4\x07A\x02\x02\xD4*\x03" +
		"\x02\x02\x02\xD5\xD6\x07<\x02\x02\xD6,\x03\x02\x02\x02\xD7\xD8\x070\x02" +
		"\x02\xD8.\x03\x02\x02\x02\xD9\xDA\x07-\x02\x02\xDA0\x03\x02\x02\x02\xDB" +
		"\xDC\x07/\x02\x02\xDC2\x03\x02\x02\x02\xDD\xDE\x07#\x02\x02\xDE4\x03\x02" +
		"\x02\x02\xDF\xE0\x07,\x02\x02\xE06\x03\x02\x02\x02\xE1\xE2\x071\x02\x02" +
		"\xE28\x03\x02\x02\x02\xE3\xE4\x07\'\x02\x02\xE4:\x03\x02\x02\x02\xE5\xE6" +
		"\x07`\x02\x02\xE6<\x03\x02\x02\x02\xE7\xE8\x07%\x02\x02\xE8>\x03\x02\x02" +
		"\x02\xE9\xEA\x07>\x02\x02\xEA@\x03\x02\x02\x02\xEB\xEC\x07@\x02\x02\xEC" +
		"B\x03\x02\x02\x02\xED\xEE\x07>\x02\x02\xEE\xEF\x07?\x02\x02\xEFD\x03\x02" +
		"\x02\x02\xF0\xF1\x07@\x02\x02\xF1\xF2\x07?\x02\x02\xF2F\x03\x02\x02\x02" +
		"\xF3\xF4\x07?\x02\x02\xF4\xF5\x07?\x02\x02\xF5H\x03\x02\x02\x02\xF6\xF7" +
		"\x07#\x02\x02\xF7\xF8\x07?\x02\x02\xF8J\x03\x02\x02\x02\xF9\xFA\x07(\x02" +
		"\x02\xFA\xFB\x07(\x02\x02\xFBL\x03\x02\x02\x02\xFC\xFD\x07~\x02\x02\xFD" +
		"\xFE\x07~\x02\x02\xFEN\x03\x02\x02\x02\xFF\u0100\x07,\x02\x02\u0100\u0101" +
		"\x07?\x02\x02\u0101P\x03\x02\x02\x02\u0102\u0103\x071\x02\x02\u0103\u0104" +
		"\x07?\x02\x02\u0104R\x03\x02\x02\x02\u0105\u0106\x07\'\x02\x02\u0106\u0107" +
		"\x07?\x02\x02\u0107T\x03\x02\x02\x02\u0108\u0109\x07-\x02\x02\u0109\u010A" +
		"\x07?\x02\x02\u010AV\x03\x02\x02\x02\u010B\u010C\x07/\x02\x02\u010C\u010D" +
		"\x07?\x02\x02\u010DX\x03\x02\x02\x02\u010E\u010F\x07~\x02\x02\u010FZ\x03" +
		"\x02\x02\x02\u0110\u0111\x07^\x02\x02\u0111\\\x03\x02\x02\x02\u0112\u0113" +
		"\x070\x02\x02\u0113\u0114\x070\x02\x02\u0114\u0115\x070\x02\x02\u0115" +
		"^\x03\x02\x02\x02\u0116\u0117\x07v\x02\x02\u0117\u0118\x07t\x02\x02\u0118" +
		"\u0119\x07w\x02\x02\u0119\u0120\x07g\x02\x02\u011A\u011B\x07h\x02\x02" +
		"\u011B\u011C\x07c\x02\x02\u011C\u011D\x07n\x02\x02\u011D\u011E\x07u\x02" +
		"\x02\u011E\u0120\x07g\x02\x02\u011F\u0116\x03\x02\x02\x02\u011F\u011A" +
		"\x03\x02\x02\x02\u0120`\x03\x02\x02\x02\u0121\u0128\x05s:\x02\u0122\u0124" +
		"\x05s:\x02\u0123\u0122\x03\x02\x02\x02\u0123\u0124\x03\x02\x02\x02\u0124" +
		"\u0125\x03\x02\x02\x02\u0125\u0126\x070\x02\x02\u0126\u0128\x05s:\x02" +
		"\u0127\u0121\x03\x02\x02\x02\u0127\u0123\x03\x02\x02\x02\u0128b\x03\x02" +
		"\x02\x02\u0129\u012D\x07)\x02\x02\u012A\u012C\x05u;\x02\u012B\u012A\x03" +
		"\x02\x02\x02\u012C\u012F\x03\x02\x02\x02\u012D\u012B\x03\x02\x02\x02\u012D" +
		"\u012E\x03\x02\x02\x02\u012E\u0130\x03\x02\x02\x02\u012F\u012D\x03\x02" +
		"\x02\x02\u0130\u0131\x07)\x02\x02\u0131d\x03\x02\x02\x02\u0132\u0136\t" +
		"\x02\x02\x02\u0133\u0135\t\x03\x02\x02\u0134\u0133\x03\x02\x02\x02\u0135" +
		"\u0138\x03\x02\x02\x02\u0136\u0134\x03\x02\x02\x02\u0136\u0137\x03\x02" +
		"\x02\x02\u0137f\x03\x02\x02\x02\u0138\u0136\x03\x02\x02\x02\u0139\u013E" +
		"\x05k6\x02\u013A\u013E\x05o8\x02\u013B\u013E\x05m7\x02\u013C\u013E\x05" +
		"q9\x02\u013D\u0139\x03\x02\x02\x02\u013D\u013A\x03\x02\x02\x02\u013D\u013B" +
		"\x03\x02\x02\x02\u013D\u013C\x03\x02\x02\x02\u013E\u013F\x03\x02\x02\x02" +
		"\u013F\u0140\b4\t\x02\u0140h\x03\x02\x02\x02\u0141\u0142\v\x02\x02\x02" +
		"\u0142\u0143\x03\x02\x02\x02\u0143\u0144\b5\n\x02\u0144j\x03\x02\x02\x02" +
		"\u0145\u0147\t\x04\x02\x02\u0146\u0145\x03\x02\x02\x02\u0147\u0148\x03" +
		"\x02\x02\x02\u0148\u0146\x03\x02\x02\x02\u0148\u0149\x03\x02\x02\x02\u0149" +
		"l\x03\x02\x02\x02\u014A\u014B\x071\x02\x02\u014B\u014C\x07,\x02\x02\u014C" +
		"\u0150\x03\x02\x02\x02\u014D\u014F\v\x02\x02\x02\u014E\u014D\x03\x02\x02" +
		"\x02\u014F\u0152\x03\x02\x02\x02\u0150\u0151\x03\x02\x02\x02\u0150\u014E" +
		"\x03\x02\x02\x02\u0151\u0153\x03\x02\x02\x02\u0152\u0150\x03\x02\x02\x02" +
		"\u0153\u0154\x07,\x02\x02\u0154\u0155\x071\x02\x02\u0155n\x03\x02\x02" +
		"\x02\u0156\u0157\x071\x02\x02\u0157\u0158\x071\x02\x02\u0158\u015C\x03" +
		"\x02\x02\x02\u0159\u015B\n\x05\x02\x02\u015A\u0159\x03\x02\x02\x02\u015B" +
		"\u015E\x03\x02\x02\x02\u015C\u015A\x03\x02\x02\x02\u015C\u015D\x03\x02" +
		"\x02\x02\u015Dp\x03\x02\x02\x02\u015E\u015C\x03\x02\x02\x02\u015F\u0161" +
		"\x07^\x02\x02\u0160\u0162\x05k6\x02\u0161\u0160\x03\x02\x02\x02\u0161" +
		"\u0162\x03\x02\x02\x02\u0162\u0168\x03\x02\x02\x02\u0163\u0165\x07\x0F" +
		"\x02\x02\u0164\u0163\x03\x02\x02\x02\u0164\u0165\x03\x02\x02\x02\u0165" +
		"\u0166\x03\x02\x02\x02\u0166\u0169\x07\f\x02\x02\u0167\u0169\x07\x0F\x02" +
		"\x02\u0168\u0164\x03\x02\x02\x02\u0168\u0167\x03\x02\x02\x02\u0169r\x03" +
		"\x02\x02\x02\u016A\u016C\t\x06\x02\x02\u016B\u016D\t\x06\x02\x02\u016C" +
		"\u016B\x03\x02\x02\x02\u016C\u016D\x03\x02\x02\x02\u016D\u016E\x03\x02" +
		"\x02\x02\u016E\u0170\x07z\x02\x02\u016F\u0171\t\x07\x02\x02\u0170\u016F" +
		"\x03\x02\x02\x02\u0171\u0172\x03\x02\x02\x02\u0172\u0170\x03\x02\x02\x02" +
		"\u0172\u0173\x03\x02\x02\x02\u0173\u017C\x03\x02\x02\x02\u0174\u0176\x07" +
		"a\x02\x02\u0175\u0177\t\x07\x02\x02\u0176\u0175\x03\x02\x02\x02\u0177" +
		"\u0178\x03\x02\x02\x02\u0178\u0176\x03\x02\x02\x02\u0178\u0179\x03\x02" +
		"\x02\x02\u0179\u017B\x03\x02\x02\x02\u017A\u0174\x03\x02\x02\x02\u017B" +
		"\u017E\x03\x02\x02\x02\u017C\u017A\x03\x02\x02\x02\u017C\u017D\x03\x02" +
		"\x02\x02\u017D\u0190\x03\x02\x02\x02\u017E\u017C\x03\x02\x02\x02\u017F" +
		"\u0181\t\x06\x02\x02\u0180\u017F\x03\x02\x02\x02\u0181\u0182\x03\x02\x02" +
		"\x02\u0182\u0180\x03\x02\x02\x02\u0182\u0183\x03\x02\x02\x02\u0183\u018C" +
		"\x03\x02\x02\x02\u0184\u0186\x07a\x02\x02\u0185\u0187\t\x06\x02\x02\u0186" +
		"\u0185\x03\x02\x02\x02\u0187\u0188\x03\x02\x02\x02\u0188\u0186\x03\x02" +
		"\x02\x02\u0188\u0189\x03\x02\x02\x02\u0189\u018B\x03\x02\x02\x02\u018A" +
		"\u0184\x03\x02\x02\x02\u018B\u018E\x03\x02\x02\x02\u018C\u018A\x03\x02" +
		"\x02\x02\u018C\u018D\x03\x02\x02\x02\u018D\u0190\x03\x02\x02\x02\u018E" +
		"\u018C\x03\x02\x02\x02\u018F\u016A\x03\x02\x02\x02\u018F\u0180\x03\x02" +
		"\x02\x02\u0190t\x03\x02\x02\x02\u0191\u0195\n\b\x02\x02\u0192\u0193\x07" +
		"^\x02\x02\u0193\u0195\t\t\x02\x02\u0194\u0191\x03\x02\x02\x02\u0194\u0192" +
		"\x03\x02\x02\x02\u0195v\x03\x02\x02\x02\x1D\x02\xA8\xB0\xB4\xB7\xB9\u011F" +
		"\u0123\u0127\u012D\u0136\u013D\u0148\u0150\u015C\u0161\u0164\u0168\u016C" +
		"\u0172\u0178\u017C\u0182\u0188\u018C\u018F\u0194\v\x03\f\x02\x03\r\x03" +
		"\x03\x0E\x04\x03\x0F\x05\x03\x10\x06\x03\x11\x07\x03\x12\b\b\x02\x02\x02" +
		"\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

