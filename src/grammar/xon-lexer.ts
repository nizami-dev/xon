// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly IS = 3;
	public static readonly AS = 4;
	public static readonly IF = 5;
	public static readonly IN = 6;
	public static readonly ELSE = 7;
	public static readonly THEN = 8;
	public static readonly LOOP = 9;
	public static readonly INIT = 10;
	public static readonly BREAK = 11;
	public static readonly RETURN = 12;
	public static readonly OPEN_BRACKET = 13;
	public static readonly CLOSE_BRACKET = 14;
	public static readonly OPEN_PAREN = 15;
	public static readonly CLOSE_PAREN = 16;
	public static readonly OPEN_BRACE = 17;
	public static readonly CLOSE_BRACE = 18;
	public static readonly AD = 19;
	public static readonly DOT = 20;
	public static readonly PLUS = 21;
	public static readonly HASH = 22;
	public static readonly PIPE = 23;
	public static readonly COMMA = 24;
	public static readonly COLON = 25;
	public static readonly MINUS = 26;
	public static readonly SLASH = 27;
	public static readonly CARET = 28;
	public static readonly TILDE = 29;
	public static readonly ASSIGN = 30;
	public static readonly MODULO = 31;
	public static readonly QUESTION = 32;
	public static readonly ASTERISK = 33;
	public static readonly LESS_THAN = 34;
	public static readonly MORE_THAN = 35;
	public static readonly AMPERSAND = 36;
	public static readonly UNDERSCORE = 37;
	public static readonly EXCLAMATION = 38;
	public static readonly LAMBDA_START = 39;
	public static readonly FLOAT_LITERAL = 40;
	public static readonly INTEGER_LITERAL = 41;
	public static readonly BOOLEAN_LITERAL = 42;
	public static readonly CHAR_LITERAL = 43;
	public static readonly STRING_LITERAL = 44;
	public static readonly PREPROCESSOR = 45;
	public static readonly ID = 46;
	public static readonly NL = 47;
	public static readonly WS = 48;
	public static readonly COMMENT = 49;
	public static readonly ERROR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"IS", "AS", "IF", "IN", "ELSE", "THEN", "LOOP", "INIT", "BREAK", "RETURN", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "AD", "DOT", "PLUS", "HASH", "PIPE", "COMMA", "COLON", 
		"MINUS", "SLASH", "CARET", "TILDE", "ASSIGN", "MODULO", "QUESTION", "ASTERISK", 
		"LESS_THAN", "MORE_THAN", "AMPERSAND", "UNDERSCORE", "EXCLAMATION", "LAMBDA_START", 
		"FLOAT_LITERAL", "INTEGER_LITERAL", "BOOLEAN_LITERAL", "CHAR_LITERAL", 
		"STRING_LITERAL", "PREPROCESSOR", "ID", "NL", "WS", "COMMENT", "DigitNumber", 
		"AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'is'", "'as'", "'if'", "'in'", "'else'", 
		"'then'", "'loop'", "'init'", "'break'", "'return'", "'['", "']'", "'('", 
		"')'", "'{'", "'}'", "'@'", "'.'", "'+'", "'#'", "'|'", "','", "':'", 
		"'-'", "'/'", "'^'", "'~'", "'='", "'%'", "'?'", "'*'", "'<'", "'>'", 
		"'&'", "'_'", "'!'", "'\\'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "IS", "AS", "IF", "IN", "ELSE", "THEN", 
		"LOOP", "INIT", "BREAK", "RETURN", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "AD", "DOT", "PLUS", "HASH", 
		"PIPE", "COMMA", "COLON", "MINUS", "SLASH", "CARET", "TILDE", "ASSIGN", 
		"MODULO", "QUESTION", "ASTERISK", "LESS_THAN", "MORE_THAN", "AMPERSAND", 
		"UNDERSCORE", "EXCLAMATION", "LAMBDA_START", "FLOAT_LITERAL", "INTEGER_LITERAL", 
		"BOOLEAN_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", "PREPROCESSOR", "ID", 
		"NL", "WS", "COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 10:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 11:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 12:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 13:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 14:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 15:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 44:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 44:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x023\u0159\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x03\x02\x03" +
		"\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03" +
		"\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03" +
		"\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03" +
		"\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03" +
		"\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03" +
		"\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03#\x03#\x03$\x03$\x03%" +
		"\x03%\x03&\x03&\x03\'\x03\'\x05\'\xD1\n\'\x03\'\x03\'\x03\'\x03\'\x03" +
		"\'\x03\'\x03\'\x03\'\x03\'\x05\'\xDC\n\'\x03(\x03(\x05(\xE0\n(\x03(\x03" +
		"(\x03(\x05(\xE5\n(\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x05)\xF0" +
		"\n)\x03*\x03*\x03*\x03*\x03+\x03+\x03+\x03+\x07+\xFA\n+\f+\x0E+\xFD\v" +
		"+\x03+\x03+\x03,\x03,\x03,\x03,\x07,\u0105\n,\f,\x0E,\u0108\v,\x03,\x03" +
		",\x03-\x06-\u010D\n-\r-\x0E-\u010E\x03-\x03-\x07-\u0113\n-\f-\x0E-\u0116" +
		"\v-\x03.\x03.\x03.\x05.\u011B\n.\x03.\x03.\x05.\u011F\n.\x03.\x05.\u0122" +
		"\n.\x05.\u0124\n.\x03.\x03.\x03/\x06/\u0129\n/\r/\x0E/\u012A\x03/\x03" +
		"/\x030\x030\x030\x030\x070\u0133\n0\f0\x0E0\u0136\v0\x030\x030\x031\x06" +
		"1\u013B\n1\r1\x0E1\u013C\x031\x031\x061\u0141\n1\r1\x0E1\u0142\x071\u0145" +
		"\n1\f1\x0E1\u0148\v1\x032\x062\u014B\n2\r2\x0E2\u014C\x032\x032\x062\u0151" +
		"\n2\r2\x0E2\u0152\x072\u0155\n2\f2\x0E2\u0158\v2\x03\u0106\x02\x023\x03" +
		"\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11" +
		"\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02" +
		"\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19" +
		"-\x02\x1A/\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02" +
		"\"?\x02#A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+Q\x02,S\x02-" +
		"U\x02.W\x02/Y\x020[\x021]\x022_\x023a\x02\x02c\x02\x02\x03\x02\n\x03\x02" +
		"2;\x03\x02))\x03\x02$$\n\x02$$^^ddhhppttvvxx\x04\x02C\\c|\x04\x02\v\v" +
		"\"\"\x04\x02\f\f\x0F\x0F\x05\x022;C\\c|\x02\u016C\x02\x03\x03\x02\x02" +
		"\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02" +
		"\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02" +
		"\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02" +
		"\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02" +
		"\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02" +
		"\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)" +
		"\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02" +
		"\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02" +
		"\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03" +
		"\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02" +
		"\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02" +
		"K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02" +
		"\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02" +
		"\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03" +
		"\x02\x02\x02\x03e\x03\x02\x02\x02\x05h\x03\x02\x02\x02\x07k\x03\x02\x02" +
		"\x02\tn\x03\x02\x02\x02\vq\x03\x02\x02\x02\rv\x03\x02\x02\x02\x0F{\x03" +
		"\x02\x02\x02\x11\x80\x03\x02\x02\x02\x13\x85\x03\x02\x02\x02\x15\x8B\x03" +
		"\x02\x02\x02\x17\x92\x03\x02\x02\x02\x19\x95\x03\x02\x02\x02\x1B\x98\x03" +
		"\x02\x02\x02\x1D\x9B\x03\x02\x02\x02\x1F\x9E\x03\x02\x02\x02!\xA1\x03" +
		"\x02\x02\x02#\xA4\x03\x02\x02\x02%\xA6\x03\x02\x02\x02\'\xA8\x03\x02\x02" +
		"\x02)\xAA\x03\x02\x02\x02+\xAC\x03\x02\x02\x02-\xAE\x03\x02\x02\x02/\xB0" +
		"\x03\x02\x02\x021\xB2\x03\x02\x02\x023\xB4\x03\x02\x02\x025\xB6\x03\x02" +
		"\x02\x027\xB8\x03\x02\x02\x029\xBA\x03\x02\x02\x02;\xBC\x03\x02\x02\x02" +
		"=\xBE\x03\x02\x02\x02?\xC0\x03\x02\x02\x02A\xC2\x03\x02\x02\x02C\xC4\x03" +
		"\x02\x02\x02E\xC6\x03\x02\x02\x02G\xC8\x03\x02\x02\x02I\xCA\x03\x02\x02" +
		"\x02K\xCC\x03\x02\x02\x02M\xDB\x03\x02\x02\x02O\xE4\x03\x02\x02\x02Q\xEF" +
		"\x03\x02\x02\x02S\xF1\x03\x02\x02\x02U\xF5\x03\x02\x02\x02W\u0100\x03" +
		"\x02\x02\x02Y\u010C\x03\x02\x02\x02[\u0123\x03\x02\x02\x02]\u0128\x03" +
		"\x02\x02\x02_\u012E\x03\x02\x02\x02a\u013A\x03\x02\x02\x02c\u014A\x03" +
		"\x02\x02\x02ef\x07k\x02\x02fg\x07u\x02\x02g\x04\x03\x02\x02\x02hi\x07" +
		"c\x02\x02ij\x07u\x02\x02j\x06\x03\x02\x02\x02kl\x07k\x02\x02lm\x07h\x02" +
		"\x02m\b\x03\x02\x02\x02no\x07k\x02\x02op\x07p\x02\x02p\n\x03\x02\x02\x02" +
		"qr\x07g\x02\x02rs\x07n\x02\x02st\x07u\x02\x02tu\x07g\x02\x02u\f\x03\x02" +
		"\x02\x02vw\x07v\x02\x02wx\x07j\x02\x02xy\x07g\x02\x02yz\x07p\x02\x02z" +
		"\x0E\x03\x02\x02\x02{|\x07n\x02\x02|}\x07q\x02\x02}~\x07q\x02\x02~\x7F" +
		"\x07r\x02\x02\x7F\x10\x03\x02\x02\x02\x80\x81\x07k\x02\x02\x81\x82\x07" +
		"p\x02\x02\x82\x83\x07k\x02\x02\x83\x84\x07v\x02\x02\x84\x12\x03\x02\x02" +
		"\x02\x85\x86\x07d\x02\x02\x86\x87\x07t\x02\x02\x87\x88\x07g\x02\x02\x88" +
		"\x89\x07c\x02\x02\x89\x8A\x07m\x02\x02\x8A\x14\x03\x02\x02\x02\x8B\x8C" +
		"\x07t\x02\x02\x8C\x8D\x07g\x02\x02\x8D\x8E\x07v\x02\x02\x8E\x8F\x07w\x02" +
		"\x02\x8F\x90\x07t\x02\x02\x90\x91\x07p\x02\x02\x91\x16\x03\x02\x02\x02" +
		"\x92\x93\x07]\x02\x02\x93\x94\b\f\x02\x02\x94\x18\x03\x02\x02\x02\x95" +
		"\x96\x07_\x02\x02\x96\x97\b\r\x03\x02\x97\x1A\x03\x02\x02\x02\x98\x99" +
		"\x07*\x02\x02\x99\x9A\b\x0E\x04\x02\x9A\x1C\x03\x02\x02\x02\x9B\x9C\x07" +
		"+\x02\x02\x9C\x9D\b\x0F\x05\x02\x9D\x1E\x03\x02\x02\x02\x9E\x9F\x07}\x02" +
		"\x02\x9F\xA0\b\x10\x06\x02\xA0 \x03\x02\x02\x02\xA1\xA2\x07\x7F\x02\x02" +
		"\xA2\xA3\b\x11\x07\x02\xA3\"\x03\x02\x02\x02\xA4\xA5\x07B\x02\x02\xA5" +
		"$\x03\x02\x02\x02\xA6\xA7\x070\x02\x02\xA7&\x03\x02\x02\x02\xA8\xA9\x07" +
		"-\x02\x02\xA9(\x03\x02\x02\x02\xAA\xAB\x07%\x02\x02\xAB*\x03\x02\x02\x02" +
		"\xAC\xAD\x07~\x02\x02\xAD,\x03\x02\x02\x02\xAE\xAF\x07.\x02\x02\xAF.\x03" +
		"\x02\x02\x02\xB0\xB1\x07<\x02\x02\xB10\x03\x02\x02\x02\xB2\xB3\x07/\x02" +
		"\x02\xB32\x03\x02\x02\x02\xB4\xB5\x071\x02\x02\xB54\x03\x02\x02\x02\xB6" +
		"\xB7\x07`\x02\x02\xB76\x03\x02\x02\x02\xB8\xB9\x07\x80\x02\x02\xB98\x03" +
		"\x02\x02\x02\xBA\xBB\x07?\x02\x02\xBB:\x03\x02\x02\x02\xBC\xBD\x07\'\x02" +
		"\x02\xBD<\x03\x02\x02\x02\xBE\xBF\x07A\x02\x02\xBF>\x03\x02\x02\x02\xC0" +
		"\xC1\x07,\x02\x02\xC1@\x03\x02\x02\x02\xC2\xC3\x07>\x02\x02\xC3B\x03\x02" +
		"\x02\x02\xC4\xC5\x07@\x02\x02\xC5D\x03\x02\x02\x02\xC6\xC7\x07(\x02\x02" +
		"\xC7F\x03\x02\x02\x02\xC8\xC9\x07a\x02\x02\xC9H\x03\x02\x02\x02\xCA\xCB" +
		"\x07#\x02\x02\xCBJ\x03\x02\x02\x02\xCC\xCD\x07^\x02\x02\xCDL\x03\x02\x02" +
		"\x02\xCE\xD0\t\x02\x02\x02\xCF\xD1\t\x02\x02\x02\xD0\xCF\x03\x02\x02\x02" +
		"\xD0\xD1\x03\x02\x02\x02\xD1\xD2\x03\x02\x02\x02\xD2\xD3\x07z\x02\x02" +
		"\xD3\xD4\x05c2\x02\xD4\xD5\x070\x02\x02\xD5\xD6\x05c2\x02\xD6\xDC\x03" +
		"\x02\x02\x02\xD7\xD8\x05a1\x02\xD8\xD9\x070\x02\x02\xD9\xDA\x05a1\x02" +
		"\xDA\xDC\x03\x02\x02\x02\xDB\xCE\x03\x02\x02\x02\xDB\xD7\x03\x02\x02\x02" +
		"\xDCN\x03\x02\x02\x02\xDD\xDF\t\x02\x02\x02\xDE\xE0\t\x02\x02\x02\xDF" +
		"\xDE\x03\x02\x02\x02\xDF\xE0\x03\x02\x02\x02\xE0\xE1\x03\x02\x02\x02\xE1" +
		"\xE2\x07z\x02\x02\xE2\xE5\x05c2\x02\xE3\xE5\x05a1\x02\xE4\xDD\x03\x02" +
		"\x02\x02\xE4\xE3\x03\x02\x02\x02\xE5P\x03\x02\x02\x02\xE6\xE7\x07v\x02" +
		"\x02\xE7\xE8\x07t\x02\x02\xE8\xE9\x07w\x02\x02\xE9\xF0\x07g\x02\x02\xEA" +
		"\xEB\x07h\x02\x02\xEB\xEC\x07c\x02\x02\xEC\xED\x07n\x02\x02\xED\xEE\x07" +
		"u\x02\x02\xEE\xF0\x07g\x02\x02\xEF\xE6\x03\x02\x02\x02\xEF\xEA\x03\x02" +
		"\x02\x02\xF0R\x03\x02\x02\x02\xF1\xF2\x07)\x02\x02\xF2\xF3\n\x03\x02\x02" +
		"\xF3\xF4\x07)\x02\x02\xF4T\x03\x02\x02\x02\xF5\xFB\x07$\x02\x02\xF6\xFA" +
		"\n\x04\x02\x02\xF7\xF8\x07^\x02\x02\xF8\xFA\t\x05\x02\x02\xF9\xF6\x03" +
		"\x02\x02\x02\xF9\xF7\x03\x02\x02\x02\xFA\xFD\x03\x02\x02\x02\xFB\xF9\x03" +
		"\x02\x02\x02\xFB\xFC\x03\x02\x02\x02\xFC\xFE\x03\x02\x02\x02\xFD\xFB\x03" +
		"\x02\x02\x02\xFE\xFF\x07$\x02\x02\xFFV\x03\x02\x02\x02\u0100\u0101\x07" +
		"%\x02\x02\u0101\u0102\x07}\x02\x02\u0102\u0106\x03\x02\x02\x02\u0103\u0105" +
		"\v\x02\x02\x02\u0104\u0103\x03\x02\x02\x02\u0105\u0108\x03\x02\x02\x02" +
		"\u0106\u0107\x03\x02\x02\x02\u0106\u0104\x03\x02\x02\x02\u0107\u0109\x03" +
		"\x02\x02\x02\u0108\u0106\x03\x02\x02\x02\u0109\u010A\x07\x7F\x02\x02\u010A" +
		"X\x03\x02\x02\x02\u010B\u010D\t\x06\x02\x02\u010C\u010B\x03\x02\x02\x02" +
		"\u010D\u010E\x03\x02\x02\x02\u010E\u010C\x03\x02\x02\x02\u010E\u010F\x03" +
		"\x02\x02\x02\u010F\u0114\x03\x02\x02\x02\u0110\u0111\x07a\x02\x02\u0111" +
		"\u0113\t\x06\x02\x02\u0112\u0110\x03\x02\x02\x02\u0113\u0116\x03\x02\x02" +
		"\x02\u0114\u0112\x03\x02\x02\x02\u0114\u0115\x03\x02\x02\x02\u0115Z\x03" +
		"\x02\x02\x02\u0116\u0114\x03\x02\x02\x02\u0117\u0118\x06.\x02\x02\u0118" +
		"\u0124\x05]/\x02\u0119\u011B\x07\x0F\x02\x02\u011A\u0119\x03\x02\x02\x02" +
		"\u011A\u011B\x03\x02\x02\x02\u011B\u011C\x03\x02\x02\x02\u011C\u011F\x07" +
		"\f\x02\x02\u011D\u011F\x07\x0F\x02\x02\u011E\u011A\x03\x02\x02\x02\u011E" +
		"\u011D\x03\x02\x02\x02\u011F\u0121\x03\x02\x02\x02\u0120\u0122\x05]/\x02" +
		"\u0121\u0120\x03\x02\x02\x02\u0121\u0122\x03\x02\x02\x02\u0122\u0124\x03" +
		"\x02\x02\x02\u0123\u0117\x03\x02\x02\x02\u0123\u011E\x03\x02\x02\x02\u0124" +
		"\u0125\x03\x02\x02\x02\u0125\u0126\b.\b\x02\u0126\\\x03\x02\x02\x02\u0127" +
		"\u0129\t\x07\x02\x02\u0128\u0127\x03\x02\x02\x02\u0129\u012A\x03\x02\x02" +
		"\x02\u012A\u0128\x03\x02\x02\x02\u012A\u012B\x03\x02\x02\x02\u012B\u012C" +
		"\x03\x02\x02\x02\u012C\u012D\b/\t\x02\u012D^\x03\x02\x02\x02\u012E\u012F" +
		"\x07/\x02\x02\u012F\u0130\x07/\x02\x02\u0130\u0134\x03\x02\x02\x02\u0131" +
		"\u0133\n\b\x02\x02\u0132\u0131\x03\x02\x02\x02\u0133\u0136\x03\x02\x02" +
		"\x02\u0134\u0132\x03\x02\x02\x02\u0134\u0135\x03\x02\x02\x02\u0135\u0137" +
		"\x03\x02\x02\x02\u0136\u0134\x03\x02\x02\x02\u0137\u0138\b0\t\x02\u0138" +
		"`\x03\x02\x02\x02\u0139\u013B\t\x02\x02\x02\u013A\u0139\x03\x02\x02\x02" +
		"\u013B\u013C\x03\x02\x02\x02\u013C\u013A\x03\x02\x02\x02\u013C\u013D\x03" +
		"\x02\x02\x02\u013D\u0146\x03\x02\x02\x02\u013E\u0140\x07a\x02\x02\u013F" +
		"\u0141\t\x02\x02\x02\u0140\u013F\x03\x02\x02\x02\u0141\u0142\x03\x02\x02" +
		"\x02\u0142\u0140\x03\x02\x02\x02\u0142\u0143\x03\x02\x02\x02\u0143\u0145" +
		"\x03\x02\x02\x02\u0144\u013E\x03\x02\x02\x02\u0145\u0148\x03\x02\x02\x02" +
		"\u0146\u0144\x03\x02\x02\x02\u0146\u0147\x03\x02\x02\x02\u0147b\x03\x02" +
		"\x02\x02\u0148\u0146\x03\x02\x02\x02\u0149\u014B\t\t\x02\x02\u014A\u0149" +
		"\x03\x02\x02\x02\u014B\u014C\x03\x02\x02\x02\u014C\u014A\x03\x02\x02\x02" +
		"\u014C\u014D\x03\x02\x02\x02\u014D\u0156\x03\x02\x02\x02\u014E\u0150\x07" +
		"a\x02\x02\u014F\u0151\t\t\x02\x02\u0150\u014F\x03\x02\x02\x02\u0151\u0152" +
		"\x03\x02\x02\x02\u0152\u0150\x03\x02\x02\x02\u0152\u0153\x03\x02\x02\x02" +
		"\u0153\u0155\x03\x02\x02\x02\u0154\u014E\x03\x02\x02\x02\u0155\u0158\x03" +
		"\x02\x02\x02\u0156\u0154\x03\x02\x02\x02\u0156\u0157\x03\x02\x02\x02\u0157" +
		"d\x03\x02\x02\x02\u0158\u0156\x03\x02\x02\x02\x19\x02\xD0\xDB\xDF\xE4" +
		"\xEF\xF9\xFB\u0106\u010E\u0114\u011A\u011E\u0121\u0123\u012A\u0134\u013C" +
		"\u0142\u0146\u014C\u0152\u0156\n\x03\f\x02\x03\r\x03\x03\x0E\x04\x03\x0F" +
		"\x05\x03\x10\x06\x03\x11\x07\x03.\b\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

