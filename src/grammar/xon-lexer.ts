// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN_BRACKET = 3;
	public static readonly CLOSE_BRACKET = 4;
	public static readonly OPEN_PAREN = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_BRACE = 7;
	public static readonly CLOSE_BRACE = 8;
	public static readonly ACTUAL = 9;
	public static readonly BREAK = 10;
	public static readonly CONTINUE = 11;
	public static readonly DO = 12;
	public static readonly ELSE = 13;
	public static readonly EXPECT = 14;
	public static readonly EXPORT = 15;
	public static readonly FOR = 16;
	public static readonly IF = 17;
	public static readonly RETURN = 18;
	public static readonly WHILE = 19;
	public static readonly ASSIGN = 20;
	public static readonly COMMA = 21;
	public static readonly META = 22;
	public static readonly COLON = 23;
	public static readonly QUESTION = 24;
	public static readonly DOT = 25;
	public static readonly LAMBDA = 26;
	public static readonly FLOAT_LITERAL = 27;
	public static readonly INTEGER_LITERAL = 28;
	public static readonly STRING_LITERAL = 29;
	public static readonly PREPROCESSOR = 30;
	public static readonly ID = 31;
	public static readonly OP = 32;
	public static readonly NL = 33;
	public static readonly LINE_COMMENT = 34;
	public static readonly WS = 35;
	public static readonly BLOCK_COMMENT = 36;
	public static readonly LINE_JOINING = 37;
	public static readonly UNEXPECTED = 38;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", "DO", "ELSE", "EXPECT", 
		"EXPORT", "FOR", "IF", "RETURN", "WHILE", "ASSIGN", "COMMA", "META", "COLON", 
		"QUESTION", "DOT", "LAMBDA", "FLOAT_LITERAL", "INTEGER_LITERAL", "STRING_LITERAL", 
		"PREPROCESSOR", "ID", "OP", "NL", "LINE_COMMENT", "WS", "BLOCK_COMMENT", 
		"LINE_JOINING", "UNEXPECTED", "Radix", "DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'actual'", "'break'", "'continue'", "'do'", "'else'", "'expect'", "'export'", 
		"'for'", "'if'", "'return'", "'while'", "'='", "','", "'::'", "':'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", 
		"DO", "ELSE", "EXPECT", "EXPORT", "FOR", "IF", "RETURN", "WHILE", "ASSIGN", 
		"COMMA", "META", "COLON", "QUESTION", "DOT", "LAMBDA", "FLOAT_LITERAL", 
		"INTEGER_LITERAL", "STRING_LITERAL", "PREPROCESSOR", "ID", "OP", "NL", 
		"LINE_COMMENT", "WS", "BLOCK_COMMENT", "LINE_JOINING", "UNEXPECTED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 2:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 3:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 4:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 5:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 30:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02(\u0163\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x03\x02\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13" +
		"\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17" +
		"\x03\x17\x05\x17\xAF\n\x17\x03\x17\x03\x17\x03\x18\x03\x18\x05\x18\xB5" +
		"\n\x18\x03\x18\x03\x18\x03\x18\x05\x18\xBA\n\x18\x03\x19\x03\x19\x05\x19" +
		"\xBE\n\x19\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19\x05\x19\xC5\n\x19\x03" +
		"\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x05" +
		"\x1A\xD0\n\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B\xD6\n\x1B\x03\x1C" +
		"\x03\x1C\x03\x1C\x03\x1C\x07\x1C\xDC\n\x1C\f\x1C\x0E\x1C\xDF\v\x1C\x03" +
		"\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x07\x1D\xE9" +
		"\n\x1D\f\x1D\x0E\x1D\xEC\v\x1D\x03\x1D\x03\x1D\x07\x1D\xF0\n\x1D\f\x1D" +
		"\x0E\x1D\xF3\v\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x07\x1E\xF9\n\x1E\f" +
		"\x1E\x0E\x1E\xFC\v\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F" +
		"\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F" +
		"\x03\x1F\x05\x1F\u010E\n\x1F\x03 \x03 \x07 \u0112\n \f \x0E \u0115\v " +
		"\x06 \u0117\n \r \x0E \u0118\x03 \x03 \x03!\x03!\x03!\x03!\x07!\u0121" +
		"\n!\f!\x0E!\u0124\v!\x03\"\x06\"\u0127\n\"\r\"\x0E\"\u0128\x03\"\x03\"" +
		"\x03#\x03#\x03#\x03#\x03#\x07#\u0132\n#\f#\x0E#\u0135\v#\x03#\x03#\x03" +
		"#\x03#\x03#\x03$\x03$\x07$\u013E\n$\f$\x0E$\u0141\v$\x03$\x05$\u0144\n" +
		"$\x03$\x03$\x05$\u0148\n$\x03$\x03$\x03%\x03%\x03%\x03%\x03&\x03&\x05" +
		"&\u0152\n&\x03&\x03&\x03\'\x03\'\x07\'\u0158\n\'\f\'\x0E\'\u015B\v\'\x03" +
		"(\x03(\x07(\u015F\n(\f(\x0E(\u0162\v(\x05\xEA\xF1\u0133\x02\x02)\x03\x02" +
		"\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02" +
		"\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02\x12" +
		"\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19-\x02" +
		"\x1A/\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?" +
		"\x02#A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02\x02M\x02\x02O\x02\x02\x03\x02" +
		"\r\x03\x02))\n\x02))^^ddhhppttvvxx\x05\x02C\\aac|\x06\x022;C\\aac|\x06" +
		"\x02##\'(,`~~\x04\x02\f\f\x0F\x0F\x04\x02\v\v\"\"\x03\x022;\x04\x02ZZ" +
		"zz\x04\x022;aa\x05\x022;C\\c|\x02\u0186\x02\x03\x03\x02\x02\x02\x02\x05" +
		"\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03" +
		"\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03" +
		"\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03" +
		"\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03" +
		"\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02" +
		"\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02" +
		"\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03" +
		"\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02" +
		"\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02" +
		"?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02" +
		"\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x03Q\x03\x02\x02\x02" +
		"\x05T\x03\x02\x02\x02\x07W\x03\x02\x02\x02\tZ\x03\x02\x02\x02\v]\x03\x02" +
		"\x02\x02\r`\x03\x02\x02\x02\x0Fc\x03\x02\x02\x02\x11j\x03\x02\x02\x02" +
		"\x13p\x03\x02\x02\x02\x15y\x03\x02\x02\x02\x17|\x03\x02\x02\x02\x19\x81" +
		"\x03\x02\x02\x02\x1B\x88\x03\x02\x02\x02\x1D\x8F\x03\x02\x02\x02\x1F\x93" +
		"\x03\x02\x02\x02!\x96\x03\x02\x02\x02#\x9D\x03\x02\x02\x02%\xA3\x03\x02" +
		"\x02\x02\'\xA5\x03\x02\x02\x02)\xA7\x03\x02\x02\x02+\xAA\x03\x02\x02\x02" +
		"-\xAE\x03\x02\x02\x02/\xB4\x03\x02\x02\x021\xBD\x03\x02\x02\x023\xCF\x03" +
		"\x02\x02\x025\xD5\x03\x02\x02\x027\xD7\x03\x02\x02\x029\xE2\x03\x02\x02" +
		"\x02;\xF6\x03\x02\x02\x02=\u010D\x03\x02\x02\x02?\u0116\x03\x02\x02\x02" +
		"A\u011C\x03\x02\x02\x02C\u0126\x03\x02\x02\x02E\u012C\x03\x02\x02\x02" +
		"G\u013B\x03\x02\x02\x02I\u014B\x03\x02\x02\x02K\u014F\x03\x02\x02\x02" +
		"M\u0155\x03\x02\x02\x02O\u015C\x03\x02\x02\x02QR\x07]\x02\x02RS\b\x02" +
		"\x02\x02S\x04\x03\x02\x02\x02TU\x07_\x02\x02UV\b\x03\x03\x02V\x06\x03" +
		"\x02\x02\x02WX\x07*\x02\x02XY\b\x04\x04\x02Y\b\x03\x02\x02\x02Z[\x07+" +
		"\x02\x02[\\\b\x05\x05\x02\\\n\x03\x02\x02\x02]^\x07}\x02\x02^_\b\x06\x06" +
		"\x02_\f\x03\x02\x02\x02`a\x07\x7F\x02\x02ab\b\x07\x07\x02b\x0E\x03\x02" +
		"\x02\x02cd\x07c\x02\x02de\x07e\x02\x02ef\x07v\x02\x02fg\x07w\x02\x02g" +
		"h\x07c\x02\x02hi\x07n\x02\x02i\x10\x03\x02\x02\x02jk\x07d\x02\x02kl\x07" +
		"t\x02\x02lm\x07g\x02\x02mn\x07c\x02\x02no\x07m\x02\x02o\x12\x03\x02\x02" +
		"\x02pq\x07e\x02\x02qr\x07q\x02\x02rs\x07p\x02\x02st\x07v\x02\x02tu\x07" +
		"k\x02\x02uv\x07p\x02\x02vw\x07w\x02\x02wx\x07g\x02\x02x\x14\x03\x02\x02" +
		"\x02yz\x07f\x02\x02z{\x07q\x02\x02{\x16\x03\x02\x02\x02|}\x07g\x02\x02" +
		"}~\x07n\x02\x02~\x7F\x07u\x02\x02\x7F\x80\x07g\x02\x02\x80\x18\x03\x02" +
		"\x02\x02\x81\x82\x07g\x02\x02\x82\x83\x07z\x02\x02\x83\x84\x07r\x02\x02" +
		"\x84\x85\x07g\x02\x02\x85\x86\x07e\x02\x02\x86\x87\x07v\x02\x02\x87\x1A" +
		"\x03\x02\x02\x02\x88\x89\x07g\x02\x02\x89\x8A\x07z\x02\x02\x8A\x8B\x07" +
		"r\x02\x02\x8B\x8C\x07q\x02\x02\x8C\x8D\x07t\x02\x02\x8D\x8E\x07v\x02\x02" +
		"\x8E\x1C\x03\x02\x02\x02\x8F\x90\x07h\x02\x02\x90\x91\x07q\x02\x02\x91" +
		"\x92\x07t\x02\x02\x92\x1E\x03\x02\x02\x02\x93\x94\x07k\x02\x02\x94\x95" +
		"\x07h\x02\x02\x95 \x03\x02\x02\x02\x96\x97\x07t\x02\x02\x97\x98\x07g\x02" +
		"\x02\x98\x99\x07v\x02\x02\x99\x9A\x07w\x02\x02\x9A\x9B\x07t\x02\x02\x9B" +
		"\x9C\x07p\x02\x02\x9C\"\x03\x02\x02\x02\x9D\x9E\x07y\x02\x02\x9E\x9F\x07" +
		"j\x02\x02\x9F\xA0\x07k\x02\x02\xA0\xA1\x07n\x02\x02\xA1\xA2\x07g\x02\x02" +
		"\xA2$\x03\x02\x02\x02\xA3\xA4\x07?\x02\x02\xA4&\x03\x02\x02\x02\xA5\xA6" +
		"\x07.\x02\x02\xA6(\x03\x02\x02\x02\xA7\xA8\x07<\x02\x02\xA8\xA9\x07<\x02" +
		"\x02\xA9*\x03\x02\x02\x02\xAA\xAB\x07<\x02\x02\xAB,\x03\x02\x02\x02\xAC" +
		"\xAF\x05? \x02\xAD\xAF\x05C\"\x02\xAE\xAC\x03\x02\x02\x02\xAE\xAD\x03" +
		"\x02\x02\x02\xAE\xAF\x03\x02\x02\x02\xAF\xB0\x03\x02\x02\x02\xB0\xB1\x07" +
		"A\x02\x02\xB1.\x03\x02\x02\x02\xB2\xB5\x05? \x02\xB3\xB5\x05C\"\x02\xB4" +
		"\xB2\x03\x02\x02\x02\xB4\xB3\x03\x02\x02\x02\xB4\xB5\x03\x02\x02\x02\xB5" +
		"\xB6\x03\x02\x02\x02\xB6\xB9\x070\x02\x02\xB7\xBA\x05? \x02\xB8\xBA\x05" +
		"C\"\x02\xB9\xB7\x03\x02\x02\x02\xB9\xB8\x03\x02\x02\x02\xB9\xBA\x03\x02" +
		"\x02\x02\xBA0\x03\x02\x02\x02\xBB\xBE\x05? \x02\xBC\xBE\x05C\"\x02\xBD" +
		"\xBB\x03\x02\x02\x02\xBD\xBC\x03\x02\x02\x02\xBD\xBE\x03\x02\x02\x02\xBE" +
		"\xBF\x03\x02\x02\x02\xBF\xC0\x07?\x02\x02\xC0\xC1\x07@\x02\x02\xC1\xC4" +
		"\x03\x02\x02\x02\xC2\xC5\x05? \x02\xC3\xC5\x05C\"\x02\xC4\xC2\x03\x02" +
		"\x02\x02\xC4\xC3\x03\x02\x02\x02\xC4\xC5\x03\x02\x02\x02\xC52\x03\x02" +
		"\x02\x02\xC6\xC7\x05K&\x02\xC7\xC8\x05O(\x02\xC8\xC9\x070\x02\x02\xC9" +
		"\xCA\x05O(\x02\xCA\xD0\x03\x02\x02\x02\xCB\xCC\x05M\'\x02\xCC\xCD\x07" +
		"0\x02\x02\xCD\xCE\x05M\'\x02\xCE\xD0\x03\x02\x02\x02\xCF\xC6\x03\x02\x02" +
		"\x02\xCF\xCB\x03\x02\x02\x02\xD04\x03\x02\x02\x02\xD1\xD2\x05K&\x02\xD2" +
		"\xD3\x05O(\x02\xD3\xD6\x03\x02\x02\x02\xD4\xD6\x05M\'\x02\xD5\xD1\x03" +
		"\x02\x02\x02\xD5\xD4\x03\x02\x02\x02\xD66\x03\x02\x02\x02\xD7\xDD\x07" +
		")\x02\x02\xD8\xDC\n\x02\x02\x02\xD9\xDA\x07^\x02\x02\xDA\xDC\t\x03\x02" +
		"\x02\xDB\xD8\x03\x02\x02\x02\xDB\xD9\x03\x02\x02\x02\xDC\xDF\x03\x02\x02" +
		"\x02\xDD\xDB\x03\x02\x02\x02\xDD\xDE\x03\x02\x02\x02\xDE\xE0\x03\x02\x02" +
		"\x02\xDF\xDD\x03\x02\x02\x02\xE0\xE1\x07)\x02\x02\xE18\x03\x02\x02\x02" +
		"\xE2\xE3\x07%\x02\x02\xE3\xE4\x07}\x02\x02\xE4\xF1\x03\x02\x02\x02\xE5" +
		"\xF0\x059\x1D\x02\xE6\xEA\x07}\x02\x02\xE7\xE9\v\x02\x02\x02\xE8\xE7\x03" +
		"\x02\x02\x02\xE9\xEC\x03\x02\x02\x02\xEA\xEB\x03\x02\x02\x02\xEA\xE8\x03" +
		"\x02\x02\x02\xEB\xED\x03\x02\x02\x02\xEC\xEA\x03\x02\x02\x02\xED\xF0\x07" +
		"\x7F\x02\x02\xEE\xF0\v\x02\x02\x02\xEF\xE5\x03\x02\x02\x02\xEF\xE6\x03" +
		"\x02\x02\x02\xEF\xEE\x03\x02\x02\x02\xF0\xF3\x03\x02\x02\x02\xF1\xF2\x03" +
		"\x02\x02\x02\xF1\xEF\x03\x02\x02\x02\xF2\xF4\x03\x02\x02\x02\xF3\xF1\x03" +
		"\x02\x02\x02\xF4\xF5\x07\x7F\x02\x02\xF5:\x03\x02\x02\x02\xF6\xFA\t\x04" +
		"\x02\x02\xF7\xF9\t\x05\x02\x02\xF8\xF7\x03\x02\x02\x02\xF9\xFC\x03\x02" +
		"\x02\x02\xFA\xF8\x03\x02\x02\x02\xFA\xFB\x03\x02\x02\x02\xFB<\x03\x02" +
		"\x02\x02\xFC\xFA\x03\x02\x02\x02\xFD\u010E\t\x06\x02\x02\xFE\xFF\x070" +
		"\x02\x02\xFF\u010E\x070\x02\x02\u0100\u0101\x070\x02\x02\u0101\u0102\x07" +
		"0\x02\x02\u0102\u010E\x070\x02\x02\u0103\u010E\x07>\x02\x02\u0104\u0105" +
		"\x07>\x02\x02\u0105\u010E\x07?\x02\x02\u0106\u0107\x07@\x02\x02\u0107" +
		"\u010E\x07?\x02\x02\u0108\u010E\x07@\x02\x02\u0109\u010A\x07?\x02\x02" +
		"\u010A\u010E\x07?\x02\x02\u010B\u010C\x07#\x02\x02\u010C\u010E\x07?\x02" +
		"\x02\u010D\xFD\x03\x02\x02\x02\u010D\xFE\x03\x02\x02\x02\u010D\u0100\x03" +
		"\x02\x02\x02\u010D\u0103\x03\x02\x02\x02\u010D\u0104\x03\x02\x02\x02\u010D" +
		"\u0106\x03\x02\x02\x02\u010D\u0108\x03\x02\x02\x02\u010D\u0109\x03\x02" +
		"\x02\x02\u010D\u010B\x03\x02\x02\x02\u010E>\x03\x02\x02\x02\u010F\u0113" +
		"\t\x07\x02\x02\u0110\u0112\x05C\"\x02\u0111\u0110\x03\x02\x02\x02\u0112" +
		"\u0115\x03\x02\x02\x02\u0113\u0111\x03\x02\x02\x02\u0113\u0114\x03\x02" +
		"\x02\x02\u0114\u0117\x03\x02\x02\x02\u0115\u0113\x03\x02\x02\x02\u0116" +
		"\u010F\x03\x02\x02\x02\u0117\u0118\x03\x02\x02\x02\u0118\u0116\x03\x02" +
		"\x02\x02\u0118\u0119\x03\x02\x02\x02\u0119\u011A\x03\x02\x02\x02\u011A" +
		"\u011B\b \b\x02\u011B@\x03\x02\x02\x02\u011C\u011D\x07/\x02\x02\u011D" +
		"\u011E\x07/\x02\x02\u011E\u0122\x03\x02\x02\x02\u011F\u0121\n\x07\x02" +
		"\x02\u0120\u011F\x03\x02\x02\x02\u0121\u0124\x03\x02\x02\x02\u0122\u0120" +
		"\x03\x02\x02\x02\u0122\u0123\x03\x02\x02\x02\u0123B\x03\x02\x02\x02\u0124" +
		"\u0122\x03\x02\x02\x02\u0125\u0127\t\b\x02\x02\u0126\u0125\x03\x02\x02" +
		"\x02\u0127\u0128\x03\x02\x02\x02\u0128\u0126\x03\x02\x02\x02\u0128\u0129" +
		"\x03\x02\x02\x02\u0129\u012A\x03\x02\x02\x02\u012A\u012B\b\"\t\x02\u012B" +
		"D\x03\x02\x02\x02\u012C\u012D\x071\x02\x02\u012D\u012E\x07,\x02\x02\u012E" +
		"\u0133\x03\x02\x02\x02\u012F\u0132\x05E#\x02\u0130\u0132\v\x02\x02\x02" +
		"\u0131\u012F\x03\x02\x02\x02\u0131\u0130\x03\x02\x02\x02\u0132\u0135\x03" +
		"\x02\x02\x02\u0133\u0134\x03\x02\x02\x02\u0133\u0131\x03\x02\x02\x02\u0134" +
		"\u0136\x03\x02\x02\x02\u0135\u0133\x03\x02\x02\x02\u0136\u0137\x07,\x02" +
		"\x02\u0137\u0138\x071\x02\x02\u0138\u0139\x03\x02\x02\x02\u0139\u013A" +
		"\b#\n\x02\u013AF\x03\x02\x02\x02\u013B\u013F\x07^\x02\x02\u013C\u013E" +
		"\t\b\x02\x02\u013D\u013C\x03\x02\x02\x02\u013E\u0141\x03\x02\x02\x02\u013F" +
		"\u013D\x03\x02\x02\x02\u013F\u0140\x03\x02\x02\x02\u0140\u0147\x03\x02" +
		"\x02\x02\u0141\u013F\x03\x02\x02\x02\u0142\u0144\x07\x0F\x02\x02\u0143" +
		"\u0142\x03\x02\x02\x02\u0143\u0144\x03\x02\x02\x02\u0144\u0145\x03\x02" +
		"\x02\x02\u0145\u0148\x07\f\x02\x02\u0146\u0148\x04\x0E\x0F\x02\u0147\u0143" +
		"\x03\x02\x02\x02\u0147\u0146\x03\x02\x02\x02\u0148\u0149\x03\x02\x02\x02" +
		"\u0149\u014A\b$\v\x02\u014AH\x03\x02\x02\x02\u014B\u014C\v\x02\x02\x02" +
		"\u014C\u014D\x03\x02\x02\x02\u014D\u014E\b%\f\x02\u014EJ\x03\x02\x02\x02" +
		"\u014F\u0151\t\t\x02\x02\u0150\u0152\t\t\x02\x02\u0151\u0150\x03\x02\x02" +
		"\x02\u0151\u0152\x03\x02\x02\x02\u0152\u0153\x03\x02\x02\x02\u0153\u0154" +
		"\t\n\x02\x02\u0154L\x03\x02\x02\x02\u0155\u0159\t\t\x02\x02\u0156\u0158" +
		"\t\v\x02\x02\u0157\u0156\x03\x02\x02\x02\u0158\u015B\x03\x02\x02\x02\u0159" +
		"\u0157\x03\x02\x02\x02\u0159\u015A\x03\x02\x02\x02\u015AN\x03\x02\x02" +
		"\x02\u015B\u0159\x03\x02\x02\x02\u015C\u0160\t\f\x02\x02\u015D\u015F\t" +
		"\x05\x02\x02\u015E\u015D\x03\x02\x02\x02\u015F\u0162\x03\x02\x02\x02\u0160" +
		"\u015E\x03\x02\x02\x02\u0160\u0161\x03\x02\x02\x02\u0161P\x03\x02\x02" +
		"\x02\u0162\u0160\x03\x02\x02\x02\x1F\x02\xAE\xB4\xB9\xBD\xC4\xCF\xD5\xDB" +
		"\xDD\xEA\xEF\xF1\xFA\u010D\u0113\u0118\u0122\u0128\u0131\u0133\u013F\u0143" +
		"\u0147\u0151\u0157\u0159\u015E\u0160\r\x03\x02\x02\x03\x03\x03\x03\x04" +
		"\x04\x03\x05\x05\x03\x06\x06\x03\x07\x07\x03 \b\x02\x05\x02\x02\x06\x02" +
		"\b\x02\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

