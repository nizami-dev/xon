// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN = 3;
	public static readonly CLOSE = 4;
	public static readonly FLOAT = 5;
	public static readonly INTEGER = 6;
	public static readonly STRING = 7;
	public static readonly OPERATOR = 8;
	public static readonly COMMA = 9;
	public static readonly ID = 10;
	public static readonly NL = 11;
	public static readonly WS = 12;
	public static readonly LINE_COMMENT = 13;
	public static readonly BLOCK_COMMENT = 14;
	public static readonly LINE_JOINING = 15;
	public static readonly UNEXPECTED = 16;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN", "CLOSE", "FLOAT", "INTEGER", "STRING", "OPERATOR", "COMMA", "ID", 
		"NL", "WS", "LINE_COMMENT", "BLOCK_COMMENT", "LINE_JOINING", "UNEXPECTED", 
		"Radix", "DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN", "CLOSE", "FLOAT", "INTEGER", "STRING", 
		"OPERATOR", "COMMA", "ID", "NL", "WS", "LINE_COMMENT", "BLOCK_COMMENT", 
		"LINE_JOINING", "UNEXPECTED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_action(_localctx, actionIndex);
			break;

		case 8:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 5:
			return this.OPERATOR_sempred(_localctx, predIndex);
		}
		return true;
	}
	private OPERATOR_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.isOperator();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x12\xAB\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x045\n\x04\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x05\x05;\n\x05\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x07\x06A\n\x06\f\x06\x0E\x06D\v\x06\x03\x06\x03\x06\x03\x07\x06\x07" +
		"I\n\x07\r\x07\x0E\x07J\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x07\tS" +
		"\n\t\f\t\x0E\tV\v\t\x03\n\x03\n\x07\nZ\n\n\f\n\x0E\n]\v\n\x06\n_\n\n\r" +
		"\n\x0E\n`\x03\n\x03\n\x03\v\x06\vf\n\v\r\v\x0E\vg\x03\v\x03\v\x03\f\x03" +
		"\f\x03\f\x03\f\x07\fp\n\f\f\f\x0E\fs\v\f\x03\f\x03\f\x03\r\x03\r\x03\r" +
		"\x03\r\x03\r\x07\r|\n\r\f\r\x0E\r\x7F\v\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\x0E\x03\x0E\x07\x0E\x88\n\x0E\f\x0E\x0E\x0E\x8B\v\x0E\x03\x0E\x05" +
		"\x0E\x8E\n\x0E\x03\x0E\x03\x0E\x05\x0E\x92\n\x0E\x03\x0E\x03\x0E\x03\x0F" +
		"\x03\x0F\x03\x10\x03\x10\x05\x10\x9A\n\x10\x03\x10\x03\x10\x03\x11\x03" +
		"\x11\x07\x11\xA0\n\x11\f\x11\x0E\x11\xA3\v\x11\x03\x12\x03\x12\x07\x12" +
		"\xA7\n\x12\f\x12\x0E\x12\xAA\v\x12\x04J}\x02\x02\x13\x03\x02\x05\x05\x02" +
		"\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r" +
		"\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x02" +
		"!\x02\x02#\x02\x02\x03\x02\x0E\x05\x02**]]}}\x05\x02++__\x7F\x7F\x03\x02" +
		"))\n\x02))^^ddhhppttvvxx\x05\x02C\\aac|\x06\x022;C\\aac|\x04\x02\f\f\x0F" +
		"\x0F\x04\x02\v\v\"\"\x03\x022;\x04\x02ZZzz\x04\x022;aa\x05\x022;C\\c|" +
		"\x02\xBA\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02" +
		"\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02" +
		"\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02" +
		"\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
		"\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x03%\x03\x02\x02" +
		"\x02\x05(\x03\x02\x02\x02\x074\x03\x02\x02\x02\t:\x03\x02\x02\x02\v<\x03" +
		"\x02\x02\x02\rH\x03\x02\x02\x02\x0FN\x03\x02\x02\x02\x11P\x03\x02\x02" +
		"\x02\x13^\x03\x02\x02\x02\x15e\x03\x02\x02\x02\x17k\x03\x02\x02\x02\x19" +
		"v\x03\x02\x02\x02\x1B\x85\x03\x02\x02\x02\x1D\x95\x03\x02\x02\x02\x1F" +
		"\x97\x03\x02\x02\x02!\x9D\x03\x02\x02\x02#\xA4\x03\x02\x02\x02%&\t\x02" +
		"\x02\x02&\'\b\x02\x02\x02\'\x04\x03\x02\x02\x02()\t\x03\x02\x02)*\b\x03" +
		"\x03\x02*\x06\x03\x02\x02\x02+,\x05\x1F\x10\x02,-\x05#\x12\x02-.\x070" +
		"\x02\x02./\x05#\x12\x02/5\x03\x02\x02\x0201\x05!\x11\x0212\x070\x02\x02" +
		"23\x05!\x11\x0235\x03\x02\x02\x024+\x03\x02\x02\x0240\x03\x02\x02\x02" +
		"5\b\x03\x02\x02\x0267\x05\x1F\x10\x0278\x05#\x12\x028;\x03\x02\x02\x02" +
		"9;\x05!\x11\x02:6\x03\x02\x02\x02:9\x03\x02\x02\x02;\n\x03\x02\x02\x02" +
		"<B\x07)\x02\x02=A\n\x04\x02\x02>?\x07^\x02\x02?A\t\x05\x02\x02@=\x03\x02" +
		"\x02\x02@>\x03\x02\x02\x02AD\x03\x02\x02\x02B@\x03\x02\x02\x02BC\x03\x02" +
		"\x02\x02CE\x03\x02\x02\x02DB\x03\x02\x02\x02EF\x07)\x02\x02F\f\x03\x02" +
		"\x02\x02GI\v\x02\x02\x02HG\x03\x02\x02\x02IJ\x03\x02\x02\x02JK\x03\x02" +
		"\x02\x02JH\x03\x02\x02\x02KL\x03\x02\x02\x02LM\x06\x07\x02\x02M\x0E\x03" +
		"\x02\x02\x02NO\x07.\x02\x02O\x10\x03\x02\x02\x02PT\t\x06\x02\x02QS\t\x07" +
		"\x02\x02RQ\x03\x02\x02\x02SV\x03\x02\x02\x02TR\x03\x02\x02\x02TU\x03\x02" +
		"\x02\x02U\x12\x03\x02\x02\x02VT\x03\x02\x02\x02W[\t\b\x02\x02XZ\x05\x15" +
		"\v\x02YX\x03\x02\x02\x02Z]\x03\x02\x02\x02[Y\x03\x02\x02\x02[\\\x03\x02" +
		"\x02\x02\\_\x03\x02\x02\x02][\x03\x02\x02\x02^W\x03\x02\x02\x02_`\x03" +
		"\x02\x02\x02`^\x03\x02\x02\x02`a\x03\x02\x02\x02ab\x03\x02\x02\x02bc\b" +
		"\n\x04\x02c\x14\x03\x02\x02\x02df\t\t\x02\x02ed\x03\x02\x02\x02fg\x03" +
		"\x02\x02\x02ge\x03\x02\x02\x02gh\x03\x02\x02\x02hi\x03\x02\x02\x02ij\b" +
		"\v\x05\x02j\x16\x03\x02\x02\x02kl\x07/\x02\x02lm\x07/\x02\x02mq\x03\x02" +
		"\x02\x02np\n\b\x02\x02on\x03\x02\x02\x02ps\x03\x02\x02\x02qo\x03\x02\x02" +
		"\x02qr\x03\x02\x02\x02rt\x03\x02\x02\x02sq\x03\x02\x02\x02tu\b\f\x05\x02" +
		"u\x18\x03\x02\x02\x02vw\x071\x02\x02wx\x07,\x02\x02x}\x03\x02\x02\x02" +
		"y|\x05\x19\r\x02z|\v\x02\x02\x02{y\x03\x02\x02\x02{z\x03\x02\x02\x02|" +
		"\x7F\x03\x02\x02\x02}~\x03\x02\x02\x02}{\x03\x02\x02\x02~\x80\x03\x02" +
		"\x02\x02\x7F}\x03\x02\x02\x02\x80\x81\x07,\x02\x02\x81\x82\x071\x02\x02" +
		"\x82\x83\x03\x02\x02\x02\x83\x84\b\r\x05\x02\x84\x1A\x03\x02\x02\x02\x85" +
		"\x89\x07^\x02\x02\x86\x88\t\t\x02\x02\x87\x86\x03\x02\x02\x02\x88\x8B" +
		"\x03\x02\x02\x02\x89\x87\x03\x02\x02\x02\x89\x8A\x03\x02\x02\x02\x8A\x91" +
		"\x03\x02\x02\x02\x8B\x89\x03\x02\x02\x02\x8C\x8E\x07\x0F\x02\x02\x8D\x8C" +
		"\x03\x02\x02\x02\x8D\x8E\x03\x02\x02\x02\x8E\x8F\x03\x02\x02\x02\x8F\x92" +
		"\x07\f\x02\x02\x90\x92\x07\x0F\x02\x02\x91\x8D\x03\x02\x02\x02\x91\x90" +
		"\x03\x02\x02\x02\x91\x92\x03\x02\x02\x02\x92\x93\x03\x02\x02\x02\x93\x94" +
		"\b\x0E\x05\x02\x94\x1C\x03\x02\x02\x02\x95\x96\v\x02\x02\x02\x96\x1E\x03" +
		"\x02\x02\x02\x97\x99\t\n\x02\x02\x98\x9A\t\n\x02\x02\x99\x98\x03\x02\x02" +
		"\x02\x99\x9A\x03\x02\x02\x02\x9A\x9B\x03\x02\x02\x02\x9B\x9C\t\v\x02\x02" +
		"\x9C \x03\x02\x02\x02\x9D\xA1\t\n\x02\x02\x9E\xA0\t\f\x02\x02\x9F\x9E" +
		"\x03\x02\x02\x02\xA0\xA3\x03\x02\x02\x02\xA1\x9F\x03\x02\x02\x02\xA1\xA2" +
		"\x03\x02\x02\x02\xA2\"\x03\x02\x02\x02\xA3\xA1\x03\x02\x02\x02\xA4\xA8" +
		"\t\r\x02\x02\xA5\xA7\t\x07\x02\x02\xA6\xA5\x03\x02\x02\x02\xA7\xAA\x03" +
		"\x02\x02\x02\xA8\xA6\x03\x02\x02\x02\xA8\xA9\x03\x02\x02\x02\xA9$\x03" +
		"\x02\x02\x02\xAA\xA8\x03\x02\x02\x02\x17\x024:@BJT[`gq{}\x89\x8D\x91\x99" +
		"\x9F\xA1\xA6\xA8\x06\x03\x02\x02\x03\x03\x03\x03\n\x04\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

