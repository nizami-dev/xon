// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN_BRACKET = 3;
	public static readonly CLOSE_BRACKET = 4;
	public static readonly OPEN_PAREN = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_BRACE = 7;
	public static readonly CLOSE_BRACE = 8;
	public static readonly ACTUAL = 9;
	public static readonly BREAK = 10;
	public static readonly DO = 11;
	public static readonly ELSE = 12;
	public static readonly EXPECT = 13;
	public static readonly EXPORT = 14;
	public static readonly FOR = 15;
	public static readonly IF = 16;
	public static readonly IMPORT = 17;
	public static readonly RETURN = 18;
	public static readonly WHILE = 19;
	public static readonly ASSIGN = 20;
	public static readonly COLON = 21;
	public static readonly COMMA = 22;
	public static readonly DOT = 23;
	public static readonly GENERIC_LEFT = 24;
	public static readonly GENERIC_RIGHT = 25;
	public static readonly HASH = 26;
	public static readonly QUESTION = 27;
	public static readonly FLOAT_LITERAL = 28;
	public static readonly INTEGER_LITERAL = 29;
	public static readonly REGEX_LITERAL = 30;
	public static readonly STRING_LITERAL = 31;
	public static readonly PREPROCESSOR = 32;
	public static readonly ID = 33;
	public static readonly OPERATOR = 34;
	public static readonly NL = 35;
	public static readonly WS = 36;
	public static readonly BLOCK_COMMENT = 37;
	public static readonly LINE_COMMENT = 38;
	public static readonly UNEXPECTED = 39;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "ACTUAL", "BREAK", "DO", "ELSE", "EXPECT", "EXPORT", "FOR", 
		"IF", "IMPORT", "RETURN", "WHILE", "ASSIGN", "COLON", "COMMA", "DOT", 
		"GENERIC_LEFT", "GENERIC_RIGHT", "HASH", "QUESTION", "FLOAT_LITERAL", 
		"INTEGER_LITERAL", "REGEX_LITERAL", "STRING_LITERAL", "PREPROCESSOR", 
		"ID", "OPERATOR", "NL", "WS", "BLOCK_COMMENT", "LINE_COMMENT", "UNEXPECTED", 
		"Radix", "DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'actual'", "'break'", "'do'", "'else'", "'expect'", "'export'", "'for'", 
		"'if'", "'import'", "'return'", "'while'", "'='", "':'", "','", "'.'", 
		"'<|'", "'|>'", "'#'", "'?'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "ACTUAL", "BREAK", "DO", "ELSE", 
		"EXPECT", "EXPORT", "FOR", "IF", "IMPORT", "RETURN", "WHILE", "ASSIGN", 
		"COLON", "COMMA", "DOT", "GENERIC_LEFT", "GENERIC_RIGHT", "HASH", "QUESTION", 
		"FLOAT_LITERAL", "INTEGER_LITERAL", "REGEX_LITERAL", "STRING_LITERAL", 
		"PREPROCESSOR", "ID", "OPERATOR", "NL", "WS", "BLOCK_COMMENT", "LINE_COMMENT", 
		"UNEXPECTED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 2:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 3:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 4:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 5:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 32:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 32:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02)\u0147\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x03\x02\x03" +
		"\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03" +
		"\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03" +
		"\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10" +
		"\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13" +
		"\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17" +
		"\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B" +
		"\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B\xBF\n" +
		"\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\xC5\n\x1C\x03\x1D\x03\x1D" +
		"\x03\x1D\x03\x1D\x07\x1D\xCB\n\x1D\f\x1D\x0E\x1D\xCE\v\x1D\x03\x1D\x03" +
		"\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x07\x1E\xD6\n\x1E\f\x1E\x0E\x1E\xD9" +
		"\v\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x07\x1F\xE1\n\x1F" +
		"\f\x1F\x0E\x1F\xE4\v\x1F\x03\x1F\x03\x1F\x03 \x03 \x07 \xEA\n \f \x0E" +
		" \xED\v \x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03!\x03" +
		"!\x03!\x05!\xFD\n!\x03\"\x03\"\x03\"\x05\"\u0102\n\"\x03\"\x03\"\x05\"" +
		"\u0106\n\"\x03\"\x05\"\u0109\n\"\x05\"\u010B\n\"\x03\"\x03\"\x03#\x06" +
		"#\u0110\n#\r#\x0E#\u0111\x03#\x03#\x03$\x03$\x03$\x03$\x03$\x07$\u011B" +
		"\n$\f$\x0E$\u011E\v$\x03$\x03$\x03$\x03$\x03$\x03%\x03%\x03%\x03%\x07" +
		"%\u0129\n%\f%\x0E%\u012C\v%\x03%\x03%\x03&\x03&\x03&\x03&\x03\'\x03\'" +
		"\x05\'\u0136\n\'\x03\'\x03\'\x03(\x03(\x07(\u013C\n(\f(\x0E(\u013F\v(" +
		"\x03)\x03)\x07)\u0143\n)\f)\x0E)\u0146\v)\x04\xE2\u011C\x02\x02*\x03\x02" +
		"\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02" +
		"\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02\x12" +
		"\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19-\x02" +
		"\x1A/\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?" +
		"\x02#A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02\x02O\x02\x02Q\x02\x02" +
		"\x03\x02\x0F\x03\x02bb\x04\x02^^bb\x03\x02))\n\x02))^^ddhhppttvvxx\x05" +
		"\x02C\\aac|\x06\x022;C\\aac|\x05\x02##\'\',`\x04\x02\v\v\"\"\x04\x02\f" +
		"\f\x0F\x0F\x03\x022;\x04\x02ZZzz\x04\x022;aa\x05\x022;C\\c|\x02\u015C" +
		"\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02" +
		"\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02" +
		"\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02" +
		"\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02" +
		"\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02" +
		"!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03" +
		"\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02" +
		"\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x02" +
		"5\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02" +
		"\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02" +
		"\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03" +
		"\x02\x02\x02\x02K\x03\x02\x02\x02\x03S\x03\x02\x02\x02\x05V\x03\x02\x02" +
		"\x02\x07Y\x03\x02\x02\x02\t\\\x03\x02\x02\x02\v_\x03\x02\x02\x02\rb\x03" +
		"\x02\x02\x02\x0Fe\x03\x02\x02\x02\x11l\x03\x02\x02\x02\x13r\x03\x02\x02" +
		"\x02\x15u\x03\x02\x02\x02\x17z\x03\x02\x02\x02\x19\x81\x03\x02\x02\x02" +
		"\x1B\x88\x03\x02\x02\x02\x1D\x8C\x03\x02\x02\x02\x1F\x8F\x03\x02\x02\x02" +
		"!\x96\x03\x02\x02\x02#\x9D\x03\x02\x02\x02%\xA3\x03\x02\x02\x02\'\xA5" +
		"\x03\x02\x02\x02)\xA7\x03\x02\x02\x02+\xA9\x03\x02\x02\x02-\xAB\x03\x02" +
		"\x02\x02/\xAE\x03\x02\x02\x021\xB1\x03\x02\x02\x023\xB3\x03\x02\x02\x02" +
		"5\xBE\x03\x02\x02\x027\xC4\x03\x02\x02\x029\xC6\x03\x02\x02\x02;\xD1\x03" +
		"\x02\x02\x02=\xDC\x03\x02\x02\x02?\xE7\x03\x02\x02\x02A\xFC\x03\x02\x02" +
		"\x02C\u010A\x03\x02\x02\x02E\u010F\x03\x02\x02\x02G\u0115\x03\x02\x02" +
		"\x02I\u0124\x03\x02\x02\x02K\u012F\x03\x02\x02\x02M\u0133\x03\x02\x02" +
		"\x02O\u0139\x03\x02\x02\x02Q\u0140\x03\x02\x02\x02ST\x07]\x02\x02TU\b" +
		"\x02\x02\x02U\x04\x03\x02\x02\x02VW\x07_\x02\x02WX\b\x03\x03\x02X\x06" +
		"\x03\x02\x02\x02YZ\x07*\x02\x02Z[\b\x04\x04\x02[\b\x03\x02\x02\x02\\]" +
		"\x07+\x02\x02]^\b\x05\x05\x02^\n\x03\x02\x02\x02_`\x07}\x02\x02`a\b\x06" +
		"\x06\x02a\f\x03\x02\x02\x02bc\x07\x7F\x02\x02cd\b\x07\x07\x02d\x0E\x03" +
		"\x02\x02\x02ef\x07c\x02\x02fg\x07e\x02\x02gh\x07v\x02\x02hi\x07w\x02\x02" +
		"ij\x07c\x02\x02jk\x07n\x02\x02k\x10\x03\x02\x02\x02lm\x07d\x02\x02mn\x07" +
		"t\x02\x02no\x07g\x02\x02op\x07c\x02\x02pq\x07m\x02\x02q\x12\x03\x02\x02" +
		"\x02rs\x07f\x02\x02st\x07q\x02\x02t\x14\x03\x02\x02\x02uv\x07g\x02\x02" +
		"vw\x07n\x02\x02wx\x07u\x02\x02xy\x07g\x02\x02y\x16\x03\x02\x02\x02z{\x07" +
		"g\x02\x02{|\x07z\x02\x02|}\x07r\x02\x02}~\x07g\x02\x02~\x7F\x07e\x02\x02" +
		"\x7F\x80\x07v\x02\x02\x80\x18\x03\x02\x02\x02\x81\x82\x07g\x02\x02\x82" +
		"\x83\x07z\x02\x02\x83\x84\x07r\x02\x02\x84\x85\x07q\x02\x02\x85\x86\x07" +
		"t\x02\x02\x86\x87\x07v\x02\x02\x87\x1A\x03\x02\x02\x02\x88\x89\x07h\x02" +
		"\x02\x89\x8A\x07q\x02\x02\x8A\x8B\x07t\x02\x02\x8B\x1C\x03\x02\x02\x02" +
		"\x8C\x8D\x07k\x02\x02\x8D\x8E\x07h\x02\x02\x8E\x1E\x03\x02\x02\x02\x8F" +
		"\x90\x07k\x02\x02\x90\x91\x07o\x02\x02\x91\x92\x07r\x02\x02\x92\x93\x07" +
		"q\x02\x02\x93\x94\x07t\x02\x02\x94\x95\x07v\x02\x02\x95 \x03\x02\x02\x02" +
		"\x96\x97\x07t\x02\x02\x97\x98\x07g\x02\x02\x98\x99\x07v\x02\x02\x99\x9A" +
		"\x07w\x02\x02\x9A\x9B\x07t\x02\x02\x9B\x9C\x07p\x02\x02\x9C\"\x03\x02" +
		"\x02\x02\x9D\x9E\x07y\x02\x02\x9E\x9F\x07j\x02\x02\x9F\xA0\x07k\x02\x02" +
		"\xA0\xA1\x07n\x02\x02\xA1\xA2\x07g\x02\x02\xA2$\x03\x02\x02\x02\xA3\xA4" +
		"\x07?\x02\x02\xA4&\x03\x02\x02\x02\xA5\xA6\x07<\x02\x02\xA6(\x03\x02\x02" +
		"\x02\xA7\xA8\x07.\x02\x02\xA8*\x03\x02\x02\x02\xA9\xAA\x070\x02\x02\xAA" +
		",\x03\x02\x02\x02\xAB\xAC\x07>\x02\x02\xAC\xAD\x07~\x02\x02\xAD.\x03\x02" +
		"\x02\x02\xAE\xAF\x07~\x02\x02\xAF\xB0\x07@\x02\x02\xB00\x03\x02\x02\x02" +
		"\xB1\xB2\x07%\x02\x02\xB22\x03\x02\x02\x02\xB3\xB4\x07A\x02\x02\xB44\x03" +
		"\x02\x02\x02\xB5\xB6\x05M\'\x02\xB6\xB7\x05Q)\x02\xB7\xB8\x070\x02\x02" +
		"\xB8\xB9\x05Q)\x02\xB9\xBF\x03\x02\x02\x02\xBA\xBB\x05O(\x02\xBB\xBC\x07" +
		"0\x02\x02\xBC\xBD\x05O(\x02\xBD\xBF\x03\x02\x02\x02\xBE\xB5\x03\x02\x02" +
		"\x02\xBE\xBA\x03\x02\x02\x02\xBF6\x03\x02\x02\x02\xC0\xC1\x05M\'\x02\xC1" +
		"\xC2\x05Q)\x02\xC2\xC5\x03\x02\x02\x02\xC3\xC5\x05O(\x02\xC4\xC0\x03\x02" +
		"\x02\x02\xC4\xC3\x03\x02\x02\x02\xC58\x03\x02\x02\x02\xC6\xCC\x07b\x02" +
		"\x02\xC7\xCB\n\x02\x02\x02\xC8\xC9\x07^\x02\x02\xC9\xCB\t\x03\x02\x02" +
		"\xCA\xC7\x03\x02\x02\x02\xCA\xC8\x03\x02\x02\x02\xCB\xCE\x03\x02\x02\x02" +
		"\xCC\xCA\x03\x02\x02\x02\xCC\xCD\x03\x02\x02\x02\xCD\xCF\x03\x02\x02\x02" +
		"\xCE\xCC\x03\x02\x02\x02\xCF\xD0\x07b\x02\x02\xD0:\x03\x02\x02\x02\xD1" +
		"\xD7\x07)\x02\x02\xD2\xD6\n\x04\x02\x02\xD3\xD4\x07^\x02\x02\xD4\xD6\t" +
		"\x05\x02\x02\xD5\xD2\x03\x02\x02\x02\xD5\xD3\x03\x02\x02\x02\xD6\xD9\x03" +
		"\x02\x02\x02\xD7\xD5\x03\x02\x02\x02\xD7\xD8\x03\x02\x02\x02\xD8\xDA\x03" +
		"\x02\x02\x02\xD9\xD7\x03\x02\x02\x02\xDA\xDB\x07)\x02\x02\xDB<\x03\x02" +
		"\x02\x02\xDC\xDD\x07%\x02\x02\xDD\xDE\x07}\x02\x02\xDE\xE2\x03\x02\x02" +
		"\x02\xDF\xE1\v\x02\x02\x02\xE0\xDF\x03\x02\x02\x02\xE1\xE4\x03\x02\x02" +
		"\x02\xE2\xE3\x03\x02\x02\x02\xE2\xE0\x03\x02\x02\x02\xE3\xE5\x03\x02\x02" +
		"\x02\xE4\xE2\x03\x02\x02\x02\xE5\xE6\x07\x7F\x02\x02\xE6>\x03\x02\x02" +
		"\x02\xE7\xEB\t\x06\x02\x02\xE8\xEA\t\x07\x02\x02\xE9\xE8\x03\x02\x02\x02" +
		"\xEA\xED\x03\x02\x02\x02\xEB\xE9\x03\x02\x02\x02\xEB\xEC\x03\x02\x02\x02" +
		"\xEC@\x03\x02\x02\x02\xED\xEB\x03\x02\x02\x02\xEE\xFD\t\b\x02\x02\xEF" +
		"\xF0\x070\x02\x02\xF0\xFD\x070\x02\x02\xF1\xF2\x070\x02\x02\xF2\xF3\x07" +
		"0\x02\x02\xF3\xFD\x070\x02\x02\xF4\xF5\x07>\x02\x02\xF5\xFD\x07?\x02\x02" +
		"\xF6\xF7\x07@\x02\x02\xF7\xFD\x07?\x02\x02\xF8\xF9\x07?\x02\x02\xF9\xFD" +
		"\x07?\x02\x02\xFA\xFB\x07#\x02\x02\xFB\xFD\x07?\x02\x02\xFC\xEE\x03\x02" +
		"\x02\x02\xFC\xEF\x03\x02\x02\x02\xFC\xF1\x03\x02\x02\x02\xFC\xF4\x03\x02" +
		"\x02\x02\xFC\xF6\x03\x02\x02\x02\xFC\xF8\x03\x02\x02\x02\xFC\xFA\x03\x02" +
		"\x02\x02\xFDB\x03\x02\x02\x02\xFE\xFF\x06\"\x02\x02\xFF\u010B\x05E#\x02" +
		"\u0100\u0102\x07\x0F\x02\x02\u0101\u0100\x03\x02\x02\x02\u0101\u0102\x03" +
		"\x02\x02\x02\u0102\u0103\x03\x02\x02\x02\u0103\u0106\x07\f\x02\x02\u0104" +
		"\u0106\x07\x0F\x02\x02\u0105\u0101\x03\x02\x02\x02\u0105\u0104\x03\x02" +
		"\x02\x02\u0106\u0108\x03\x02\x02\x02\u0107\u0109\x05E#\x02\u0108\u0107" +
		"\x03\x02\x02\x02\u0108\u0109\x03\x02\x02\x02\u0109\u010B\x03\x02\x02\x02" +
		"\u010A\xFE\x03\x02\x02\x02\u010A\u0105\x03\x02\x02\x02\u010B\u010C\x03" +
		"\x02\x02\x02\u010C\u010D\b\"\b\x02\u010DD\x03\x02\x02\x02\u010E\u0110" +
		"\t\t\x02\x02\u010F\u010E\x03\x02\x02\x02\u0110\u0111\x03\x02\x02\x02\u0111" +
		"\u010F\x03\x02\x02\x02\u0111\u0112\x03\x02\x02\x02\u0112\u0113\x03\x02" +
		"\x02\x02\u0113\u0114\b#\t\x02\u0114F\x03\x02\x02\x02\u0115\u0116\x071" +
		"\x02\x02\u0116\u0117\x07,\x02\x02\u0117\u011C\x03\x02\x02\x02\u0118\u011B" +
		"\x05G$\x02\u0119\u011B\v\x02\x02\x02\u011A\u0118\x03\x02\x02\x02\u011A" +
		"\u0119\x03\x02\x02\x02\u011B\u011E\x03\x02\x02\x02\u011C\u011D\x03\x02" +
		"\x02\x02\u011C\u011A\x03\x02\x02\x02\u011D\u011F\x03\x02\x02\x02\u011E" +
		"\u011C\x03\x02\x02\x02\u011F\u0120\x07,\x02\x02\u0120\u0121\x071\x02\x02" +
		"\u0121\u0122\x03\x02\x02\x02\u0122\u0123\b$\n\x02\u0123H\x03\x02\x02\x02" +
		"\u0124\u0125\x07/\x02\x02\u0125\u0126\x07/\x02\x02\u0126\u012A\x03\x02" +
		"\x02\x02\u0127\u0129\n\n\x02\x02\u0128\u0127\x03\x02\x02\x02\u0129\u012C" +
		"\x03\x02\x02\x02\u012A\u0128\x03\x02\x02\x02\u012A\u012B\x03\x02\x02\x02" +
		"\u012B\u012D\x03\x02\x02\x02\u012C\u012A\x03\x02\x02\x02\u012D\u012E\b" +
		"%\n\x02\u012EJ\x03\x02\x02\x02\u012F\u0130\v\x02\x02\x02\u0130\u0131\x03" +
		"\x02\x02\x02\u0131\u0132\b&\v\x02\u0132L\x03\x02\x02\x02\u0133\u0135\t" +
		"\v\x02\x02\u0134\u0136\t\v\x02\x02\u0135\u0134\x03\x02\x02\x02\u0135\u0136" +
		"\x03\x02\x02\x02\u0136\u0137\x03\x02\x02\x02\u0137\u0138\t\f\x02\x02\u0138" +
		"N\x03\x02\x02\x02\u0139\u013D\t\v\x02\x02\u013A\u013C\t\r\x02\x02\u013B" +
		"\u013A\x03\x02\x02\x02\u013C\u013F\x03\x02\x02\x02\u013D\u013B\x03\x02" +
		"\x02\x02\u013D\u013E\x03\x02\x02\x02\u013EP\x03\x02\x02\x02\u013F\u013D" +
		"\x03\x02\x02\x02\u0140\u0144\t\x0E\x02\x02\u0141\u0143\t\x07\x02\x02\u0142" +
		"\u0141\x03\x02\x02\x02\u0143\u0146\x03\x02\x02\x02\u0144\u0142\x03\x02" +
		"\x02\x02\u0144\u0145\x03\x02\x02\x02\u0145R\x03\x02\x02\x02\u0146\u0144" +
		"\x03\x02\x02\x02\x19\x02\xBE\xC4\xCA\xCC\xD5\xD7\xE2\xEB\xFC\u0101\u0105" +
		"\u0108\u010A\u0111\u011A\u011C\u012A\u0135\u013B\u013D\u0142\u0144\f\x03" +
		"\x02\x02\x03\x03\x03\x03\x04\x04\x03\x05\x05\x03\x06\x06\x03\x07\x07\x03" +
		"\"\b\x02\x05\x02\x02\x06\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

