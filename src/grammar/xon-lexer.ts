// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly Is = 3;
	public static readonly As = 4;
	public static readonly If = 5;
	public static readonly Else = 6;
	public static readonly ElseIf = 7;
	public static readonly Loop = 8;
	public static readonly In = 9;
	public static readonly Break = 10;
	public static readonly Return = 11;
	public static readonly Preprocessor = 12;
	public static readonly LineBreak = 13;
	public static readonly OpenBracket = 14;
	public static readonly CloseBracket = 15;
	public static readonly OpenParen = 16;
	public static readonly CloseParen = 17;
	public static readonly OpenBrace = 18;
	public static readonly CloseBrace = 19;
	public static readonly Comma = 20;
	public static readonly Assign = 21;
	public static readonly Question = 22;
	public static readonly Colon = 23;
	public static readonly Dot = 24;
	public static readonly Plus = 25;
	public static readonly Minus = 26;
	public static readonly Exclamation = 27;
	public static readonly Asterisk = 28;
	public static readonly Slash = 29;
	public static readonly Modulo = 30;
	public static readonly Caret = 31;
	public static readonly Hash = 32;
	public static readonly LessThan = 33;
	public static readonly MoreThan = 34;
	public static readonly Ampersand = 35;
	public static readonly Pipe = 36;
	public static readonly Tilde = 37;
	public static readonly Ad = 38;
	public static readonly Underscore = 39;
	public static readonly LambdaStart = 40;
	public static readonly BooleanLiteral = 41;
	public static readonly FloatLiteral = 42;
	public static readonly IntegerLiteral = 43;
	public static readonly CharLiteral = 44;
	public static readonly StringLiteral = 45;
	public static readonly StringFormatStart = 46;
	public static readonly StringFormatMiddle = 47;
	public static readonly StringFormatEnd = 48;
	public static readonly ID = 49;
	public static readonly Spaces = 50;
	public static readonly Comment = 51;
	public static readonly LineJoining = 52;
	public static readonly UnexpectedCharacter = 53;
	public static readonly ERROR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"Is", "As", "If", "Else", "ElseIf", "Loop", "In", "Break", "Return", "Preprocessor", 
		"LineBreak", "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", 
		"OpenBrace", "CloseBrace", "Comma", "Assign", "Question", "Colon", "Dot", 
		"Plus", "Minus", "Exclamation", "Asterisk", "Slash", "Modulo", "Caret", 
		"Hash", "LessThan", "MoreThan", "Ampersand", "Pipe", "Tilde", "Ad", "Underscore", 
		"LambdaStart", "BooleanLiteral", "FloatLiteral", "IntegerLiteral", "CharLiteral", 
		"StringLiteral", "StringFormatStart", "StringFormatMiddle", "StringFormatEnd", 
		"ID", "Spaces", "Comment", "LineJoining", "UnexpectedCharacter", "SPACES", 
		"DIGIT_NUMBER", "ALPHABET_NUMBER", "STRING_CHARACTER",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'is'", "'as'", "'if'", "'else'", "'elif'", 
		"'loop'", "'in'", "'break'", "'return'", undefined, undefined, "'['", 
		"']'", "'('", "')'", "'{'", "'}'", "','", "'='", "'?'", "':'", "'.'", 
		"'+'", "'-'", "'!'", "'*'", "'/'", "'%'", "'^'", "'#'", "'<'", "'>'", 
		"'&'", "'|'", "'~'", "'@'", "'_'", "'\\'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "Is", "As", "If", "Else", "ElseIf", "Loop", 
		"In", "Break", "Return", "Preprocessor", "LineBreak", "OpenBracket", "CloseBracket", 
		"OpenParen", "CloseParen", "OpenBrace", "CloseBrace", "Comma", "Assign", 
		"Question", "Colon", "Dot", "Plus", "Minus", "Exclamation", "Asterisk", 
		"Slash", "Modulo", "Caret", "Hash", "LessThan", "MoreThan", "Ampersand", 
		"Pipe", "Tilde", "Ad", "Underscore", "LambdaStart", "BooleanLiteral", 
		"FloatLiteral", "IntegerLiteral", "CharLiteral", "StringLiteral", "StringFormatStart", 
		"StringFormatMiddle", "StringFormatEnd", "ID", "Spaces", "Comment", "LineJoining", 
		"UnexpectedCharacter",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 10:
			this.LineBreak_action(_localctx, actionIndex);
			break;

		case 11:
			this.OpenBracket_action(_localctx, actionIndex);
			break;

		case 12:
			this.CloseBracket_action(_localctx, actionIndex);
			break;

		case 13:
			this.OpenParen_action(_localctx, actionIndex);
			break;

		case 14:
			this.CloseParen_action(_localctx, actionIndex);
			break;

		case 15:
			this.OpenBrace_action(_localctx, actionIndex);
			break;

		case 16:
			this.CloseBrace_action(_localctx, actionIndex);
			break;
		}
	}
	private LineBreak_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.handleLineBreak()
			break;
		}
	}
	private OpenBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened++;
			break;
		}
	}
	private CloseBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened--;
			break;
		}
	}
	private OpenParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened++;
			break;
		}
	}
	private CloseParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened--;
			break;
		}
	}
	private OpenBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened++;
			break;
		}
	}
	private CloseBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.opened--;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 10:
			return this.LineBreak_sempred(_localctx, predIndex);
		}
		return true;
	}
	private LineBreak_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x027\u0188\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x03\x02\x03\x02\x03\x02\x03\x03\x03" +
		"\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x07\v\x9E" +
		"\n\v\f\v\x0E\v\xA1\v\v\x03\v\x03\v\x03\f\x03\f\x03\f\x05\f\xA8\n\f\x03" +
		"\f\x03\f\x05\f\xAC\n\f\x03\f\x05\f\xAF\n\f\x05\f\xB1\n\f\x03\f\x03\f\x03" +
		"\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10" +
		"\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13" +
		"\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17" +
		"\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C" +
		"\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03" +
		"!\x03!\x03\"\x03\"\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x03\'\x03\'" +
		"\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x03(\x05(\xFA\n(\x03)\x03)\x05" +
		")\xFE\n)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x05)\u0109\n)\x03" +
		"*\x03*\x05*\u010D\n*\x03*\x03*\x03*\x05*\u0112\n*\x03+\x03+\x03+\x03+" +
		"\x03,\x03,\x07,\u011A\n,\f,\x0E,\u011D\v,\x03,\x03,\x03-\x03-\x07-\u0123" +
		"\n-\f-\x0E-\u0126\v-\x03-\x03-\x03.\x03.\x07.\u012C\n.\f.\x0E.\u012F\v" +
		".\x03.\x03.\x03/\x03/\x07/\u0135\n/\f/\x0E/\u0138\v/\x03/\x03/\x030\x06" +
		"0\u013D\n0\r0\x0E0\u013E\x031\x031\x031\x031\x032\x032\x032\x032\x072" +
		"\u0149\n2\f2\x0E2\u014C\v2\x032\x032\x033\x033\x033\x053\u0153\n3\x03" +
		"3\x033\x053\u0157\n3\x033\x033\x034\x034\x034\x034\x035\x065\u0160\n5" +
		"\r5\x0E5\u0161\x036\x066\u0165\n6\r6\x0E6\u0166\x036\x036\x066\u016B\n" +
		"6\r6\x0E6\u016C\x076\u016F\n6\f6\x0E6\u0172\v6\x037\x067\u0175\n7\r7\x0E" +
		"7\u0176\x037\x037\x067\u017B\n7\r7\x0E7\u017C\x077\u017F\n7\f7\x0E7\u0182" +
		"\v7\x038\x038\x038\x058\u0187\n8\x03\x9F\x02\x029\x03\x02\x05\x05\x02" +
		"\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r" +
		"\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13" +
		"!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19-\x02\x1A/\x02" +
		"\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?\x02#A\x02" +
		"$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+Q\x02,S\x02-U\x02.W\x02/Y" +
		"\x020[\x021]\x022_\x023a\x024c\x025e\x026g\x027i\x02\x02k\x02\x02m\x02" +
		"\x02o\x02\x02\x03\x02\n\x03\x022;\x03\x02))\x05\x02C\\aac|\x04\x02\f\f" +
		"\x0F\x0F\x04\x02\v\v\"\"\x04\x022;c|\x04\x02$$}}\v\x02$$^^ddhhppttvvx" +
		"x}}\x02\u019D\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07" +
		"\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03" +
		"\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03" +
		"\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03" +
		"\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03" +
		"\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02" +
		"\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02" +
		"-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02" +
		"\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02" +
		"\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03" +
		"\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02" +
		"\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02" +
		"O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02" +
		"\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02" +
		"\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03" +
		"\x02\x02\x02\x02e\x03\x02\x02\x02\x02g\x03\x02\x02\x02\x03q\x03\x02\x02" +
		"\x02\x05t\x03\x02\x02\x02\x07w\x03\x02\x02\x02\tz\x03\x02\x02\x02\v\x7F" +
		"\x03\x02\x02\x02\r\x84\x03\x02\x02\x02\x0F\x89\x03\x02\x02\x02\x11\x8C" +
		"\x03\x02\x02\x02\x13\x92\x03\x02\x02\x02\x15\x99\x03\x02\x02\x02\x17\xB0" +
		"\x03\x02\x02\x02\x19\xB4\x03\x02\x02\x02\x1B\xB7\x03\x02\x02\x02\x1D\xBA" +
		"\x03\x02\x02\x02\x1F\xBD\x03\x02\x02\x02!\xC0\x03\x02\x02\x02#\xC3\x03" +
		"\x02\x02\x02%\xC6\x03\x02\x02\x02\'\xC8\x03\x02\x02\x02)\xCA\x03\x02\x02" +
		"\x02+\xCC\x03\x02\x02\x02-\xCE\x03\x02\x02\x02/\xD0\x03\x02\x02\x021\xD2" +
		"\x03\x02\x02\x023\xD4\x03\x02\x02\x025\xD6\x03\x02\x02\x027\xD8\x03\x02" +
		"\x02\x029\xDA\x03\x02\x02\x02;\xDC\x03\x02\x02\x02=\xDE\x03\x02\x02\x02" +
		"?\xE0\x03\x02\x02\x02A\xE2\x03\x02\x02\x02C\xE4\x03\x02\x02\x02E\xE6\x03" +
		"\x02\x02\x02G\xE8\x03\x02\x02\x02I\xEA\x03\x02\x02\x02K\xEC\x03\x02\x02" +
		"\x02M\xEE\x03\x02\x02\x02O\xF9\x03\x02\x02\x02Q\u0108\x03\x02\x02\x02" +
		"S\u0111\x03\x02\x02\x02U\u0113\x03\x02\x02\x02W\u0117\x03\x02\x02\x02" +
		"Y\u0120\x03\x02\x02\x02[\u0129\x03\x02\x02\x02]\u0132\x03\x02\x02\x02" +
		"_\u013C\x03\x02\x02\x02a\u0140\x03\x02\x02\x02c\u0144\x03\x02\x02\x02" +
		"e\u014F\x03\x02\x02\x02g\u015A\x03\x02\x02\x02i\u015F\x03\x02\x02\x02" +
		"k\u0164\x03\x02\x02\x02m\u0174\x03\x02\x02\x02o\u0186\x03\x02\x02\x02" +
		"qr\x07k\x02\x02rs\x07u\x02\x02s\x04\x03\x02\x02\x02tu\x07c\x02\x02uv\x07" +
		"u\x02\x02v\x06\x03\x02\x02\x02wx\x07k\x02\x02xy\x07h\x02\x02y\b\x03\x02" +
		"\x02\x02z{\x07g\x02\x02{|\x07n\x02\x02|}\x07u\x02\x02}~\x07g\x02\x02~" +
		"\n\x03\x02\x02\x02\x7F\x80\x07g\x02\x02\x80\x81\x07n\x02\x02\x81\x82\x07" +
		"k\x02\x02\x82\x83\x07h\x02\x02\x83\f\x03\x02\x02\x02\x84\x85\x07n\x02" +
		"\x02\x85\x86\x07q\x02\x02\x86\x87\x07q\x02\x02\x87\x88\x07r\x02\x02\x88" +
		"\x0E\x03\x02\x02\x02\x89\x8A\x07k\x02\x02\x8A\x8B\x07p\x02\x02\x8B\x10" +
		"\x03\x02\x02\x02\x8C\x8D\x07d\x02\x02\x8D\x8E\x07t\x02\x02\x8E\x8F\x07" +
		"g\x02\x02\x8F\x90\x07c\x02\x02\x90\x91\x07m\x02\x02\x91\x12\x03\x02\x02" +
		"\x02\x92\x93\x07t\x02\x02\x93\x94\x07g\x02\x02\x94\x95\x07v\x02\x02\x95" +
		"\x96\x07w\x02\x02\x96\x97\x07t\x02\x02\x97\x98\x07p\x02\x02\x98\x14\x03" +
		"\x02\x02\x02\x99\x9A\x07%\x02\x02\x9A\x9B\x07}\x02\x02\x9B\x9F\x03\x02" +
		"\x02\x02\x9C\x9E\v\x02\x02\x02\x9D\x9C\x03\x02\x02\x02\x9E\xA1\x03\x02" +
		"\x02\x02\x9F\xA0\x03\x02\x02\x02\x9F\x9D\x03\x02\x02\x02\xA0\xA2\x03\x02" +
		"\x02\x02\xA1\x9F\x03\x02\x02\x02\xA2\xA3\x07\x7F\x02\x02\xA3\x16\x03\x02" +
		"\x02\x02\xA4\xA5\x06\f\x02\x02\xA5\xB1\x05i5\x02\xA6\xA8\x07\x0F\x02\x02" +
		"\xA7\xA6\x03\x02\x02\x02\xA7\xA8\x03\x02\x02\x02\xA8\xA9\x03\x02\x02\x02" +
		"\xA9\xAC\x07\f\x02\x02\xAA\xAC\x07\x0F\x02\x02\xAB\xA7\x03\x02\x02\x02" +
		"\xAB\xAA\x03\x02\x02\x02\xAC\xAE\x03\x02\x02\x02\xAD\xAF\x05i5\x02\xAE" +
		"\xAD\x03\x02\x02\x02\xAE\xAF\x03\x02\x02\x02\xAF\xB1\x03\x02\x02\x02\xB0" +
		"\xA4\x03\x02\x02\x02\xB0\xAB\x03\x02\x02\x02\xB1\xB2\x03\x02\x02\x02\xB2" +
		"\xB3\b\f\x02\x02\xB3\x18\x03\x02\x02\x02\xB4\xB5\x07]\x02\x02\xB5\xB6" +
		"\b\r\x03\x02\xB6\x1A\x03\x02\x02\x02\xB7\xB8\x07_\x02\x02\xB8\xB9\b\x0E" +
		"\x04\x02\xB9\x1C\x03\x02\x02\x02\xBA\xBB\x07*\x02\x02\xBB\xBC\b\x0F\x05" +
		"\x02\xBC\x1E\x03\x02\x02\x02\xBD\xBE\x07+\x02\x02\xBE\xBF\b\x10\x06\x02" +
		"\xBF \x03\x02\x02\x02\xC0\xC1\x07}\x02\x02\xC1\xC2\b\x11\x07\x02\xC2\"" +
		"\x03\x02\x02\x02\xC3\xC4\x07\x7F\x02\x02\xC4\xC5\b\x12\b\x02\xC5$\x03" +
		"\x02\x02\x02\xC6\xC7\x07.\x02\x02\xC7&\x03\x02\x02\x02\xC8\xC9\x07?\x02" +
		"\x02\xC9(\x03\x02\x02\x02\xCA\xCB\x07A\x02\x02\xCB*\x03\x02\x02\x02\xCC" +
		"\xCD\x07<\x02\x02\xCD,\x03\x02\x02\x02\xCE\xCF\x070\x02\x02\xCF.\x03\x02" +
		"\x02\x02\xD0\xD1\x07-\x02\x02\xD10\x03\x02\x02\x02\xD2\xD3\x07/\x02\x02" +
		"\xD32\x03\x02\x02\x02\xD4\xD5\x07#\x02\x02\xD54\x03\x02\x02\x02\xD6\xD7" +
		"\x07,\x02\x02\xD76\x03\x02\x02\x02\xD8\xD9\x071\x02\x02\xD98\x03\x02\x02" +
		"\x02\xDA\xDB\x07\'\x02\x02\xDB:\x03\x02\x02\x02\xDC\xDD\x07`\x02\x02\xDD" +
		"<\x03\x02\x02\x02\xDE\xDF\x07%\x02\x02\xDF>\x03\x02\x02\x02\xE0\xE1\x07" +
		">\x02\x02\xE1@\x03\x02\x02\x02\xE2\xE3\x07@\x02\x02\xE3B\x03\x02\x02\x02" +
		"\xE4\xE5\x07(\x02\x02\xE5D\x03\x02\x02\x02\xE6\xE7\x07~\x02\x02\xE7F\x03" +
		"\x02\x02\x02\xE8\xE9\x07\x80\x02\x02\xE9H\x03\x02\x02\x02\xEA\xEB\x07" +
		"B\x02\x02\xEBJ\x03\x02\x02\x02\xEC\xED\x07a\x02\x02\xEDL\x03\x02\x02\x02" +
		"\xEE\xEF\x07^\x02\x02\xEFN\x03\x02\x02\x02\xF0\xF1\x07v\x02\x02\xF1\xF2" +
		"\x07t\x02\x02\xF2\xF3\x07w\x02\x02\xF3\xFA\x07g\x02\x02\xF4\xF5\x07h\x02" +
		"\x02\xF5\xF6\x07c\x02\x02\xF6\xF7\x07n\x02\x02\xF7\xF8\x07u\x02\x02\xF8" +
		"\xFA\x07g\x02\x02\xF9\xF0\x03\x02\x02\x02\xF9\xF4\x03\x02\x02\x02\xFA" +
		"P\x03\x02\x02\x02\xFB\xFD\t\x02\x02\x02\xFC\xFE\t\x02\x02\x02\xFD\xFC" +
		"\x03\x02\x02\x02\xFD\xFE\x03\x02\x02\x02\xFE\xFF\x03\x02\x02\x02\xFF\u0100" +
		"\x07z\x02\x02\u0100\u0101\x05m7\x02\u0101\u0102\x070\x02\x02\u0102\u0103" +
		"\x05m7\x02\u0103\u0109\x03\x02\x02\x02\u0104\u0105\x05k6\x02\u0105\u0106" +
		"\x070\x02\x02\u0106\u0107\x05k6\x02\u0107\u0109\x03\x02\x02\x02\u0108" +
		"\xFB\x03\x02\x02\x02\u0108\u0104\x03\x02\x02\x02\u0109R\x03\x02\x02\x02" +
		"\u010A\u010C\t\x02\x02\x02\u010B\u010D\t\x02\x02\x02\u010C\u010B\x03\x02" +
		"\x02\x02\u010C\u010D\x03\x02\x02\x02\u010D\u010E\x03\x02\x02\x02\u010E" +
		"\u010F\x07z\x02\x02\u010F\u0112\x05m7\x02\u0110\u0112\x05k6\x02\u0111" +
		"\u010A\x03\x02\x02\x02\u0111\u0110\x03\x02\x02\x02\u0112T\x03\x02\x02" +
		"\x02\u0113\u0114\x07)\x02\x02\u0114\u0115\n\x03\x02\x02\u0115\u0116\x07" +
		")\x02\x02\u0116V\x03\x02\x02\x02\u0117\u011B\x07$\x02\x02\u0118\u011A" +
		"\x05o8\x02\u0119\u0118\x03\x02\x02\x02\u011A\u011D\x03\x02\x02\x02\u011B" +
		"\u0119\x03\x02\x02\x02\u011B\u011C\x03\x02\x02\x02\u011C\u011E\x03\x02" +
		"\x02\x02\u011D\u011B\x03\x02\x02\x02\u011E\u011F\x07$\x02\x02\u011FX\x03" +
		"\x02\x02\x02\u0120\u0124\x07$\x02\x02\u0121\u0123\x05o8\x02\u0122\u0121" +
		"\x03\x02\x02\x02\u0123\u0126\x03\x02\x02\x02\u0124\u0122\x03\x02\x02\x02" +
		"\u0124\u0125\x03\x02\x02\x02\u0125\u0127\x03\x02\x02\x02\u0126\u0124\x03" +
		"\x02\x02\x02\u0127\u0128\x07}\x02\x02\u0128Z\x03\x02\x02\x02\u0129\u012D" +
		"\x07\x7F\x02\x02\u012A\u012C\x05o8\x02\u012B\u012A\x03\x02\x02\x02\u012C" +
		"\u012F\x03\x02\x02\x02\u012D\u012B\x03\x02\x02\x02\u012D\u012E\x03\x02" +
		"\x02\x02\u012E\u0130\x03\x02\x02\x02\u012F\u012D\x03\x02\x02\x02\u0130" +
		"\u0131\x07}\x02\x02\u0131\\\x03\x02\x02\x02\u0132\u0136\x07\x7F\x02\x02" +
		"\u0133\u0135\x05o8\x02\u0134\u0133\x03\x02\x02\x02\u0135\u0138\x03\x02" +
		"\x02\x02\u0136\u0134\x03\x02\x02\x02\u0136\u0137\x03\x02\x02\x02\u0137" +
		"\u0139\x03\x02\x02\x02\u0138\u0136\x03\x02\x02\x02\u0139\u013A\x07$\x02" +
		"\x02\u013A^\x03\x02\x02\x02\u013B\u013D\t\x04\x02\x02\u013C\u013B\x03" +
		"\x02\x02\x02\u013D\u013E\x03\x02\x02\x02\u013E\u013C\x03\x02\x02\x02\u013E" +
		"\u013F\x03\x02\x02\x02\u013F`\x03\x02\x02\x02\u0140\u0141\x05i5\x02\u0141" +
		"\u0142\x03\x02\x02\x02\u0142\u0143\b1\t\x02\u0143b\x03\x02\x02\x02\u0144" +
		"\u0145\x071\x02\x02\u0145\u0146\x071\x02\x02\u0146\u014A\x03\x02\x02\x02" +
		"\u0147\u0149\n\x05\x02\x02\u0148\u0147\x03\x02\x02\x02\u0149\u014C\x03" +
		"\x02\x02\x02\u014A\u0148\x03\x02\x02\x02\u014A\u014B\x03\x02\x02\x02\u014B" +
		"\u014D\x03\x02\x02\x02\u014C\u014A\x03\x02\x02\x02\u014D\u014E\b2\t\x02" +
		"\u014Ed\x03\x02\x02\x02\u014F\u0150\x07^\x02\x02\u0150\u0156\x05i5\x02" +
		"\u0151\u0153\x07\x0F\x02\x02\u0152\u0151\x03\x02\x02\x02\u0152\u0153\x03" +
		"\x02\x02\x02\u0153\u0154\x03\x02\x02\x02\u0154\u0157\x07\f\x02\x02\u0155" +
		"\u0157\x07\x0F\x02\x02\u0156\u0152\x03\x02\x02\x02\u0156\u0155\x03\x02" +
		"\x02\x02\u0157\u0158\x03\x02\x02\x02\u0158\u0159\b3\t\x02\u0159f\x03\x02" +
		"\x02\x02\u015A\u015B\v\x02\x02\x02\u015B\u015C\x03\x02\x02\x02\u015C\u015D" +
		"\b4\n\x02\u015Dh\x03\x02\x02\x02\u015E\u0160\t\x06\x02\x02\u015F\u015E" +
		"\x03\x02\x02\x02\u0160\u0161\x03\x02\x02\x02\u0161\u015F\x03\x02\x02\x02" +
		"\u0161\u0162\x03\x02\x02\x02\u0162j\x03\x02\x02\x02\u0163\u0165\t\x02" +
		"\x02\x02\u0164\u0163\x03\x02\x02\x02\u0165\u0166\x03\x02\x02\x02\u0166" +
		"\u0164\x03\x02\x02\x02\u0166\u0167\x03\x02\x02\x02\u0167\u0170\x03\x02" +
		"\x02\x02\u0168\u016A\x07a\x02\x02\u0169\u016B\t\x02\x02\x02\u016A\u0169" +
		"\x03\x02\x02\x02\u016B\u016C\x03\x02\x02\x02\u016C\u016A\x03\x02\x02\x02" +
		"\u016C\u016D\x03\x02\x02\x02\u016D\u016F\x03\x02\x02\x02\u016E\u0168\x03" +
		"\x02\x02\x02\u016F\u0172\x03\x02\x02\x02\u0170\u016E\x03\x02\x02\x02\u0170" +
		"\u0171\x03\x02\x02\x02\u0171l\x03\x02\x02\x02\u0172\u0170\x03\x02\x02" +
		"\x02\u0173\u0175\t\x07\x02\x02\u0174\u0173\x03\x02\x02\x02\u0175\u0176" +
		"\x03\x02\x02\x02\u0176\u0174\x03\x02\x02\x02\u0176\u0177\x03\x02\x02\x02" +
		"\u0177\u0180\x03\x02\x02\x02\u0178\u017A\x07a\x02\x02\u0179\u017B\t\x07" +
		"\x02\x02\u017A\u0179\x03\x02\x02\x02\u017B\u017C\x03\x02\x02\x02\u017C" +
		"\u017A\x03\x02\x02\x02\u017C\u017D\x03\x02\x02\x02\u017D\u017F\x03\x02" +
		"\x02\x02\u017E\u0178\x03\x02\x02\x02\u017F\u0182\x03\x02\x02\x02\u0180" +
		"\u017E\x03\x02\x02\x02\u0180\u0181\x03\x02\x02\x02\u0181n\x03\x02\x02" +
		"\x02\u0182\u0180\x03\x02\x02\x02\u0183\u0187\n\b\x02\x02\u0184\u0185\x07" +
		"^\x02\x02\u0185\u0187\t\t\x02\x02\u0186\u0183\x03\x02\x02\x02\u0186\u0184" +
		"\x03\x02\x02\x02\u0187p\x03\x02\x02\x02\x1D\x02\x9F\xA7\xAB\xAE\xB0\xF9" +
		"\xFD\u0108\u010C\u0111\u011B\u0124\u012D\u0136\u013E\u014A\u0152\u0156" +
		"\u0161\u0166\u016C\u0170\u0176\u017C\u0180\u0186\v\x03\f\x02\x03\r\x03" +
		"\x03\x0E\x04\x03\x0F\x05\x03\x10\x06\x03\x11\x07\x03\x12\b\b\x02\x02\x02" +
		"\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

