// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN_BRACKET = 3;
	public static readonly CLOSE_BRACKET = 4;
	public static readonly OPEN_PAREN = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_BRACE = 7;
	public static readonly CLOSE_BRACE = 8;
	public static readonly ACTUAL = 9;
	public static readonly BREAK = 10;
	public static readonly CONTINUE = 11;
	public static readonly DO = 12;
	public static readonly ELSE = 13;
	public static readonly EXPECT = 14;
	public static readonly EXPORT = 15;
	public static readonly FOR = 16;
	public static readonly IF = 17;
	public static readonly IMPORT = 18;
	public static readonly RETURN = 19;
	public static readonly WHILE = 20;
	public static readonly AND = 21;
	public static readonly AS = 22;
	public static readonly IS = 23;
	public static readonly OR = 24;
	public static readonly ASSIGN = 25;
	public static readonly COLON = 26;
	public static readonly COMMA = 27;
	public static readonly DOT = 28;
	public static readonly GENERIC_LEFT = 29;
	public static readonly GENERIC_RIGHT = 30;
	public static readonly LAMBDA = 31;
	public static readonly QUESTION = 32;
	public static readonly FLOAT_LITERAL = 33;
	public static readonly INTEGER_LITERAL = 34;
	public static readonly STRING_LITERAL = 35;
	public static readonly PREPROCESSOR = 36;
	public static readonly ID = 37;
	public static readonly OP = 38;
	public static readonly NL = 39;
	public static readonly WS = 40;
	public static readonly BLOCK_COMMENT = 41;
	public static readonly LINE_COMMENT = 42;
	public static readonly UNEXPECTED = 43;
	public static readonly LINE_JOINING = 44;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", "DO", "ELSE", "EXPECT", 
		"EXPORT", "FOR", "IF", "IMPORT", "RETURN", "WHILE", "AND", "AS", "IS", 
		"OR", "ASSIGN", "COLON", "COMMA", "DOT", "GENERIC_LEFT", "GENERIC_RIGHT", 
		"LAMBDA", "QUESTION", "FLOAT_LITERAL", "INTEGER_LITERAL", "STRING_LITERAL", 
		"PREPROCESSOR", "ID", "OP", "NL", "WS", "BLOCK_COMMENT", "LINE_COMMENT", 
		"UNEXPECTED", "LINE_JOINING", "Radix", "DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'actual'", "'break'", "'continue'", "'do'", "'else'", "'expect'", "'export'", 
		"'for'", "'if'", "'import'", "'return'", "'while'", "'and'", "'as'", "'is'", 
		"'or'", "'='", "':'", "','", "'.'", "'<|'", "'|>'", "'=>'", "'?'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", 
		"DO", "ELSE", "EXPECT", "EXPORT", "FOR", "IF", "IMPORT", "RETURN", "WHILE", 
		"AND", "AS", "IS", "OR", "ASSIGN", "COLON", "COMMA", "DOT", "GENERIC_LEFT", 
		"GENERIC_RIGHT", "LAMBDA", "QUESTION", "FLOAT_LITERAL", "INTEGER_LITERAL", 
		"STRING_LITERAL", "PREPROCESSOR", "ID", "OP", "NL", "WS", "BLOCK_COMMENT", 
		"LINE_COMMENT", "UNEXPECTED", "LINE_JOINING",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 2:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 3:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 4:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 5:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 36:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 36:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02.\u0176\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03" +
		"\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b" +
		"\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03" +
		"\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10" +
		"\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12" +
		"\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13" +
		"\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15" +
		"\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18" +
		"\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1C" +
		"\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 " +
		"\x03 \x03 \x03 \x03 \x03 \x03 \x03 \x03 \x05 \xE0\n \x03!\x03!\x03!\x03" +
		"!\x05!\xE6\n!\x03\"\x03\"\x03\"\x03\"\x07\"\xEC\n\"\f\"\x0E\"\xEF\v\"" +
		"\x03\"\x03\"\x03#\x03#\x03#\x03#\x03#\x03#\x07#\xF9\n#\f#\x0E#\xFC\v#" +
		"\x03#\x03#\x07#\u0100\n#\f#\x0E#\u0103\v#\x03#\x03#\x03$\x03$\x07$\u0109" +
		"\n$\f$\x0E$\u010C\v$\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03%\x03" +
		"%\x03%\x03%\x03%\x03%\x05%\u011C\n%\x03&\x03&\x03&\x05&\u0121\n&\x03&" +
		"\x03&\x05&\u0125\n&\x03&\x05&\u0128\n&\x05&\u012A\n&\x03&\x03&\x03\'\x06" +
		"\'\u012F\n\'\r\'\x0E\'\u0130\x03\'\x03\'\x03(\x03(\x03(\x03(\x03(\x07" +
		"(\u013A\n(\f(\x0E(\u013D\v(\x03(\x03(\x03(\x03(\x03(\x03)\x03)\x03)\x03" +
		")\x07)\u0148\n)\f)\x0E)\u014B\v)\x03)\x03)\x03*\x03*\x03*\x03*\x03+\x03" +
		"+\x07+\u0155\n+\f+\x0E+\u0158\v+\x03+\x05+\u015B\n+\x03+\x03+\x05+\u015F" +
		"\n+\x03+\x03+\x03,\x03,\x05,\u0165\n,\x03,\x03,\x03-\x03-\x07-\u016B\n" +
		"-\f-\x0E-\u016E\v-\x03.\x03.\x07.\u0172\n.\f.\x0E.\u0175\v.\x05\xFA\u0101" +
		"\u013B\x02\x02/\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r" +
		"\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10" +
		"\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02" +
		"\x17)\x02\x18+\x02\x19-\x02\x1A/\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02" +
		"\x1F9\x02 ;\x02!=\x02\"?\x02#A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02" +
		"*O\x02+Q\x02,S\x02-U\x02.W\x02\x02Y\x02\x02[\x02\x02\x03\x02\r\x03\x02" +
		"))\n\x02))^^ddhhppttvvxx\x05\x02C\\aac|\x06\x022;C\\aac|\x05\x02##\'\'" +
		",`\x04\x02\v\v\"\"\x04\x02\f\f\x0F\x0F\x03\x022;\x04\x02ZZzz\x04\x022" +
		";aa\x05\x022;C\\c|\x02\u018F\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02" +
		"\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02" +
		"\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02" +
		"\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02" +
		"\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02" +
		"\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02" +
		"%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03" +
		"\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02" +
		"\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x02" +
		"9\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02" +
		"\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02" +
		"\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03" +
		"\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02" +
		"\x02\x02U\x03\x02\x02\x02\x03]\x03\x02\x02\x02\x05`\x03\x02\x02\x02\x07" +
		"c\x03\x02\x02\x02\tf\x03\x02\x02\x02\vi\x03\x02\x02\x02\rl\x03\x02\x02" +
		"\x02\x0Fo\x03\x02\x02\x02\x11v\x03\x02\x02\x02\x13|\x03\x02\x02\x02\x15" +
		"\x85\x03\x02\x02\x02\x17\x88\x03\x02\x02\x02\x19\x8D\x03\x02\x02\x02\x1B" +
		"\x94\x03\x02\x02\x02\x1D\x9B\x03\x02\x02\x02\x1F\x9F\x03\x02\x02\x02!" +
		"\xA2\x03\x02\x02\x02#\xA9\x03\x02\x02\x02%\xB0\x03\x02\x02\x02\'\xB6\x03" +
		"\x02\x02\x02)\xBA\x03\x02\x02\x02+\xBD\x03\x02\x02\x02-\xC0\x03\x02\x02" +
		"\x02/\xC3\x03\x02\x02\x021\xC5\x03\x02\x02\x023\xC7\x03\x02\x02\x025\xC9" +
		"\x03\x02\x02\x027\xCB\x03\x02\x02\x029\xCE\x03\x02\x02\x02;\xD1\x03\x02" +
		"\x02\x02=\xD4\x03\x02\x02\x02?\xDF\x03\x02\x02\x02A\xE5\x03\x02\x02\x02" +
		"C\xE7\x03\x02\x02\x02E\xF2\x03\x02\x02\x02G\u0106\x03\x02\x02\x02I\u011B" +
		"\x03\x02\x02\x02K\u0129\x03\x02\x02\x02M\u012E\x03\x02\x02\x02O\u0134" +
		"\x03\x02\x02\x02Q\u0143\x03\x02\x02\x02S\u014E\x03\x02\x02\x02U\u0152" +
		"\x03\x02\x02\x02W\u0162\x03\x02\x02\x02Y\u0168\x03\x02\x02\x02[\u016F" +
		"\x03\x02\x02\x02]^\x07]\x02\x02^_\b\x02\x02\x02_\x04\x03\x02\x02\x02`" +
		"a\x07_\x02\x02ab\b\x03\x03\x02b\x06\x03\x02\x02\x02cd\x07*\x02\x02de\b" +
		"\x04\x04\x02e\b\x03\x02\x02\x02fg\x07+\x02\x02gh\b\x05\x05\x02h\n\x03" +
		"\x02\x02\x02ij\x07}\x02\x02jk\b\x06\x06\x02k\f\x03\x02\x02\x02lm\x07\x7F" +
		"\x02\x02mn\b\x07\x07\x02n\x0E\x03\x02\x02\x02op\x07c\x02\x02pq\x07e\x02" +
		"\x02qr\x07v\x02\x02rs\x07w\x02\x02st\x07c\x02\x02tu\x07n\x02\x02u\x10" +
		"\x03\x02\x02\x02vw\x07d\x02\x02wx\x07t\x02\x02xy\x07g\x02\x02yz\x07c\x02" +
		"\x02z{\x07m\x02\x02{\x12\x03\x02\x02\x02|}\x07e\x02\x02}~\x07q\x02\x02" +
		"~\x7F\x07p\x02\x02\x7F\x80\x07v\x02\x02\x80\x81\x07k\x02\x02\x81\x82\x07" +
		"p\x02\x02\x82\x83\x07w\x02\x02\x83\x84\x07g\x02\x02\x84\x14\x03\x02\x02" +
		"\x02\x85\x86\x07f\x02\x02\x86\x87\x07q\x02\x02\x87\x16\x03\x02\x02\x02" +
		"\x88\x89\x07g\x02\x02\x89\x8A\x07n\x02\x02\x8A\x8B\x07u\x02\x02\x8B\x8C" +
		"\x07g\x02\x02\x8C\x18\x03\x02\x02\x02\x8D\x8E\x07g\x02\x02\x8E\x8F\x07" +
		"z\x02\x02\x8F\x90\x07r\x02\x02\x90\x91\x07g\x02\x02\x91\x92\x07e\x02\x02" +
		"\x92\x93\x07v\x02\x02\x93\x1A\x03\x02\x02\x02\x94\x95\x07g\x02\x02\x95" +
		"\x96\x07z\x02\x02\x96\x97\x07r\x02\x02\x97\x98\x07q\x02\x02\x98\x99\x07" +
		"t\x02\x02\x99\x9A\x07v\x02\x02\x9A\x1C\x03\x02\x02\x02\x9B\x9C\x07h\x02" +
		"\x02\x9C\x9D\x07q\x02\x02\x9D\x9E\x07t\x02\x02\x9E\x1E\x03\x02\x02\x02" +
		"\x9F\xA0\x07k\x02\x02\xA0\xA1\x07h\x02\x02\xA1 \x03\x02\x02\x02\xA2\xA3" +
		"\x07k\x02\x02\xA3\xA4\x07o\x02\x02\xA4\xA5\x07r\x02\x02\xA5\xA6\x07q\x02" +
		"\x02\xA6\xA7\x07t\x02\x02\xA7\xA8\x07v\x02\x02\xA8\"\x03\x02\x02\x02\xA9" +
		"\xAA\x07t\x02\x02\xAA\xAB\x07g\x02\x02\xAB\xAC\x07v\x02\x02\xAC\xAD\x07" +
		"w\x02\x02\xAD\xAE\x07t\x02\x02\xAE\xAF\x07p\x02\x02\xAF$\x03\x02\x02\x02" +
		"\xB0\xB1\x07y\x02\x02\xB1\xB2\x07j\x02\x02\xB2\xB3\x07k\x02\x02\xB3\xB4" +
		"\x07n\x02\x02\xB4\xB5\x07g\x02\x02\xB5&\x03\x02\x02\x02\xB6\xB7\x07c\x02" +
		"\x02\xB7\xB8\x07p\x02\x02\xB8\xB9\x07f\x02\x02\xB9(\x03\x02\x02\x02\xBA" +
		"\xBB\x07c\x02\x02\xBB\xBC\x07u\x02\x02\xBC*\x03\x02\x02\x02\xBD\xBE\x07" +
		"k\x02\x02\xBE\xBF\x07u\x02\x02\xBF,\x03\x02\x02\x02\xC0\xC1\x07q\x02\x02" +
		"\xC1\xC2\x07t\x02\x02\xC2.\x03\x02\x02\x02\xC3\xC4\x07?\x02\x02\xC40\x03" +
		"\x02\x02\x02\xC5\xC6\x07<\x02\x02\xC62\x03\x02\x02\x02\xC7\xC8\x07.\x02" +
		"\x02\xC84\x03\x02\x02\x02\xC9\xCA\x070\x02\x02\xCA6\x03\x02\x02\x02\xCB" +
		"\xCC\x07>\x02\x02\xCC\xCD\x07~\x02\x02\xCD8\x03\x02\x02\x02\xCE\xCF\x07" +
		"~\x02\x02\xCF\xD0\x07@\x02\x02\xD0:\x03\x02\x02\x02\xD1\xD2\x07?\x02\x02" +
		"\xD2\xD3\x07@\x02\x02\xD3<\x03\x02\x02\x02\xD4\xD5\x07A\x02\x02\xD5>\x03" +
		"\x02\x02\x02\xD6\xD7\x05W,\x02\xD7\xD8\x05[.\x02\xD8\xD9\x070\x02\x02" +
		"\xD9\xDA\x05[.\x02\xDA\xE0\x03\x02\x02\x02\xDB\xDC\x05Y-\x02\xDC\xDD\x07" +
		"0\x02\x02\xDD\xDE\x05Y-\x02\xDE\xE0\x03\x02\x02\x02\xDF\xD6\x03\x02\x02" +
		"\x02\xDF\xDB\x03\x02\x02\x02\xE0@\x03\x02\x02\x02\xE1\xE2\x05W,\x02\xE2" +
		"\xE3\x05[.\x02\xE3\xE6\x03\x02\x02\x02\xE4\xE6\x05Y-\x02\xE5\xE1\x03\x02" +
		"\x02\x02\xE5\xE4\x03\x02\x02\x02\xE6B\x03\x02\x02\x02\xE7\xED\x07)\x02" +
		"\x02\xE8\xEC\n\x02\x02\x02\xE9\xEA\x07^\x02\x02\xEA\xEC\t\x03\x02\x02" +
		"\xEB\xE8\x03\x02\x02\x02\xEB\xE9\x03\x02\x02\x02\xEC\xEF\x03\x02\x02\x02" +
		"\xED\xEB\x03\x02\x02\x02\xED\xEE\x03\x02\x02\x02\xEE\xF0\x03\x02\x02\x02" +
		"\xEF\xED\x03\x02\x02\x02\xF0\xF1\x07)\x02\x02\xF1D\x03\x02\x02\x02\xF2" +
		"\xF3\x07%\x02\x02\xF3\xF4\x07}\x02\x02\xF4\u0101\x03\x02\x02\x02\xF5\u0100" +
		"\x05E#\x02\xF6\xFA\x07}\x02\x02\xF7\xF9\v\x02\x02\x02\xF8\xF7\x03\x02" +
		"\x02\x02\xF9\xFC\x03\x02\x02\x02\xFA\xFB\x03\x02\x02\x02\xFA\xF8\x03\x02" +
		"\x02\x02\xFB\xFD\x03\x02\x02\x02\xFC\xFA\x03\x02\x02\x02\xFD\u0100\x07" +
		"\x7F\x02\x02\xFE\u0100\v\x02\x02\x02\xFF\xF5\x03\x02\x02\x02\xFF\xF6\x03" +
		"\x02\x02\x02\xFF\xFE\x03\x02\x02\x02\u0100\u0103\x03\x02\x02\x02\u0101" +
		"\u0102\x03\x02\x02\x02\u0101\xFF\x03\x02\x02\x02\u0102\u0104\x03\x02\x02" +
		"\x02\u0103\u0101\x03\x02\x02\x02\u0104\u0105\x07\x7F\x02\x02\u0105F\x03" +
		"\x02\x02\x02\u0106\u010A\t\x04\x02\x02\u0107\u0109\t\x05\x02\x02\u0108" +
		"\u0107\x03\x02\x02\x02\u0109\u010C\x03\x02\x02\x02\u010A\u0108\x03\x02" +
		"\x02\x02\u010A\u010B\x03\x02\x02\x02\u010BH\x03\x02\x02\x02\u010C\u010A" +
		"\x03\x02\x02\x02\u010D\u011C\t\x06\x02\x02\u010E\u010F\x070\x02\x02\u010F" +
		"\u011C\x070\x02\x02\u0110\u0111\x070\x02\x02\u0111\u0112\x070\x02\x02" +
		"\u0112\u011C\x070\x02\x02\u0113\u0114\x07>\x02\x02\u0114\u011C\x07?\x02" +
		"\x02\u0115\u0116\x07@\x02\x02\u0116\u011C\x07?\x02\x02\u0117\u0118\x07" +
		"?\x02\x02\u0118\u011C\x07?\x02\x02\u0119\u011A\x07#\x02\x02\u011A\u011C" +
		"\x07?\x02\x02\u011B\u010D\x03\x02\x02\x02\u011B\u010E\x03\x02\x02\x02" +
		"\u011B\u0110\x03\x02\x02\x02\u011B\u0113\x03\x02\x02\x02\u011B\u0115\x03" +
		"\x02\x02\x02\u011B\u0117\x03\x02\x02\x02\u011B\u0119\x03\x02\x02\x02\u011C" +
		"J\x03\x02\x02\x02\u011D\u011E\x06&\x02\x02\u011E\u012A\x05M\'\x02\u011F" +
		"\u0121\x07\x0F\x02\x02\u0120\u011F\x03\x02\x02\x02\u0120\u0121\x03\x02" +
		"\x02\x02\u0121\u0122\x03\x02\x02\x02\u0122\u0125\x07\f\x02\x02\u0123\u0125" +
		"\x07\x0F\x02\x02\u0124\u0120\x03\x02\x02\x02\u0124\u0123\x03\x02\x02\x02" +
		"\u0125\u0127\x03\x02\x02\x02\u0126\u0128\x05M\'\x02\u0127\u0126\x03\x02" +
		"\x02\x02\u0127\u0128\x03\x02\x02\x02\u0128\u012A\x03\x02\x02\x02\u0129" +
		"\u011D\x03\x02\x02\x02\u0129\u0124\x03\x02\x02\x02\u012A\u012B\x03\x02" +
		"\x02\x02\u012B\u012C\b&\b\x02\u012CL\x03\x02\x02\x02\u012D\u012F\t\x07" +
		"\x02\x02\u012E\u012D\x03\x02\x02\x02\u012F\u0130\x03\x02\x02\x02\u0130" +
		"\u012E\x03\x02\x02\x02\u0130\u0131\x03\x02\x02\x02\u0131\u0132\x03\x02" +
		"\x02\x02\u0132\u0133\b\'\t\x02\u0133N\x03\x02\x02\x02\u0134\u0135\x07" +
		"1\x02\x02\u0135\u0136\x07,\x02\x02\u0136\u013B\x03\x02\x02\x02\u0137\u013A" +
		"\x05O(\x02\u0138\u013A\v\x02\x02\x02\u0139\u0137\x03\x02\x02\x02\u0139" +
		"\u0138\x03\x02\x02\x02\u013A\u013D\x03\x02\x02\x02\u013B\u013C\x03\x02" +
		"\x02\x02\u013B\u0139\x03\x02\x02\x02\u013C\u013E\x03\x02\x02\x02\u013D" +
		"\u013B\x03\x02\x02\x02\u013E\u013F\x07,\x02\x02\u013F\u0140\x071\x02\x02" +
		"\u0140\u0141\x03\x02\x02\x02\u0141\u0142\b(\n\x02\u0142P\x03\x02\x02\x02" +
		"\u0143\u0144\x07/\x02\x02\u0144\u0145\x07/\x02\x02\u0145\u0149\x03\x02" +
		"\x02\x02\u0146\u0148\n\b\x02\x02\u0147\u0146\x03\x02\x02\x02\u0148\u014B" +
		"\x03\x02\x02\x02\u0149\u0147\x03\x02\x02\x02\u0149\u014A\x03\x02\x02\x02" +
		"\u014A\u014C\x03\x02\x02\x02\u014B\u0149\x03\x02\x02\x02\u014C\u014D\b" +
		")\n\x02\u014DR\x03\x02\x02\x02\u014E\u014F\v\x02\x02\x02\u014F\u0150\x03" +
		"\x02\x02\x02\u0150\u0151\b*\v\x02\u0151T\x03\x02\x02\x02\u0152\u0156\x07" +
		"^\x02\x02\u0153\u0155\t\x07\x02\x02\u0154\u0153\x03\x02\x02\x02\u0155" +
		"\u0158\x03\x02\x02\x02\u0156\u0154\x03\x02\x02\x02\u0156\u0157\x03\x02" +
		"\x02\x02\u0157\u015E\x03\x02\x02\x02\u0158\u0156\x03\x02\x02\x02\u0159" +
		"\u015B\x07\x0F\x02\x02\u015A\u0159\x03\x02\x02\x02\u015A\u015B\x03\x02" +
		"\x02\x02\u015B\u015C\x03\x02\x02\x02\u015C\u015F\x07\f\x02\x02\u015D\u015F" +
		"\x04\x0E\x0F\x02\u015E\u015A\x03\x02\x02\x02\u015E\u015D\x03\x02\x02\x02" +
		"\u015F\u0160\x03\x02\x02\x02\u0160\u0161\b+\f\x02\u0161V\x03\x02\x02\x02" +
		"\u0162\u0164\t\t\x02\x02\u0163\u0165\t\t\x02\x02\u0164\u0163\x03\x02\x02" +
		"\x02\u0164\u0165\x03\x02\x02\x02\u0165\u0166\x03\x02\x02\x02\u0166\u0167" +
		"\t\n\x02\x02\u0167X\x03\x02\x02\x02\u0168\u016C\t\t\x02\x02\u0169\u016B" +
		"\t\v\x02\x02\u016A\u0169\x03\x02\x02\x02\u016B\u016E\x03\x02\x02\x02\u016C" +
		"\u016A\x03\x02\x02\x02\u016C\u016D\x03\x02\x02\x02\u016DZ\x03\x02\x02" +
		"\x02\u016E\u016C\x03\x02\x02\x02\u016F\u0173\t\f\x02\x02\u0170\u0172\t" +
		"\x05\x02\x02\u0171\u0170\x03\x02\x02\x02\u0172\u0175\x03\x02\x02\x02\u0173" +
		"\u0171\x03\x02\x02\x02\u0173\u0174\x03\x02\x02\x02\u0174\\\x03\x02\x02" +
		"\x02\u0175\u0173\x03\x02\x02\x02\x1C\x02\xDF\xE5\xEB\xED\xFA\xFF\u0101" +
		"\u010A\u011B\u0120\u0124\u0127\u0129\u0130\u0139\u013B\u0149\u0156\u015A" +
		"\u015E\u0164\u016A\u016C\u0171\u0173\r\x03\x02\x02\x03\x03\x03\x03\x04" +
		"\x04\x03\x05\x05\x03\x06\x06\x03\x07\x07\x03&\b\x02\x05\x02\x02\x06\x02" +
		"\x02\x04\x02\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

