// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN_BRACKET = 3;
	public static readonly CLOSE_BRACKET = 4;
	public static readonly OPEN_PAREN = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_BRACE = 7;
	public static readonly CLOSE_BRACE = 8;
	public static readonly IS = 9;
	public static readonly AS = 10;
	public static readonly IF = 11;
	public static readonly IN = 12;
	public static readonly OR = 13;
	public static readonly FOR = 14;
	public static readonly NOT = 15;
	public static readonly AND = 16;
	public static readonly ELSE = 17;
	public static readonly INIT = 18;
	public static readonly LOOP = 19;
	public static readonly TEST = 20;
	public static readonly THIS = 21;
	public static readonly BREAK = 22;
	public static readonly INFIX = 23;
	public static readonly WHILE = 24;
	public static readonly ACTUAL = 25;
	public static readonly EXPECT = 26;
	public static readonly EXPORT = 27;
	public static readonly IMPORT = 28;
	public static readonly PREFIX = 29;
	public static readonly RETURN = 30;
	public static readonly POSTFIX = 31;
	public static readonly AT = 32;
	public static readonly DOT = 33;
	public static readonly PLUS = 34;
	public static readonly HASH = 35;
	public static readonly PIPE = 36;
	public static readonly LESS = 37;
	public static readonly COMMA = 38;
	public static readonly COLON = 39;
	public static readonly GREAT = 40;
	public static readonly MINUS = 41;
	public static readonly SLASH = 42;
	public static readonly CARET = 43;
	public static readonly TILDE = 44;
	public static readonly EQUAL = 45;
	public static readonly MODULO = 46;
	public static readonly QUESTION = 47;
	public static readonly ASTERISK = 48;
	public static readonly AMPERSAND = 49;
	public static readonly UNDERSCORE = 50;
	public static readonly EXCLAMATION = 51;
	public static readonly BACK_SLASH = 52;
	public static readonly NULL_LITERAL = 53;
	public static readonly FLOAT_LITERAL = 54;
	public static readonly INTEGER_LITERAL = 55;
	public static readonly BOOLEAN_LITERAL = 56;
	public static readonly CHAR_LITERAL = 57;
	public static readonly STRING_LITERAL = 58;
	public static readonly PREPROCESSOR = 59;
	public static readonly ID = 60;
	public static readonly NL = 61;
	public static readonly WS = 62;
	public static readonly COMMENT = 63;
	public static readonly ERROR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "IS", "AS", "IF", "IN", "OR", "FOR", "NOT", "AND", "ELSE", 
		"INIT", "LOOP", "TEST", "THIS", "BREAK", "INFIX", "WHILE", "ACTUAL", "EXPECT", 
		"EXPORT", "IMPORT", "PREFIX", "RETURN", "POSTFIX", "AT", "DOT", "PLUS", 
		"HASH", "PIPE", "LESS", "COMMA", "COLON", "GREAT", "MINUS", "SLASH", "CARET", 
		"TILDE", "EQUAL", "MODULO", "QUESTION", "ASTERISK", "AMPERSAND", "UNDERSCORE", 
		"EXCLAMATION", "BACK_SLASH", "NULL_LITERAL", "FLOAT_LITERAL", "INTEGER_LITERAL", 
		"BOOLEAN_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", "PREPROCESSOR", "ID", 
		"NL", "WS", "COMMENT", "DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'is'", "'as'", "'if'", "'in'", "'or'", "'for'", "'not'", "'and'", "'else'", 
		"'init'", "'loop'", "'test'", "'this'", "'break'", "'infix'", "'while'", 
		"'actual'", "'expect'", "'export'", "'import'", "'prefix'", "'return'", 
		"'postfix'", "'@'", "'.'", "'+'", "'#'", "'|'", "'<'", "','", "':'", "'>'", 
		"'-'", "'/'", "'^'", "'~'", "'='", "'%'", "'?'", "'*'", "'&'", "'_'", 
		"'!'", "'\\'", "'null'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "IS", "AS", "IF", "IN", "OR", 
		"FOR", "NOT", "AND", "ELSE", "INIT", "LOOP", "TEST", "THIS", "BREAK", 
		"INFIX", "WHILE", "ACTUAL", "EXPECT", "EXPORT", "IMPORT", "PREFIX", "RETURN", 
		"POSTFIX", "AT", "DOT", "PLUS", "HASH", "PIPE", "LESS", "COMMA", "COLON", 
		"GREAT", "MINUS", "SLASH", "CARET", "TILDE", "EQUAL", "MODULO", "QUESTION", 
		"ASTERISK", "AMPERSAND", "UNDERSCORE", "EXCLAMATION", "BACK_SLASH", "NULL_LITERAL", 
		"FLOAT_LITERAL", "INTEGER_LITERAL", "BOOLEAN_LITERAL", "CHAR_LITERAL", 
		"STRING_LITERAL", "PREPROCESSOR", "ID", "NL", "WS", "COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 2:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 3:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 4:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 5:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 58:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 58:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02A\u01C0\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03" +
		"\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n" +
		"\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03" +
		"\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03" +
		"\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03" +
		"\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03" +
		"\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03" +
		"\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03" +
		"\x16\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03" +
		"\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03" +
		"\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03" +
		"\x1A\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03" +
		"\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03" +
		"\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03" +
		"#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x03\'\x03\'\x03(\x03(\x03)\x03)\x03" +
		"*\x03*\x03+\x03+\x03,\x03,\x03-\x03-\x03.\x03.\x03/\x03/\x030\x030\x03" +
		"1\x031\x032\x032\x033\x033\x034\x034\x034\x034\x034\x035\x035\x055\u013D" +
		"\n5\x035\x035\x035\x035\x035\x035\x035\x035\x035\x055\u0148\n5\x036\x03" +
		"6\x056\u014C\n6\x036\x036\x036\x056\u0151\n6\x037\x037\x037\x037\x037" +
		"\x037\x037\x037\x037\x057\u015C\n7\x038\x038\x038\x038\x039\x039\x039" +
		"\x039\x079\u0166\n9\f9\x0E9\u0169\v9\x039\x039\x03:\x03:\x03:\x03:\x07" +
		":\u0171\n:\f:\x0E:\u0174\v:\x03:\x03:\x03;\x03;\x07;\u017A\n;\f;\x0E;" +
		"\u017D\v;\x03<\x03<\x03<\x05<\u0182\n<\x03<\x03<\x05<\u0186\n<\x03<\x05" +
		"<\u0189\n<\x05<\u018B\n<\x03<\x03<\x03=\x06=\u0190\n=\r=\x0E=\u0191\x03" +
		"=\x03=\x03>\x03>\x03>\x03>\x07>\u019A\n>\f>\x0E>\u019D\v>\x03>\x03>\x03" +
		"?\x06?\u01A2\n?\r?\x0E?\u01A3\x03?\x03?\x06?\u01A8\n?\r?\x0E?\u01A9\x07" +
		"?\u01AC\n?\f?\x0E?\u01AF\v?\x03@\x06@\u01B2\n@\r@\x0E@\u01B3\x03@\x03" +
		"@\x06@\u01B8\n@\r@\x0E@\u01B9\x07@\u01BC\n@\f@\x0E@\u01BF\v@\x03\u0172" +
		"\x02\x02A\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n" +
		"\x0F\x02\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B" +
		"\x02\x11\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x17" +
		")\x02\x18+\x02\x19-\x02\x1A/\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F" +
		"9\x02 ;\x02!=\x02\"?\x02#A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02*O" +
		"\x02+Q\x02,S\x02-U\x02.W\x02/Y\x020[\x021]\x022_\x023a\x024c\x025e\x02" +
		"6g\x027i\x028k\x029m\x02:o\x02;q\x02<s\x02=u\x02>w\x02?y\x02@{\x02A}\x02" +
		"\x02\x7F\x02\x02\x03\x02\f\x03\x022;\x04\x02ZZzz\x03\x02))\x03\x02$$\n" +
		"\x02$$^^ddhhppttvvxx\x05\x02C\\aac|\x06\x022;C\\aac|\x04\x02\v\v\"\"\x04" +
		"\x02\f\f\x0F\x0F\x05\x022;C\\c|\x02\u01D2\x02\x03\x03\x02\x02\x02\x02" +
		"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
		"\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
		"\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D" +
		"\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03" +
		"\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02" +
		"\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x02" +
		"1\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02" +
		"\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02" +
		"\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03" +
		"\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02" +
		"\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02" +
		"S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02" +
		"\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02" +
		"\x02a\x03\x02\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02\x02\x02g\x03" +
		"\x02\x02\x02\x02i\x03\x02\x02\x02\x02k\x03\x02\x02\x02\x02m\x03\x02\x02" +
		"\x02\x02o\x03\x02\x02\x02\x02q\x03\x02\x02\x02\x02s\x03\x02\x02\x02\x02" +
		"u\x03\x02\x02\x02\x02w\x03\x02\x02\x02\x02y\x03\x02\x02\x02\x02{\x03\x02" +
		"\x02\x02\x03\x81\x03\x02\x02\x02\x05\x84\x03\x02\x02\x02\x07\x87\x03\x02" +
		"\x02\x02\t\x8A\x03\x02\x02\x02\v\x8D\x03\x02\x02\x02\r\x90\x03\x02\x02" +
		"\x02\x0F\x93\x03\x02\x02\x02\x11\x96\x03\x02\x02\x02\x13\x99\x03\x02\x02" +
		"\x02\x15\x9C\x03\x02\x02\x02\x17\x9F\x03\x02\x02\x02\x19\xA2\x03\x02\x02" +
		"\x02\x1B\xA6\x03\x02\x02\x02\x1D\xAA\x03\x02\x02\x02\x1F\xAE\x03\x02\x02" +
		"\x02!\xB3\x03\x02\x02\x02#\xB8\x03\x02\x02\x02%\xBD\x03\x02\x02\x02\'" +
		"\xC2\x03\x02\x02\x02)\xC7\x03\x02\x02\x02+\xCD\x03\x02\x02\x02-\xD3\x03" +
		"\x02\x02\x02/\xD9\x03\x02\x02\x021\xE0\x03\x02\x02\x023\xE7\x03\x02\x02" +
		"\x025\xEE\x03\x02\x02\x027\xF5\x03\x02\x02\x029\xFC\x03\x02\x02\x02;\u0103" +
		"\x03\x02\x02\x02=\u010B\x03\x02\x02\x02?\u010D\x03\x02\x02\x02A\u010F" +
		"\x03\x02\x02\x02C\u0111\x03\x02\x02\x02E\u0113\x03\x02\x02\x02G\u0115" +
		"\x03\x02\x02\x02I\u0117\x03\x02\x02\x02K\u0119\x03\x02\x02\x02M\u011B" +
		"\x03\x02\x02\x02O\u011D\x03\x02\x02\x02Q\u011F\x03\x02\x02\x02S\u0121" +
		"\x03\x02\x02\x02U\u0123\x03\x02\x02\x02W\u0125\x03\x02\x02\x02Y\u0127" +
		"\x03\x02\x02\x02[\u0129\x03\x02\x02\x02]\u012B\x03\x02\x02\x02_\u012D" +
		"\x03\x02\x02\x02a\u012F\x03\x02\x02\x02c\u0131\x03\x02\x02\x02e\u0133" +
		"\x03\x02\x02\x02g\u0135\x03\x02\x02\x02i\u0147\x03\x02\x02\x02k\u0150" +
		"\x03\x02\x02\x02m\u015B\x03\x02\x02\x02o\u015D\x03\x02\x02\x02q\u0161" +
		"\x03\x02\x02\x02s\u016C\x03\x02\x02\x02u\u0177\x03\x02\x02\x02w\u018A" +
		"\x03\x02\x02\x02y\u018F\x03\x02\x02\x02{\u0195\x03\x02\x02\x02}\u01A1" +
		"\x03\x02\x02\x02\x7F\u01B1\x03\x02\x02\x02\x81\x82\x07]\x02\x02\x82\x83" +
		"\b\x02\x02\x02\x83\x04\x03\x02\x02\x02\x84\x85\x07_\x02\x02\x85\x86\b" +
		"\x03\x03\x02\x86\x06\x03\x02\x02\x02\x87\x88\x07*\x02\x02\x88\x89\b\x04" +
		"\x04\x02\x89\b\x03\x02\x02\x02\x8A\x8B\x07+\x02\x02\x8B\x8C\b\x05\x05" +
		"\x02\x8C\n\x03\x02\x02\x02\x8D\x8E\x07}\x02\x02\x8E\x8F\b\x06\x06\x02" +
		"\x8F\f\x03\x02\x02\x02\x90\x91\x07\x7F\x02\x02\x91\x92\b\x07\x07\x02\x92" +
		"\x0E\x03\x02\x02\x02\x93\x94\x07k\x02\x02\x94\x95\x07u\x02\x02\x95\x10" +
		"\x03\x02\x02\x02\x96\x97\x07c\x02\x02\x97\x98\x07u\x02\x02\x98\x12\x03" +
		"\x02\x02\x02\x99\x9A\x07k\x02\x02\x9A\x9B\x07h\x02\x02\x9B\x14\x03\x02" +
		"\x02\x02\x9C\x9D\x07k\x02\x02\x9D\x9E\x07p\x02\x02\x9E\x16\x03\x02\x02" +
		"\x02\x9F\xA0\x07q\x02\x02\xA0\xA1\x07t\x02\x02\xA1\x18\x03\x02\x02\x02" +
		"\xA2\xA3\x07h\x02\x02\xA3\xA4\x07q\x02\x02\xA4\xA5\x07t\x02\x02\xA5\x1A" +
		"\x03\x02\x02\x02\xA6\xA7\x07p\x02\x02\xA7\xA8\x07q\x02\x02\xA8\xA9\x07" +
		"v\x02\x02\xA9\x1C\x03\x02\x02\x02\xAA\xAB\x07c\x02\x02\xAB\xAC\x07p\x02" +
		"\x02\xAC\xAD\x07f\x02\x02\xAD\x1E\x03\x02\x02\x02\xAE\xAF\x07g\x02\x02" +
		"\xAF\xB0\x07n\x02\x02\xB0\xB1\x07u\x02\x02\xB1\xB2\x07g\x02\x02\xB2 \x03" +
		"\x02\x02\x02\xB3\xB4\x07k\x02\x02\xB4\xB5\x07p\x02\x02\xB5\xB6\x07k\x02" +
		"\x02\xB6\xB7\x07v\x02\x02\xB7\"\x03\x02\x02\x02\xB8\xB9\x07n\x02\x02\xB9" +
		"\xBA\x07q\x02\x02\xBA\xBB\x07q\x02\x02\xBB\xBC\x07r\x02\x02\xBC$\x03\x02" +
		"\x02\x02\xBD\xBE\x07v\x02\x02\xBE\xBF\x07g\x02\x02\xBF\xC0\x07u\x02\x02" +
		"\xC0\xC1\x07v\x02\x02\xC1&\x03\x02\x02\x02\xC2\xC3\x07v\x02\x02\xC3\xC4" +
		"\x07j\x02\x02\xC4\xC5\x07k\x02\x02\xC5\xC6\x07u\x02\x02\xC6(\x03\x02\x02" +
		"\x02\xC7\xC8\x07d\x02\x02\xC8\xC9\x07t\x02\x02\xC9\xCA\x07g\x02\x02\xCA" +
		"\xCB\x07c\x02\x02\xCB\xCC\x07m\x02\x02\xCC*\x03\x02\x02\x02\xCD\xCE\x07" +
		"k\x02\x02\xCE\xCF\x07p\x02\x02\xCF\xD0\x07h\x02\x02\xD0\xD1\x07k\x02\x02" +
		"\xD1\xD2\x07z\x02\x02\xD2,\x03\x02\x02\x02\xD3\xD4\x07y\x02\x02\xD4\xD5" +
		"\x07j\x02\x02\xD5\xD6\x07k\x02\x02\xD6\xD7\x07n\x02\x02\xD7\xD8\x07g\x02" +
		"\x02\xD8.\x03\x02\x02\x02\xD9\xDA\x07c\x02\x02\xDA\xDB\x07e\x02\x02\xDB" +
		"\xDC\x07v\x02\x02\xDC\xDD\x07w\x02\x02\xDD\xDE\x07c\x02\x02\xDE\xDF\x07" +
		"n\x02\x02\xDF0\x03\x02\x02\x02\xE0\xE1\x07g\x02\x02\xE1\xE2\x07z\x02\x02" +
		"\xE2\xE3\x07r\x02\x02\xE3\xE4\x07g\x02\x02\xE4\xE5\x07e\x02\x02\xE5\xE6" +
		"\x07v\x02\x02\xE62\x03\x02\x02\x02\xE7\xE8\x07g\x02\x02\xE8\xE9\x07z\x02" +
		"\x02\xE9\xEA\x07r\x02\x02\xEA\xEB\x07q\x02\x02\xEB\xEC\x07t\x02\x02\xEC" +
		"\xED\x07v\x02\x02\xED4\x03\x02\x02\x02\xEE\xEF\x07k\x02\x02\xEF\xF0\x07" +
		"o\x02\x02\xF0\xF1\x07r\x02\x02\xF1\xF2\x07q\x02\x02\xF2\xF3\x07t\x02\x02" +
		"\xF3\xF4\x07v\x02\x02\xF46\x03\x02\x02\x02\xF5\xF6\x07r\x02\x02\xF6\xF7" +
		"\x07t\x02\x02\xF7\xF8\x07g\x02\x02\xF8\xF9\x07h\x02\x02\xF9\xFA\x07k\x02" +
		"\x02\xFA\xFB\x07z\x02\x02\xFB8\x03\x02\x02\x02\xFC\xFD\x07t\x02\x02\xFD" +
		"\xFE\x07g\x02\x02\xFE\xFF\x07v\x02\x02\xFF\u0100\x07w\x02\x02\u0100\u0101" +
		"\x07t\x02\x02\u0101\u0102\x07p\x02\x02\u0102:\x03\x02\x02\x02\u0103\u0104" +
		"\x07r\x02\x02\u0104\u0105\x07q\x02\x02\u0105\u0106\x07u\x02\x02\u0106" +
		"\u0107\x07v\x02\x02\u0107\u0108\x07h\x02\x02\u0108\u0109\x07k\x02\x02" +
		"\u0109\u010A\x07z\x02\x02\u010A<\x03\x02\x02\x02\u010B\u010C\x07B\x02" +
		"\x02\u010C>\x03\x02\x02\x02\u010D\u010E\x070\x02\x02\u010E@\x03\x02\x02" +
		"\x02\u010F\u0110\x07-\x02\x02\u0110B\x03\x02\x02\x02\u0111\u0112\x07%" +
		"\x02\x02\u0112D\x03\x02\x02\x02\u0113\u0114\x07~\x02\x02\u0114F\x03\x02" +
		"\x02\x02\u0115\u0116\x07>\x02\x02\u0116H\x03\x02\x02\x02\u0117\u0118\x07" +
		".\x02\x02\u0118J\x03\x02\x02\x02\u0119\u011A\x07<\x02\x02\u011AL\x03\x02" +
		"\x02\x02\u011B\u011C\x07@\x02\x02\u011CN\x03\x02\x02\x02\u011D\u011E\x07" +
		"/\x02\x02\u011EP\x03\x02\x02\x02\u011F\u0120\x071\x02\x02\u0120R\x03\x02" +
		"\x02\x02\u0121\u0122\x07`\x02\x02\u0122T\x03\x02\x02\x02\u0123\u0124\x07" +
		"\x80\x02\x02\u0124V\x03\x02\x02\x02\u0125\u0126\x07?\x02\x02\u0126X\x03" +
		"\x02\x02\x02\u0127\u0128\x07\'\x02\x02\u0128Z\x03\x02\x02\x02\u0129\u012A" +
		"\x07A\x02\x02\u012A\\\x03\x02\x02\x02\u012B\u012C\x07,\x02\x02\u012C^" +
		"\x03\x02\x02\x02\u012D\u012E\x07(\x02\x02\u012E`\x03\x02\x02\x02\u012F" +
		"\u0130\x07a\x02\x02\u0130b\x03\x02\x02\x02\u0131\u0132\x07#\x02\x02\u0132" +
		"d\x03\x02\x02\x02\u0133\u0134\x07^\x02\x02\u0134f\x03\x02\x02\x02\u0135" +
		"\u0136\x07p\x02\x02\u0136\u0137\x07w\x02\x02\u0137\u0138\x07n\x02\x02" +
		"\u0138\u0139\x07n\x02\x02\u0139h\x03\x02\x02\x02\u013A\u013C\t\x02\x02" +
		"\x02\u013B\u013D\t\x02\x02\x02\u013C\u013B\x03\x02\x02\x02\u013C\u013D" +
		"\x03\x02\x02\x02\u013D\u013E\x03\x02\x02\x02\u013E\u013F\t\x03\x02\x02" +
		"\u013F\u0140\x05\x7F@\x02\u0140\u0141\x070\x02\x02\u0141\u0142\x05\x7F" +
		"@\x02\u0142\u0148\x03\x02\x02\x02\u0143\u0144\x05}?\x02\u0144\u0145\x07" +
		"0\x02\x02\u0145\u0146\x05}?\x02\u0146\u0148\x03\x02\x02\x02\u0147\u013A" +
		"\x03\x02\x02\x02\u0147\u0143\x03\x02\x02\x02\u0148j\x03\x02\x02\x02\u0149" +
		"\u014B\t\x02\x02\x02\u014A\u014C\t\x02\x02\x02\u014B\u014A\x03\x02\x02" +
		"\x02\u014B\u014C\x03\x02\x02\x02\u014C\u014D\x03\x02\x02\x02\u014D\u014E" +
		"\t\x03\x02\x02\u014E\u0151\x05\x7F@\x02\u014F\u0151\x05}?\x02\u0150\u0149" +
		"\x03\x02\x02\x02\u0150\u014F\x03\x02\x02\x02\u0151l\x03\x02\x02\x02\u0152" +
		"\u0153\x07v\x02\x02\u0153\u0154\x07t\x02\x02\u0154\u0155\x07w\x02\x02" +
		"\u0155\u015C\x07g\x02\x02\u0156\u0157\x07h\x02\x02\u0157\u0158\x07c\x02" +
		"\x02\u0158\u0159\x07n\x02\x02\u0159\u015A\x07u\x02\x02\u015A\u015C\x07" +
		"g\x02\x02\u015B\u0152\x03\x02\x02\x02\u015B\u0156\x03\x02\x02\x02\u015C" +
		"n\x03\x02\x02\x02\u015D\u015E\x07)\x02\x02\u015E\u015F\n\x04\x02\x02\u015F" +
		"\u0160\x07)\x02\x02\u0160p\x03\x02\x02\x02\u0161\u0167\x07$\x02\x02\u0162" +
		"\u0166\n\x05\x02\x02\u0163\u0164\x07^\x02\x02\u0164\u0166\t\x06\x02\x02" +
		"\u0165\u0162\x03\x02\x02\x02\u0165\u0163\x03\x02\x02\x02\u0166\u0169\x03" +
		"\x02\x02\x02\u0167\u0165\x03\x02\x02\x02\u0167\u0168\x03\x02\x02\x02\u0168" +
		"\u016A\x03\x02\x02\x02\u0169\u0167\x03\x02\x02\x02\u016A\u016B\x07$\x02" +
		"\x02\u016Br\x03\x02\x02\x02\u016C\u016D\x07%\x02\x02\u016D\u016E\x07}" +
		"\x02\x02\u016E\u0172\x03\x02\x02\x02\u016F\u0171\v\x02\x02\x02\u0170\u016F" +
		"\x03\x02\x02\x02\u0171\u0174\x03\x02\x02\x02\u0172\u0173\x03\x02\x02\x02" +
		"\u0172\u0170\x03\x02\x02\x02\u0173\u0175\x03\x02\x02\x02\u0174\u0172\x03" +
		"\x02\x02\x02\u0175\u0176\x07\x7F\x02\x02\u0176t\x03\x02\x02\x02\u0177" +
		"\u017B\t\x07\x02\x02\u0178\u017A\t\b\x02\x02\u0179\u0178\x03\x02\x02\x02" +
		"\u017A\u017D\x03\x02\x02\x02\u017B\u0179\x03\x02\x02\x02\u017B\u017C\x03" +
		"\x02\x02\x02\u017Cv\x03\x02\x02\x02\u017D\u017B\x03\x02\x02\x02\u017E" +
		"\u017F\x06<\x02\x02\u017F\u018B\x05y=\x02\u0180\u0182\x07\x0F\x02\x02" +
		"\u0181\u0180\x03\x02\x02\x02\u0181\u0182\x03\x02\x02\x02\u0182\u0183\x03" +
		"\x02\x02\x02\u0183\u0186\x07\f\x02\x02\u0184\u0186\x07\x0F\x02\x02\u0185" +
		"\u0181\x03\x02\x02\x02\u0185\u0184\x03\x02\x02\x02\u0186\u0188\x03\x02" +
		"\x02\x02\u0187\u0189\x05y=\x02\u0188\u0187\x03\x02\x02\x02\u0188\u0189" +
		"\x03\x02\x02\x02\u0189\u018B\x03\x02\x02\x02\u018A\u017E\x03\x02\x02\x02" +
		"\u018A\u0185\x03\x02\x02\x02\u018B\u018C\x03\x02\x02\x02\u018C\u018D\b" +
		"<\b\x02\u018Dx\x03\x02\x02\x02\u018E\u0190\t\t\x02\x02\u018F\u018E\x03" +
		"\x02\x02\x02\u0190\u0191\x03\x02\x02\x02\u0191\u018F\x03\x02\x02\x02\u0191" +
		"\u0192\x03\x02\x02\x02\u0192\u0193\x03\x02\x02\x02\u0193\u0194\b=\t\x02" +
		"\u0194z\x03\x02\x02\x02\u0195\u0196\x07/\x02\x02\u0196\u0197\x07/\x02" +
		"\x02\u0197\u019B\x03\x02\x02\x02\u0198\u019A\n\n\x02\x02\u0199\u0198\x03" +
		"\x02\x02\x02\u019A\u019D\x03\x02\x02\x02\u019B\u0199\x03\x02\x02\x02\u019B" +
		"\u019C\x03\x02\x02\x02\u019C\u019E\x03\x02\x02\x02\u019D\u019B\x03\x02" +
		"\x02\x02\u019E\u019F\b>\t\x02\u019F|\x03\x02\x02\x02\u01A0\u01A2\t\x02" +
		"\x02\x02\u01A1\u01A0\x03\x02\x02\x02\u01A2\u01A3\x03\x02\x02\x02\u01A3" +
		"\u01A1\x03\x02\x02\x02\u01A3\u01A4\x03\x02\x02\x02\u01A4\u01AD\x03\x02" +
		"\x02\x02\u01A5\u01A7\x07a\x02\x02\u01A6\u01A8\t\x02\x02\x02\u01A7\u01A6" +
		"\x03\x02\x02\x02\u01A8\u01A9\x03\x02\x02\x02\u01A9\u01A7\x03\x02\x02\x02" +
		"\u01A9\u01AA\x03\x02\x02\x02\u01AA\u01AC\x03\x02\x02\x02\u01AB\u01A5\x03" +
		"\x02\x02\x02\u01AC\u01AF\x03\x02\x02\x02\u01AD\u01AB\x03\x02\x02\x02\u01AD" +
		"\u01AE\x03\x02\x02\x02\u01AE~\x03\x02\x02\x02\u01AF\u01AD\x03\x02\x02" +
		"\x02\u01B0\u01B2\t\v\x02\x02\u01B1\u01B0\x03\x02\x02\x02\u01B2\u01B3\x03" +
		"\x02\x02\x02\u01B3\u01B1\x03\x02\x02\x02\u01B3\u01B4\x03\x02\x02\x02\u01B4" +
		"\u01BD\x03\x02\x02\x02\u01B5\u01B7\x07a\x02\x02\u01B6\u01B8\t\v\x02\x02" +
		"\u01B7\u01B6\x03\x02\x02\x02\u01B8\u01B9\x03\x02\x02\x02\u01B9\u01B7\x03" +
		"\x02\x02\x02\u01B9\u01BA\x03\x02\x02\x02\u01BA\u01BC\x03\x02\x02\x02\u01BB" +
		"\u01B5\x03\x02\x02\x02\u01BC\u01BF\x03\x02\x02\x02\u01BD\u01BB\x03\x02" +
		"\x02\x02\u01BD\u01BE\x03\x02\x02\x02\u01BE\x80\x03\x02\x02\x02\u01BF\u01BD" +
		"\x03\x02\x02\x02\x18\x02\u013C\u0147\u014B\u0150\u015B\u0165\u0167\u0172" +
		"\u017B\u0181\u0185\u0188\u018A\u0191\u019B\u01A3\u01A9\u01AD\u01B3\u01B9" +
		"\u01BD\n\x03\x02\x02\x03\x03\x03\x03\x04\x04\x03\x05\x05\x03\x06\x06\x03" +
		"\x07\x07\x03<\b\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

