// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
// @ts-nocheck
import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly Infix = 3;
	public static readonly Is = 4;
	public static readonly As = 5;
	public static readonly If = 6;
	public static readonly Else = 7;
	public static readonly ElseIf = 8;
	public static readonly Loop = 9;
	public static readonly In = 10;
	public static readonly Break = 11;
	public static readonly Return = 12;
	public static readonly Preprocessor = 13;
	public static readonly LineBreak = 14;
	public static readonly OpenBracket = 15;
	public static readonly CloseBracket = 16;
	public static readonly OpenParen = 17;
	public static readonly CloseParen = 18;
	public static readonly OpenBrace = 19;
	public static readonly CloseBrace = 20;
	public static readonly Comma = 21;
	public static readonly Assign = 22;
	public static readonly Question = 23;
	public static readonly Colon = 24;
	public static readonly Dot = 25;
	public static readonly Plus = 26;
	public static readonly Minus = 27;
	public static readonly Exclamation = 28;
	public static readonly Asterisk = 29;
	public static readonly Slash = 30;
	public static readonly Modulo = 31;
	public static readonly Caret = 32;
	public static readonly Hash = 33;
	public static readonly LessThan = 34;
	public static readonly MoreThan = 35;
	public static readonly LessThanEquals = 36;
	public static readonly MoreThanEquals = 37;
	public static readonly Equals = 38;
	public static readonly NotEquals = 39;
	public static readonly And = 40;
	public static readonly Or = 41;
	public static readonly AsteriskAssign = 42;
	public static readonly SlashAssign = 43;
	public static readonly PercentAssign = 44;
	public static readonly PlusAssign = 45;
	public static readonly MinusAssign = 46;
	public static readonly Pipe = 47;
	public static readonly LambdaStart = 48;
	public static readonly Elipsis = 49;
	public static readonly BooleanLiteral = 50;
	public static readonly NumberLiteral = 51;
	public static readonly StringLiteral = 52;
	public static readonly ID = 53;
	public static readonly Skip = 54;
	public static readonly UnexpectedCharacter = 55;
	public static readonly ERROR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"Infix", "Is", "As", "If", "Else", "ElseIf", "Loop", "In", "Break", "Return", 
		"Preprocessor", "LineBreak", "OpenBracket", "CloseBracket", "OpenParen", 
		"CloseParen", "OpenBrace", "CloseBrace", "Comma", "Assign", "Question", 
		"Colon", "Dot", "Plus", "Minus", "Exclamation", "Asterisk", "Slash", "Modulo", 
		"Caret", "Hash", "LessThan", "MoreThan", "LessThanEquals", "MoreThanEquals", 
		"Equals", "NotEquals", "And", "Or", "AsteriskAssign", "SlashAssign", "PercentAssign", 
		"PlusAssign", "MinusAssign", "Pipe", "LambdaStart", "Elipsis", "BooleanLiteral", 
		"NumberLiteral", "StringLiteral", "ID", "Skip", "UnexpectedCharacter", 
		"SPACES", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "LINE_JOINING", 
		"NUMBER", "CHARACTER",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'infix'", "'is'", "'as'", "'if'", "'else'", 
		"'elif'", "'loop'", "'in'", "'break'", "'return'", undefined, undefined, 
		"'['", "']'", "'('", "')'", "'{'", "'}'", "','", "'='", "'?'", "':'", 
		"'.'", "'+'", "'-'", "'!'", "'*'", "'/'", "'%'", "'^'", "'#'", "'<'", 
		"'>'", "'<='", "'>='", "'=='", "'!='", "'&&'", "'||'", "'*='", "'/='", 
		"'%='", "'+='", "'-='", "'|'", "'\\'", "'...'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "Infix", "Is", "As", "If", "Else", "ElseIf", 
		"Loop", "In", "Break", "Return", "Preprocessor", "LineBreak", "OpenBracket", 
		"CloseBracket", "OpenParen", "CloseParen", "OpenBrace", "CloseBrace", 
		"Comma", "Assign", "Question", "Colon", "Dot", "Plus", "Minus", "Exclamation", 
		"Asterisk", "Slash", "Modulo", "Caret", "Hash", "LessThan", "MoreThan", 
		"LessThanEquals", "MoreThanEquals", "Equals", "NotEquals", "And", "Or", 
		"AsteriskAssign", "SlashAssign", "PercentAssign", "PlusAssign", "MinusAssign", 
		"Pipe", "LambdaStart", "Elipsis", "BooleanLiteral", "NumberLiteral", "StringLiteral", 
		"ID", "Skip", "UnexpectedCharacter",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 11:
			this.LineBreak_action(_localctx, actionIndex);
			break;

		case 12:
			this.OpenBracket_action(_localctx, actionIndex);
			break;

		case 13:
			this.CloseBracket_action(_localctx, actionIndex);
			break;

		case 14:
			this.OpenParen_action(_localctx, actionIndex);
			break;

		case 15:
			this.CloseParen_action(_localctx, actionIndex);
			break;

		case 16:
			this.OpenBrace_action(_localctx, actionIndex);
			break;

		case 17:
			this.CloseBrace_action(_localctx, actionIndex);
			break;
		}
	}
	private LineBreak_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.handleLineBreak()
			break;
		}
	}
	private OpenBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened++;
			break;
		}
	}
	private CloseBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened--;
			break;
		}
	}
	private OpenParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened++;
			break;
		}
	}
	private CloseParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened--;
			break;
		}
	}
	private OpenBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened++;
			break;
		}
	}
	private CloseBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.opened--;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 11:
			return this.LineBreak_sempred(_localctx, predIndex);
		}
		return true;
	}
	private LineBreak_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x029\u019B\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03" +
		"\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03" +
		"\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x07\f\xAC" +
		"\n\f\f\f\x0E\f\xAF\v\f\x03\f\x03\f\x03\r\x03\r\x03\r\x05\r\xB6\n\r\x03" +
		"\r\x03\r\x05\r\xBA\n\r\x03\r\x05\r\xBD\n\r\x05\r\xBF\n\r\x03\r\x03\r\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03" +
		"\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03" +
		"\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03" +
		"\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03" +
		"\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"" +
		"\x03\"\x03#\x03#\x03#\x03$\x03$\x03$\x03%\x03%\x03%\x03&\x03&\x03&\x03" +
		"\'\x03\'\x03\'\x03(\x03(\x03(\x03)\x03)\x03)\x03*\x03*\x03*\x03+\x03+" +
		"\x03+\x03,\x03,\x03,\x03-\x03-\x03-\x03.\x03.\x03/\x03/\x030\x030\x03" +
		"0\x030\x031\x031\x031\x031\x031\x031\x031\x031\x031\x051\u0125\n1\x03" +
		"2\x032\x052\u0129\n2\x032\x032\x052\u012D\n2\x033\x033\x073\u0131\n3\f" +
		"3\x0E3\u0134\v3\x033\x033\x034\x034\x074\u013A\n4\f4\x0E4\u013D\v4\x03" +
		"5\x035\x035\x035\x055\u0143\n5\x035\x035\x036\x036\x036\x036\x037\x06" +
		"7\u014C\n7\r7\x0E7\u014D\x038\x038\x038\x038\x078\u0154\n8\f8\x0E8\u0157" +
		"\v8\x038\x038\x038\x039\x039\x039\x039\x079\u0160\n9\f9\x0E9\u0163\v9" +
		"\x03:\x03:\x05:\u0167\n:\x03:\x05:\u016A\n:\x03:\x03:\x05:\u016E\n:\x03" +
		";\x03;\x05;\u0172\n;\x03;\x03;\x06;\u0176\n;\r;\x0E;\u0177\x03;\x03;\x06" +
		";\u017C\n;\r;\x0E;\u017D\x07;\u0180\n;\f;\x0E;\u0183\v;\x03;\x06;\u0186" +
		"\n;\r;\x0E;\u0187\x03;\x03;\x06;\u018C\n;\r;\x0E;\u018D\x07;\u0190\n;" +
		"\f;\x0E;\u0193\v;\x05;\u0195\n;\x03<\x03<\x03<\x05<\u019A\n<\x04\xAD\u0155" +
		"\x02\x02=\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n" +
		"\x0F\x02\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B" +
		"\x02\x11\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x17" +
		")\x02\x18+\x02\x19-\x02\x1A/\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F" +
		"9\x02 ;\x02!=\x02\"?\x02#A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02*O" +
		"\x02+Q\x02,S\x02-U\x02.W\x02/Y\x020[\x021]\x022_\x023a\x024c\x025e\x02" +
		"6g\x027i\x028k\x029m\x02\x02o\x02\x02q\x02\x02s\x02\x02u\x02\x02w\x02" +
		"\x02\x03\x02\n\x05\x02C\\aac|\x06\x022;C\\aac|\x04\x02\v\v\"\"\x04\x02" +
		"\f\f\x0F\x0F\x03\x022;\x05\x022;C\\c|\x03\x02))\v\x02$$))^^ddhhppttvv" +
		"xx\x02\u01B0\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03" +
		"\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02" +
		"\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02" +
		"\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02" +
		"\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02" +
		"\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02" +
		"\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-" +
		"\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02" +
		"\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02" +
		"\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03" +
		"\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02" +
		"\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02" +
		"O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02" +
		"\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02" +
		"\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03" +
		"\x02\x02\x02\x02e\x03\x02\x02\x02\x02g\x03\x02\x02\x02\x02i\x03\x02\x02" +
		"\x02\x02k\x03\x02\x02\x02\x03y\x03\x02\x02\x02\x05\x7F\x03\x02\x02\x02" +
		"\x07\x82\x03\x02\x02\x02\t\x85\x03\x02\x02\x02\v\x88\x03\x02\x02\x02\r" +
		"\x8D\x03\x02\x02\x02\x0F\x92\x03\x02\x02\x02\x11\x97\x03\x02\x02\x02\x13" +
		"\x9A\x03\x02\x02\x02\x15\xA0\x03\x02\x02\x02\x17\xA7\x03\x02\x02\x02\x19" +
		"\xBE\x03\x02\x02\x02\x1B\xC2\x03\x02\x02\x02\x1D\xC5\x03\x02\x02\x02\x1F" +
		"\xC8\x03\x02\x02\x02!\xCB\x03\x02\x02\x02#\xCE\x03\x02\x02\x02%\xD1\x03" +
		"\x02\x02\x02\'\xD4\x03\x02\x02\x02)\xD6\x03\x02\x02\x02+\xD8\x03\x02\x02" +
		"\x02-\xDA\x03\x02\x02\x02/\xDC\x03\x02\x02\x021\xDE\x03\x02\x02\x023\xE0" +
		"\x03\x02\x02\x025\xE2\x03\x02\x02\x027\xE4\x03\x02\x02\x029\xE6\x03\x02" +
		"\x02\x02;\xE8\x03\x02\x02\x02=\xEA\x03\x02\x02\x02?\xEC\x03\x02\x02\x02" +
		"A\xEE\x03\x02\x02\x02C\xF0\x03\x02\x02\x02E\xF2\x03\x02\x02\x02G\xF5\x03" +
		"\x02\x02\x02I\xF8\x03\x02\x02\x02K\xFB\x03\x02\x02\x02M\xFE\x03\x02\x02" +
		"\x02O\u0101\x03\x02\x02\x02Q\u0104\x03\x02\x02\x02S\u0107\x03\x02\x02" +
		"\x02U\u010A\x03\x02\x02\x02W\u010D\x03\x02\x02\x02Y\u0110\x03\x02\x02" +
		"\x02[\u0113\x03\x02\x02\x02]\u0115\x03\x02\x02\x02_\u0117\x03\x02\x02" +
		"\x02a\u0124\x03\x02\x02\x02c\u012C\x03\x02\x02\x02e\u012E\x03\x02\x02" +
		"\x02g\u0137\x03\x02\x02\x02i\u0142\x03\x02\x02\x02k\u0146\x03\x02\x02" +
		"\x02m\u014B\x03\x02\x02\x02o\u014F\x03\x02\x02\x02q\u015B\x03\x02\x02" +
		"\x02s\u0164\x03\x02\x02\x02u\u0194\x03\x02\x02\x02w\u0199\x03\x02\x02" +
		"\x02yz\x07k\x02\x02z{\x07p\x02\x02{|\x07h\x02\x02|}\x07k\x02\x02}~\x07" +
		"z\x02\x02~\x04\x03\x02\x02\x02\x7F\x80\x07k\x02\x02\x80\x81\x07u\x02\x02" +
		"\x81\x06\x03\x02\x02\x02\x82\x83\x07c\x02\x02\x83\x84\x07u\x02\x02\x84" +
		"\b\x03\x02\x02\x02\x85\x86\x07k\x02\x02\x86\x87\x07h\x02\x02\x87\n\x03" +
		"\x02\x02\x02\x88\x89\x07g\x02\x02\x89\x8A\x07n\x02\x02\x8A\x8B\x07u\x02" +
		"\x02\x8B\x8C\x07g\x02\x02\x8C\f\x03\x02\x02\x02\x8D\x8E\x07g\x02\x02\x8E" +
		"\x8F\x07n\x02\x02\x8F\x90\x07k\x02\x02\x90\x91\x07h\x02\x02\x91\x0E\x03" +
		"\x02\x02\x02\x92\x93\x07n\x02\x02\x93\x94\x07q\x02\x02\x94\x95\x07q\x02" +
		"\x02\x95\x96\x07r\x02\x02\x96\x10\x03\x02\x02\x02\x97\x98\x07k\x02\x02" +
		"\x98\x99\x07p\x02\x02\x99\x12\x03\x02\x02\x02\x9A\x9B\x07d\x02\x02\x9B" +
		"\x9C\x07t\x02\x02\x9C\x9D\x07g\x02\x02\x9D\x9E\x07c\x02\x02\x9E\x9F\x07" +
		"m\x02\x02\x9F\x14\x03\x02\x02\x02\xA0\xA1\x07t\x02\x02\xA1\xA2\x07g\x02" +
		"\x02\xA2\xA3\x07v\x02\x02\xA3\xA4\x07w\x02\x02\xA4\xA5\x07t\x02\x02\xA5" +
		"\xA6\x07p\x02\x02\xA6\x16\x03\x02\x02\x02\xA7\xA8\x07%\x02\x02\xA8\xA9" +
		"\x07}\x02\x02\xA9\xAD\x03\x02\x02\x02\xAA\xAC\v\x02\x02\x02\xAB\xAA\x03" +
		"\x02\x02\x02\xAC\xAF\x03\x02\x02\x02\xAD\xAE\x03\x02\x02\x02\xAD\xAB\x03" +
		"\x02\x02\x02\xAE\xB0\x03\x02\x02\x02\xAF\xAD\x03\x02\x02\x02\xB0\xB1\x07" +
		"\x7F\x02\x02\xB1\x18\x03\x02\x02\x02\xB2\xB3\x06\r\x02\x02\xB3\xBF\x05" +
		"m7\x02\xB4\xB6\x07\x0F\x02\x02\xB5\xB4\x03\x02\x02\x02\xB5\xB6\x03\x02" +
		"\x02\x02\xB6\xB7\x03\x02\x02\x02\xB7\xBA\x07\f\x02\x02\xB8\xBA\x07\x0F" +
		"\x02\x02\xB9\xB5\x03\x02\x02\x02\xB9\xB8\x03\x02\x02\x02\xBA\xBC\x03\x02" +
		"\x02\x02\xBB\xBD\x05m7\x02\xBC\xBB\x03\x02\x02\x02\xBC\xBD\x03\x02\x02" +
		"\x02\xBD\xBF\x03\x02\x02\x02\xBE\xB2\x03\x02\x02\x02\xBE\xB9\x03\x02\x02" +
		"\x02\xBF\xC0\x03\x02\x02\x02\xC0\xC1\b\r\x02\x02\xC1\x1A\x03\x02\x02\x02" +
		"\xC2\xC3\x07]\x02\x02\xC3\xC4\b\x0E\x03\x02\xC4\x1C\x03\x02\x02\x02\xC5" +
		"\xC6\x07_\x02\x02\xC6\xC7\b\x0F\x04\x02\xC7\x1E\x03\x02\x02\x02\xC8\xC9" +
		"\x07*\x02\x02\xC9\xCA\b\x10\x05\x02\xCA \x03\x02\x02\x02\xCB\xCC\x07+" +
		"\x02\x02\xCC\xCD\b\x11\x06\x02\xCD\"\x03\x02\x02\x02\xCE\xCF\x07}\x02" +
		"\x02\xCF\xD0\b\x12\x07\x02\xD0$\x03\x02\x02\x02\xD1\xD2\x07\x7F\x02\x02" +
		"\xD2\xD3\b\x13\b\x02\xD3&\x03\x02\x02\x02\xD4\xD5\x07.\x02\x02\xD5(\x03" +
		"\x02\x02\x02\xD6\xD7\x07?\x02\x02\xD7*\x03\x02\x02\x02\xD8\xD9\x07A\x02" +
		"\x02\xD9,\x03\x02\x02\x02\xDA\xDB\x07<\x02\x02\xDB.\x03\x02\x02\x02\xDC" +
		"\xDD\x070\x02\x02\xDD0\x03\x02\x02\x02\xDE\xDF\x07-\x02\x02\xDF2\x03\x02" +
		"\x02\x02\xE0\xE1\x07/\x02\x02\xE14\x03\x02\x02\x02\xE2\xE3\x07#\x02\x02" +
		"\xE36\x03\x02\x02\x02\xE4\xE5\x07,\x02\x02\xE58\x03\x02\x02\x02\xE6\xE7" +
		"\x071\x02\x02\xE7:\x03\x02\x02\x02\xE8\xE9\x07\'\x02\x02\xE9<\x03\x02" +
		"\x02\x02\xEA\xEB\x07`\x02\x02\xEB>\x03\x02\x02\x02\xEC\xED\x07%\x02\x02" +
		"\xED@\x03\x02\x02\x02\xEE\xEF\x07>\x02\x02\xEFB\x03\x02\x02\x02\xF0\xF1" +
		"\x07@\x02\x02\xF1D\x03\x02\x02\x02\xF2\xF3\x07>\x02\x02\xF3\xF4\x07?\x02" +
		"\x02\xF4F\x03\x02\x02\x02\xF5\xF6\x07@\x02\x02\xF6\xF7\x07?\x02\x02\xF7" +
		"H\x03\x02\x02\x02\xF8\xF9\x07?\x02\x02\xF9\xFA\x07?\x02\x02\xFAJ\x03\x02" +
		"\x02\x02\xFB\xFC\x07#\x02\x02\xFC\xFD\x07?\x02\x02\xFDL\x03\x02\x02\x02" +
		"\xFE\xFF\x07(\x02\x02\xFF\u0100\x07(\x02\x02\u0100N\x03\x02\x02\x02\u0101" +
		"\u0102\x07~\x02\x02\u0102\u0103\x07~\x02\x02\u0103P\x03\x02\x02\x02\u0104" +
		"\u0105\x07,\x02\x02\u0105\u0106\x07?\x02\x02\u0106R\x03\x02\x02\x02\u0107" +
		"\u0108\x071\x02\x02\u0108\u0109\x07?\x02\x02\u0109T\x03\x02\x02\x02\u010A" +
		"\u010B\x07\'\x02\x02\u010B\u010C\x07?\x02\x02\u010CV\x03\x02\x02\x02\u010D" +
		"\u010E\x07-\x02\x02\u010E\u010F\x07?\x02\x02\u010FX\x03\x02\x02\x02\u0110" +
		"\u0111\x07/\x02\x02\u0111\u0112\x07?\x02\x02\u0112Z\x03\x02\x02\x02\u0113" +
		"\u0114\x07~\x02\x02\u0114\\\x03\x02\x02\x02\u0115\u0116\x07^\x02\x02\u0116" +
		"^\x03\x02\x02\x02\u0117\u0118\x070\x02\x02\u0118\u0119\x070\x02\x02\u0119" +
		"\u011A\x070\x02\x02\u011A`\x03\x02\x02\x02\u011B\u011C\x07v\x02\x02\u011C" +
		"\u011D\x07t\x02\x02\u011D\u011E\x07w\x02\x02\u011E\u0125\x07g\x02\x02" +
		"\u011F\u0120\x07h\x02\x02\u0120\u0121\x07c\x02\x02\u0121\u0122\x07n\x02" +
		"\x02\u0122\u0123\x07u\x02\x02\u0123\u0125\x07g\x02\x02\u0124\u011B\x03" +
		"\x02\x02\x02\u0124\u011F\x03\x02\x02\x02\u0125b\x03\x02\x02\x02\u0126" +
		"\u012D\x05u;\x02\u0127\u0129\x05u;\x02\u0128\u0127\x03\x02\x02\x02\u0128" +
		"\u0129\x03\x02\x02\x02\u0129\u012A\x03\x02\x02\x02\u012A\u012B\x070\x02" +
		"\x02\u012B\u012D\x05u;\x02\u012C\u0126\x03\x02\x02\x02\u012C\u0128\x03" +
		"\x02\x02\x02\u012Dd\x03\x02\x02\x02\u012E\u0132\x07)\x02\x02\u012F\u0131" +
		"\x05w<\x02\u0130\u012F\x03\x02\x02\x02\u0131\u0134\x03\x02\x02\x02\u0132" +
		"\u0130\x03\x02\x02\x02\u0132\u0133\x03\x02\x02\x02\u0133\u0135\x03\x02" +
		"\x02\x02\u0134\u0132\x03\x02\x02\x02\u0135\u0136\x07)\x02\x02\u0136f\x03" +
		"\x02\x02\x02\u0137\u013B\t\x02\x02\x02\u0138\u013A\t\x03\x02\x02\u0139" +
		"\u0138\x03\x02\x02\x02\u013A\u013D\x03\x02\x02\x02\u013B\u0139\x03\x02" +
		"\x02\x02\u013B\u013C\x03\x02\x02\x02\u013Ch\x03\x02\x02\x02\u013D\u013B" +
		"\x03\x02\x02\x02\u013E\u0143\x05m7\x02\u013F\u0143\x05q9\x02\u0140\u0143" +
		"\x05o8\x02\u0141\u0143\x05s:\x02\u0142\u013E\x03\x02\x02\x02\u0142\u013F" +
		"\x03\x02\x02\x02\u0142\u0140\x03\x02\x02\x02\u0142\u0141\x03\x02\x02\x02" +
		"\u0143\u0144\x03\x02\x02\x02\u0144\u0145\b5\t\x02\u0145j\x03\x02\x02\x02" +
		"\u0146\u0147\v\x02\x02\x02\u0147\u0148\x03\x02\x02\x02\u0148\u0149\b6" +
		"\n\x02\u0149l\x03\x02\x02\x02\u014A\u014C\t\x04\x02\x02\u014B\u014A\x03" +
		"\x02\x02\x02\u014C\u014D\x03\x02\x02\x02\u014D\u014B\x03\x02\x02\x02\u014D" +
		"\u014E\x03\x02\x02\x02\u014En\x03\x02\x02\x02\u014F\u0150\x071\x02\x02" +
		"\u0150\u0151\x07,\x02\x02\u0151\u0155\x03\x02\x02\x02\u0152\u0154\v\x02" +
		"\x02\x02\u0153\u0152\x03\x02\x02\x02\u0154\u0157\x03\x02\x02\x02\u0155" +
		"\u0156\x03\x02\x02\x02\u0155\u0153\x03\x02\x02\x02\u0156\u0158\x03\x02" +
		"\x02\x02\u0157\u0155\x03\x02\x02\x02\u0158\u0159\x07,\x02\x02\u0159\u015A" +
		"\x071\x02\x02\u015Ap\x03\x02\x02\x02\u015B\u015C\x071\x02\x02\u015C\u015D" +
		"\x071\x02\x02\u015D\u0161\x03\x02\x02\x02\u015E\u0160\n\x05\x02\x02\u015F" +
		"\u015E\x03\x02\x02\x02\u0160\u0163\x03\x02\x02\x02\u0161\u015F\x03\x02" +
		"\x02\x02\u0161\u0162\x03\x02\x02\x02\u0162r\x03\x02\x02\x02\u0163\u0161" +
		"\x03\x02\x02\x02\u0164\u0166\x07^\x02\x02\u0165\u0167\x05m7\x02\u0166" +
		"\u0165\x03\x02\x02\x02\u0166\u0167\x03\x02\x02\x02\u0167\u016D\x03\x02" +
		"\x02\x02\u0168\u016A\x07\x0F\x02\x02\u0169\u0168\x03\x02\x02\x02\u0169" +
		"\u016A\x03\x02\x02\x02\u016A\u016B\x03\x02\x02\x02\u016B\u016E\x07\f\x02" +
		"\x02\u016C\u016E\x07\x0F\x02\x02\u016D\u0169\x03\x02\x02\x02\u016D\u016C" +
		"\x03\x02\x02\x02\u016Et\x03\x02\x02\x02\u016F\u0171\t\x06\x02\x02\u0170" +
		"\u0172\t\x06\x02\x02\u0171\u0170\x03\x02\x02\x02\u0171\u0172\x03\x02\x02" +
		"\x02\u0172\u0173\x03\x02\x02\x02\u0173\u0175\x07z\x02\x02\u0174\u0176" +
		"\t\x07\x02\x02\u0175\u0174\x03\x02\x02\x02\u0176\u0177\x03\x02\x02\x02" +
		"\u0177\u0175\x03\x02\x02\x02\u0177\u0178\x03\x02\x02\x02\u0178\u0181\x03" +
		"\x02\x02\x02\u0179\u017B\x07a\x02\x02\u017A\u017C\t\x07\x02\x02\u017B" +
		"\u017A\x03\x02\x02\x02\u017C\u017D\x03\x02\x02\x02\u017D\u017B\x03\x02" +
		"\x02\x02\u017D\u017E\x03\x02\x02\x02\u017E\u0180\x03\x02\x02\x02\u017F" +
		"\u0179\x03\x02\x02\x02\u0180\u0183\x03\x02\x02\x02\u0181\u017F\x03\x02" +
		"\x02\x02\u0181\u0182\x03\x02\x02\x02\u0182\u0195\x03\x02\x02\x02\u0183" +
		"\u0181\x03\x02\x02\x02\u0184\u0186\t\x06\x02\x02\u0185\u0184\x03\x02\x02" +
		"\x02\u0186\u0187\x03\x02\x02\x02\u0187\u0185\x03\x02\x02\x02\u0187\u0188" +
		"\x03\x02\x02\x02\u0188\u0191\x03\x02\x02\x02\u0189\u018B\x07a\x02\x02" +
		"\u018A\u018C\t\x06\x02\x02\u018B\u018A\x03\x02\x02\x02\u018C\u018D\x03" +
		"\x02\x02\x02\u018D\u018B\x03\x02\x02\x02\u018D\u018E\x03\x02\x02\x02\u018E" +
		"\u0190\x03\x02\x02\x02\u018F\u0189\x03\x02\x02\x02\u0190\u0193\x03\x02" +
		"\x02\x02\u0191\u018F\x03\x02\x02\x02\u0191\u0192\x03\x02\x02\x02\u0192" +
		"\u0195\x03\x02\x02\x02\u0193\u0191\x03\x02\x02\x02\u0194\u016F\x03\x02" +
		"\x02\x02\u0194\u0185\x03\x02\x02\x02\u0195v\x03\x02\x02\x02\u0196\u019A" +
		"\n\b\x02\x02\u0197\u0198\x07^\x02\x02\u0198\u019A\t\t\x02\x02\u0199\u0196" +
		"\x03\x02\x02\x02\u0199\u0197\x03\x02\x02\x02\u019Ax\x03\x02\x02\x02\x1D" +
		"\x02\xAD\xB5\xB9\xBC\xBE\u0124\u0128\u012C\u0132\u013B\u0142\u014D\u0155" +
		"\u0161\u0166\u0169\u016D\u0171\u0177\u017D\u0181\u0187\u018D\u0191\u0194" +
		"\u0199\v\x03\r\x02\x03\x0E\x03\x03\x0F\x04\x03\x10\x05\x03\x11\x06\x03" +
		"\x12\x07\x03\x13\b\b\x02\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

