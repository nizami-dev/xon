// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly IS = 3;
	public static readonly AS = 4;
	public static readonly IF = 5;
	public static readonly IN = 6;
	public static readonly OR = 7;
	public static readonly NOT = 8;
	public static readonly AND = 9;
	public static readonly ELSE = 10;
	public static readonly LOOP = 11;
	public static readonly INIT = 12;
	public static readonly VOID = 13;
	public static readonly BREAK = 14;
	public static readonly RETURN = 15;
	public static readonly OPEN_BRACKET = 16;
	public static readonly CLOSE_BRACKET = 17;
	public static readonly OPEN_PAREN = 18;
	public static readonly CLOSE_PAREN = 19;
	public static readonly OPEN_BRACE = 20;
	public static readonly CLOSE_BRACE = 21;
	public static readonly AD = 22;
	public static readonly PLUS = 23;
	public static readonly HASH = 24;
	public static readonly PIPE = 25;
	public static readonly COMMA = 26;
	public static readonly COLON = 27;
	public static readonly MINUS = 28;
	public static readonly SLASH = 29;
	public static readonly CARET = 30;
	public static readonly TILDE = 31;
	public static readonly SPREAD = 32;
	public static readonly RANGE = 33;
	public static readonly DOT = 34;
	public static readonly LESS_THAN_EQUAL = 35;
	public static readonly MORE_THAN_EQUAL = 36;
	public static readonly LESS_THAN = 37;
	public static readonly MORE_THAN = 38;
	public static readonly ASSIGN = 39;
	public static readonly EQUAL = 40;
	public static readonly NOT_EQUAL = 41;
	public static readonly BIT_AND = 42;
	public static readonly BIT_OR = 43;
	public static readonly BIT_XOR = 44;
	public static readonly LAMBDA = 45;
	public static readonly MODULO = 46;
	public static readonly QUESTION = 47;
	public static readonly ASTERISK = 48;
	public static readonly UNDERSCORE = 49;
	public static readonly EXCLAMATION = 50;
	public static readonly FLOAT_LITERAL = 51;
	public static readonly INTEGER_LITERAL = 52;
	public static readonly BOOLEAN_LITERAL = 53;
	public static readonly CHAR_LITERAL = 54;
	public static readonly STRING_LITERAL = 55;
	public static readonly PREPROCESSOR = 56;
	public static readonly ID = 57;
	public static readonly NL = 58;
	public static readonly WS = 59;
	public static readonly COMMENT = 60;
	public static readonly ERROR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"IS", "AS", "IF", "IN", "OR", "NOT", "AND", "ELSE", "LOOP", "INIT", "VOID", 
		"BREAK", "RETURN", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", 
		"OPEN_BRACE", "CLOSE_BRACE", "AD", "PLUS", "HASH", "PIPE", "COMMA", "COLON", 
		"MINUS", "SLASH", "CARET", "TILDE", "SPREAD", "RANGE", "DOT", "LESS_THAN_EQUAL", 
		"MORE_THAN_EQUAL", "LESS_THAN", "MORE_THAN", "ASSIGN", "EQUAL", "NOT_EQUAL", 
		"BIT_AND", "BIT_OR", "BIT_XOR", "LAMBDA", "MODULO", "QUESTION", "ASTERISK", 
		"UNDERSCORE", "EXCLAMATION", "FLOAT_LITERAL", "INTEGER_LITERAL", "BOOLEAN_LITERAL", 
		"CHAR_LITERAL", "STRING_LITERAL", "PREPROCESSOR", "ID", "NL", "WS", "COMMENT", 
		"DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'is'", "'as'", "'if'", "'in'", "'or'", 
		"'not'", "'and'", "'else'", "'loop'", "'init'", "'void'", "'break'", "'return'", 
		"'['", "']'", "'('", "')'", "'{'", "'}'", "'@'", "'+'", "'#'", "'|'", 
		"','", "':'", "'-'", "'/'", "'^'", "'~'", "'...'", "'..'", "'.'", "'<='", 
		"'>='", "'<'", "'>'", "'='", "'=='", "'!='", "'&&'", "'||'", "'^^'", "'\\'", 
		"'%'", "'?'", "'*'", "'_'", "'!'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "IS", "AS", "IF", "IN", "OR", "NOT", "AND", 
		"ELSE", "LOOP", "INIT", "VOID", "BREAK", "RETURN", "OPEN_BRACKET", "CLOSE_BRACKET", 
		"OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "AD", "PLUS", 
		"HASH", "PIPE", "COMMA", "COLON", "MINUS", "SLASH", "CARET", "TILDE", 
		"SPREAD", "RANGE", "DOT", "LESS_THAN_EQUAL", "MORE_THAN_EQUAL", "LESS_THAN", 
		"MORE_THAN", "ASSIGN", "EQUAL", "NOT_EQUAL", "BIT_AND", "BIT_OR", "BIT_XOR", 
		"LAMBDA", "MODULO", "QUESTION", "ASTERISK", "UNDERSCORE", "EXCLAMATION", 
		"FLOAT_LITERAL", "INTEGER_LITERAL", "BOOLEAN_LITERAL", "CHAR_LITERAL", 
		"STRING_LITERAL", "PREPROCESSOR", "ID", "NL", "WS", "COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 13:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 14:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 15:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 16:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 17:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 18:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 55:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 55:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02>\u018D\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03" +
		"\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03" +
		"\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03" +
		"\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03" +
		"\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03" +
		"\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03" +
		"\x1F\x03\x1F\x03 \x03 \x03 \x03!\x03!\x03\"\x03\"\x03\"\x03#\x03#\x03" +
		"#\x03$\x03$\x03%\x03%\x03&\x03&\x03\'\x03\'\x03\'\x03(\x03(\x03(\x03)" +
		"\x03)\x03)\x03*\x03*\x03*\x03+\x03+\x03+\x03,\x03,\x03-\x03-\x03.\x03" +
		".\x03/\x03/\x030\x030\x031\x031\x032\x032\x052\u010C\n2\x032\x032\x03" +
		"2\x032\x032\x032\x032\x032\x032\x052\u0117\n2\x033\x033\x053\u011B\n3" +
		"\x033\x033\x033\x053\u0120\n3\x034\x034\x034\x034\x034\x034\x034\x034" +
		"\x034\x054\u012B\n4\x035\x035\x035\x035\x036\x036\x036\x036\x076\u0135" +
		"\n6\f6\x0E6\u0138\v6\x036\x036\x037\x037\x037\x037\x077\u0140\n7\f7\x0E" +
		"7\u0143\v7\x037\x037\x038\x068\u0148\n8\r8\x0E8\u0149\x039\x039\x039\x05" +
		"9\u014F\n9\x039\x039\x059\u0153\n9\x039\x059\u0156\n9\x059\u0158\n9\x03" +
		"9\x039\x03:\x06:\u015D\n:\r:\x0E:\u015E\x03:\x03:\x03;\x03;\x03;\x03;" +
		"\x07;\u0167\n;\f;\x0E;\u016A\v;\x03;\x03;\x03<\x06<\u016F\n<\r<\x0E<\u0170" +
		"\x03<\x03<\x06<\u0175\n<\r<\x0E<\u0176\x07<\u0179\n<\f<\x0E<\u017C\v<" +
		"\x03=\x06=\u017F\n=\r=\x0E=\u0180\x03=\x03=\x06=\u0185\n=\r=\x0E=\u0186" +
		"\x07=\u0189\n=\f=\x0E=\u018C\v=\x03\u0141\x02\x02>\x03\x02\x05\x05\x02" +
		"\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r" +
		"\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13" +
		"!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19-\x02\x1A/\x02" +
		"\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?\x02#A\x02" +
		"$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+Q\x02,S\x02-U\x02.W\x02/Y" +
		"\x020[\x021]\x022_\x023a\x024c\x025e\x026g\x027i\x028k\x029m\x02:o\x02" +
		";q\x02<s\x02=u\x02>w\x02\x02y\x02\x02\x03\x02\n\x03\x022;\x03\x02))\x03" +
		"\x02$$\n\x02$$^^ddhhppttvvxx\x05\x02C\\aac|\x04\x02\v\v\"\"\x04\x02\f" +
		"\f\x0F\x0F\x05\x022;C\\c|\x02\u019F\x02\x03\x03\x02\x02\x02\x02\x05\x03" +
		"\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02" +
		"\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02" +
		"\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02" +
		"\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02" +
		"\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02" +
		"\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02" +
		"+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02" +
		"\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02" +
		"\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03" +
		"\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02" +
		"\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02" +
		"M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02" +
		"\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02" +
		"\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03" +
		"\x02\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02\x02\x02g\x03\x02\x02" +
		"\x02\x02i\x03\x02\x02\x02\x02k\x03\x02\x02\x02\x02m\x03\x02\x02\x02\x02" +
		"o\x03\x02\x02\x02\x02q\x03\x02\x02\x02\x02s\x03\x02\x02\x02\x02u\x03\x02" +
		"\x02\x02\x03{\x03\x02\x02\x02\x05~\x03\x02\x02\x02\x07\x81\x03\x02\x02" +
		"\x02\t\x84\x03\x02\x02\x02\v\x87\x03\x02\x02\x02\r\x8A\x03\x02\x02\x02" +
		"\x0F\x8E\x03\x02\x02\x02\x11\x92\x03\x02\x02\x02\x13\x97\x03\x02\x02\x02" +
		"\x15\x9C\x03\x02\x02\x02\x17\xA1\x03\x02\x02\x02\x19\xA6\x03\x02\x02\x02" +
		"\x1B\xAC\x03\x02\x02\x02\x1D\xB3\x03\x02\x02\x02\x1F\xB6\x03\x02\x02\x02" +
		"!\xB9\x03\x02\x02\x02#\xBC\x03\x02\x02\x02%\xBF\x03\x02\x02\x02\'\xC2" +
		"\x03\x02\x02\x02)\xC5\x03\x02\x02\x02+\xC7\x03\x02\x02\x02-\xC9\x03\x02" +
		"\x02\x02/\xCB\x03\x02\x02\x021\xCD\x03\x02\x02\x023\xCF\x03\x02\x02\x02" +
		"5\xD1\x03\x02\x02\x027\xD3\x03\x02\x02\x029\xD5\x03\x02\x02\x02;\xD7\x03" +
		"\x02\x02\x02=\xD9\x03\x02\x02\x02?\xDD\x03\x02\x02\x02A\xE0\x03\x02\x02" +
		"\x02C\xE2\x03\x02\x02\x02E\xE5\x03\x02\x02\x02G\xE8\x03\x02\x02\x02I\xEA" +
		"\x03\x02\x02\x02K\xEC\x03\x02\x02\x02M\xEE\x03\x02\x02\x02O\xF1\x03\x02" +
		"\x02\x02Q\xF4\x03\x02\x02\x02S\xF7\x03\x02\x02\x02U\xFA\x03\x02\x02\x02" +
		"W\xFD\x03\x02\x02\x02Y\xFF\x03\x02\x02\x02[\u0101\x03\x02\x02\x02]\u0103" +
		"\x03\x02\x02\x02_\u0105\x03\x02\x02\x02a\u0107\x03\x02\x02\x02c\u0116" +
		"\x03\x02\x02\x02e\u011F\x03\x02\x02\x02g\u012A\x03\x02\x02\x02i\u012C" +
		"\x03\x02\x02\x02k\u0130\x03\x02\x02\x02m\u013B\x03\x02\x02\x02o\u0147" +
		"\x03\x02\x02\x02q\u0157\x03\x02\x02\x02s\u015C\x03\x02\x02\x02u\u0162" +
		"\x03\x02\x02\x02w\u016E\x03\x02\x02\x02y\u017E\x03\x02\x02\x02{|\x07k" +
		"\x02\x02|}\x07u\x02\x02}\x04\x03\x02\x02\x02~\x7F\x07c\x02\x02\x7F\x80" +
		"\x07u\x02\x02\x80\x06\x03\x02\x02\x02\x81\x82\x07k\x02\x02\x82\x83\x07" +
		"h\x02\x02\x83\b\x03\x02\x02\x02\x84\x85\x07k\x02\x02\x85\x86\x07p\x02" +
		"\x02\x86\n\x03\x02\x02\x02\x87\x88\x07q\x02\x02\x88\x89\x07t\x02\x02\x89" +
		"\f\x03\x02\x02\x02\x8A\x8B\x07p\x02\x02\x8B\x8C\x07q\x02\x02\x8C\x8D\x07" +
		"v\x02\x02\x8D\x0E\x03\x02\x02\x02\x8E\x8F\x07c\x02\x02\x8F\x90\x07p\x02" +
		"\x02\x90\x91\x07f\x02\x02\x91\x10\x03\x02\x02\x02\x92\x93\x07g\x02\x02" +
		"\x93\x94\x07n\x02\x02\x94\x95\x07u\x02\x02\x95\x96\x07g\x02\x02\x96\x12" +
		"\x03\x02\x02\x02\x97\x98\x07n\x02\x02\x98\x99\x07q\x02\x02\x99\x9A\x07" +
		"q\x02\x02\x9A\x9B\x07r\x02\x02\x9B\x14\x03\x02\x02\x02\x9C\x9D\x07k\x02" +
		"\x02\x9D\x9E\x07p\x02\x02\x9E\x9F\x07k\x02\x02\x9F\xA0\x07v\x02\x02\xA0" +
		"\x16\x03\x02\x02\x02\xA1\xA2\x07x\x02\x02\xA2\xA3\x07q\x02\x02\xA3\xA4" +
		"\x07k\x02\x02\xA4\xA5\x07f\x02\x02\xA5\x18\x03\x02\x02\x02\xA6\xA7\x07" +
		"d\x02\x02\xA7\xA8\x07t\x02\x02\xA8\xA9\x07g\x02\x02\xA9\xAA\x07c\x02\x02" +
		"\xAA\xAB\x07m\x02\x02\xAB\x1A\x03\x02\x02\x02\xAC\xAD\x07t\x02\x02\xAD" +
		"\xAE\x07g\x02\x02\xAE\xAF\x07v\x02\x02\xAF\xB0\x07w\x02\x02\xB0\xB1\x07" +
		"t\x02\x02\xB1\xB2\x07p\x02\x02\xB2\x1C\x03\x02\x02\x02\xB3\xB4\x07]\x02" +
		"\x02\xB4\xB5\b\x0F\x02\x02\xB5\x1E\x03\x02\x02\x02\xB6\xB7\x07_\x02\x02" +
		"\xB7\xB8\b\x10\x03\x02\xB8 \x03\x02\x02\x02\xB9\xBA\x07*\x02\x02\xBA\xBB" +
		"\b\x11\x04\x02\xBB\"\x03\x02\x02\x02\xBC\xBD\x07+\x02\x02\xBD\xBE\b\x12" +
		"\x05\x02\xBE$\x03\x02\x02\x02\xBF\xC0\x07}\x02\x02\xC0\xC1\b\x13\x06\x02" +
		"\xC1&\x03\x02\x02\x02\xC2\xC3\x07\x7F\x02\x02\xC3\xC4\b\x14\x07\x02\xC4" +
		"(\x03\x02\x02\x02\xC5\xC6\x07B\x02\x02\xC6*\x03\x02\x02\x02\xC7\xC8\x07" +
		"-\x02\x02\xC8,\x03\x02\x02\x02\xC9\xCA\x07%\x02\x02\xCA.\x03\x02\x02\x02" +
		"\xCB\xCC\x07~\x02\x02\xCC0\x03\x02\x02\x02\xCD\xCE\x07.\x02\x02\xCE2\x03" +
		"\x02\x02\x02\xCF\xD0\x07<\x02\x02\xD04\x03\x02\x02\x02\xD1\xD2\x07/\x02" +
		"\x02\xD26\x03\x02\x02\x02\xD3\xD4\x071\x02\x02\xD48\x03\x02\x02\x02\xD5" +
		"\xD6\x07`\x02\x02\xD6:\x03\x02\x02\x02\xD7\xD8\x07\x80\x02\x02\xD8<\x03" +
		"\x02\x02\x02\xD9\xDA\x070\x02\x02\xDA\xDB\x070\x02\x02\xDB\xDC\x070\x02" +
		"\x02\xDC>\x03\x02\x02\x02\xDD\xDE\x070\x02\x02\xDE\xDF\x070\x02\x02\xDF" +
		"@\x03\x02\x02\x02\xE0\xE1\x070\x02\x02\xE1B\x03\x02\x02\x02\xE2\xE3\x07" +
		">\x02\x02\xE3\xE4\x07?\x02\x02\xE4D\x03\x02\x02\x02\xE5\xE6\x07@\x02\x02" +
		"\xE6\xE7\x07?\x02\x02\xE7F\x03\x02\x02\x02\xE8\xE9\x07>\x02\x02\xE9H\x03" +
		"\x02\x02\x02\xEA\xEB\x07@\x02\x02\xEBJ\x03\x02\x02\x02\xEC\xED\x07?\x02" +
		"\x02\xEDL\x03\x02\x02\x02\xEE\xEF\x07?\x02\x02\xEF\xF0\x07?\x02\x02\xF0" +
		"N\x03\x02\x02\x02\xF1\xF2\x07#\x02\x02\xF2\xF3\x07?\x02\x02\xF3P\x03\x02" +
		"\x02\x02\xF4\xF5\x07(\x02\x02\xF5\xF6\x07(\x02\x02\xF6R\x03\x02\x02\x02" +
		"\xF7\xF8\x07~\x02\x02\xF8\xF9\x07~\x02\x02\xF9T\x03\x02\x02\x02\xFA\xFB" +
		"\x07`\x02\x02\xFB\xFC\x07`\x02\x02\xFCV\x03\x02\x02\x02\xFD\xFE\x07^\x02" +
		"\x02\xFEX\x03\x02\x02\x02\xFF\u0100\x07\'\x02\x02\u0100Z\x03\x02\x02\x02" +
		"\u0101\u0102\x07A\x02\x02\u0102\\\x03\x02\x02\x02\u0103\u0104\x07,\x02" +
		"\x02\u0104^\x03\x02\x02\x02\u0105\u0106\x07a\x02\x02\u0106`\x03\x02\x02" +
		"\x02\u0107\u0108\x07#\x02\x02\u0108b\x03\x02\x02\x02\u0109\u010B\t\x02" +
		"\x02\x02\u010A\u010C\t\x02\x02\x02\u010B\u010A\x03\x02\x02\x02\u010B\u010C" +
		"\x03\x02\x02\x02\u010C\u010D\x03\x02\x02\x02\u010D\u010E\x07z\x02\x02" +
		"\u010E\u010F\x05y=\x02\u010F\u0110\x070\x02\x02\u0110\u0111\x05y=\x02" +
		"\u0111\u0117\x03\x02\x02\x02\u0112\u0113\x05w<\x02\u0113\u0114\x070\x02" +
		"\x02\u0114\u0115\x05w<\x02\u0115\u0117\x03\x02\x02\x02\u0116\u0109\x03" +
		"\x02\x02\x02\u0116\u0112\x03\x02\x02\x02\u0117d\x03\x02\x02\x02\u0118" +
		"\u011A\t\x02\x02\x02\u0119\u011B\t\x02\x02\x02\u011A\u0119\x03\x02\x02" +
		"\x02\u011A\u011B\x03\x02\x02\x02\u011B\u011C\x03\x02\x02\x02\u011C\u011D" +
		"\x07z\x02\x02\u011D\u0120\x05y=\x02\u011E\u0120\x05w<\x02\u011F\u0118" +
		"\x03\x02\x02\x02\u011F\u011E\x03\x02\x02\x02\u0120f\x03\x02\x02\x02\u0121" +
		"\u0122\x07v\x02\x02\u0122\u0123\x07t\x02\x02\u0123\u0124\x07w\x02\x02" +
		"\u0124\u012B\x07g\x02\x02\u0125\u0126\x07h\x02\x02\u0126\u0127\x07c\x02" +
		"\x02\u0127\u0128\x07n\x02\x02\u0128\u0129\x07u\x02\x02\u0129\u012B\x07" +
		"g\x02\x02\u012A\u0121\x03\x02\x02\x02\u012A\u0125\x03\x02\x02\x02\u012B" +
		"h\x03\x02\x02\x02\u012C\u012D\x07)\x02\x02\u012D\u012E\n\x03\x02\x02\u012E" +
		"\u012F\x07)\x02\x02\u012Fj\x03\x02\x02\x02\u0130\u0136\x07$\x02\x02\u0131" +
		"\u0135\n\x04\x02\x02\u0132\u0133\x07^\x02\x02\u0133\u0135\t\x05\x02\x02" +
		"\u0134\u0131\x03\x02\x02\x02\u0134\u0132\x03\x02\x02\x02\u0135\u0138\x03" +
		"\x02\x02\x02\u0136\u0134\x03\x02\x02\x02\u0136\u0137\x03\x02\x02\x02\u0137" +
		"\u0139\x03\x02\x02\x02\u0138\u0136\x03\x02\x02\x02\u0139\u013A\x07$\x02" +
		"\x02\u013Al\x03\x02\x02\x02\u013B\u013C\x07%\x02\x02\u013C\u013D\x07}" +
		"\x02\x02\u013D\u0141\x03\x02\x02\x02\u013E\u0140\v\x02\x02\x02\u013F\u013E" +
		"\x03\x02\x02\x02\u0140\u0143\x03\x02\x02\x02\u0141\u0142\x03\x02\x02\x02" +
		"\u0141\u013F\x03\x02\x02\x02\u0142\u0144\x03\x02\x02\x02\u0143\u0141\x03" +
		"\x02\x02\x02\u0144\u0145\x07\x7F\x02\x02\u0145n\x03\x02\x02\x02\u0146" +
		"\u0148\t\x06\x02\x02\u0147\u0146\x03\x02\x02\x02\u0148\u0149\x03\x02\x02" +
		"\x02\u0149\u0147\x03\x02\x02\x02\u0149\u014A\x03\x02\x02\x02\u014Ap\x03" +
		"\x02\x02\x02\u014B\u014C\x069\x02\x02\u014C\u0158\x05s:\x02\u014D\u014F" +
		"\x07\x0F\x02\x02\u014E\u014D\x03\x02\x02\x02\u014E\u014F\x03\x02\x02\x02" +
		"\u014F\u0150\x03\x02\x02\x02\u0150\u0153\x07\f\x02\x02\u0151\u0153\x07" +
		"\x0F\x02\x02\u0152\u014E\x03\x02\x02\x02\u0152\u0151\x03\x02\x02\x02\u0153" +
		"\u0155\x03\x02\x02\x02\u0154\u0156\x05s:\x02\u0155\u0154\x03\x02\x02\x02" +
		"\u0155\u0156\x03\x02\x02\x02\u0156\u0158\x03\x02\x02\x02\u0157\u014B\x03" +
		"\x02\x02\x02\u0157\u0152\x03\x02\x02\x02\u0158\u0159\x03\x02\x02\x02\u0159" +
		"\u015A\b9\b\x02\u015Ar\x03\x02\x02\x02\u015B\u015D\t\x07\x02\x02\u015C" +
		"\u015B\x03\x02\x02\x02\u015D\u015E\x03\x02\x02\x02\u015E\u015C\x03\x02" +
		"\x02\x02\u015E\u015F\x03\x02\x02\x02\u015F\u0160\x03\x02\x02\x02\u0160" +
		"\u0161\b:\t\x02\u0161t\x03\x02\x02\x02\u0162\u0163\x07/\x02\x02\u0163" +
		"\u0164\x07/\x02\x02\u0164\u0168\x03\x02\x02\x02\u0165\u0167\n\b\x02\x02" +
		"\u0166\u0165\x03\x02\x02\x02\u0167\u016A\x03\x02\x02\x02\u0168\u0166\x03" +
		"\x02\x02\x02\u0168\u0169\x03\x02\x02\x02\u0169\u016B\x03\x02\x02\x02\u016A" +
		"\u0168\x03\x02\x02\x02\u016B\u016C\b;\t\x02\u016Cv\x03\x02\x02\x02\u016D" +
		"\u016F\t\x02\x02\x02\u016E\u016D\x03\x02\x02\x02\u016F\u0170\x03\x02\x02" +
		"\x02\u0170\u016E\x03\x02\x02\x02\u0170\u0171\x03\x02\x02\x02\u0171\u017A" +
		"\x03\x02\x02\x02\u0172\u0174\x07a\x02\x02\u0173\u0175\t\x02\x02\x02\u0174" +
		"\u0173\x03\x02\x02\x02\u0175\u0176\x03\x02\x02\x02\u0176\u0174\x03\x02" +
		"\x02\x02\u0176\u0177\x03\x02\x02\x02\u0177\u0179\x03\x02\x02\x02\u0178" +
		"\u0172\x03\x02\x02\x02\u0179\u017C\x03\x02\x02\x02\u017A\u0178\x03\x02" +
		"\x02\x02\u017A\u017B\x03\x02\x02\x02\u017Bx\x03\x02\x02\x02\u017C\u017A" +
		"\x03\x02\x02\x02\u017D\u017F\t\t\x02\x02\u017E\u017D\x03\x02\x02\x02\u017F" +
		"\u0180\x03\x02\x02\x02\u0180\u017E\x03\x02\x02\x02\u0180\u0181\x03\x02" +
		"\x02\x02\u0181\u018A\x03\x02\x02\x02\u0182\u0184\x07a\x02\x02\u0183\u0185" +
		"\t\t\x02\x02\u0184\u0183\x03\x02\x02\x02\u0185\u0186\x03\x02\x02\x02\u0186" +
		"\u0184\x03\x02\x02\x02\u0186\u0187\x03\x02\x02\x02\u0187\u0189\x03\x02" +
		"\x02\x02\u0188\u0182\x03\x02\x02\x02\u0189\u018C\x03\x02\x02\x02\u018A" +
		"\u0188\x03\x02\x02\x02\u018A\u018B\x03\x02\x02\x02\u018Bz\x03\x02\x02" +
		"\x02\u018C\u018A\x03\x02\x02\x02\x18\x02\u010B\u0116\u011A\u011F\u012A" +
		"\u0134\u0136\u0141\u0149\u014E\u0152\u0155\u0157\u015E\u0168\u0170\u0176" +
		"\u017A\u0180\u0186\u018A\n\x03\x0F\x02\x03\x10\x03\x03\x11\x04\x03\x12" +
		"\x05\x03\x13\x06\x03\x14\x07\x039\b\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

