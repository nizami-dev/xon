// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN = 3;
	public static readonly CLOSE = 4;
	public static readonly LAMBDA = 5;
	public static readonly FLOAT = 6;
	public static readonly INTEGER = 7;
	public static readonly STRING = 8;
	public static readonly OP = 9;
	public static readonly DOT = 10;
	public static readonly META = 11;
	public static readonly COMMA = 12;
	public static readonly ASSIGN = 13;
	public static readonly COLON = 14;
	public static readonly ID = 15;
	public static readonly NL = 16;
	public static readonly LINE_COMMENT = 17;
	public static readonly WS = 18;
	public static readonly BLOCK_COMMENT = 19;
	public static readonly LINE_JOINING = 20;
	public static readonly UNEXPECTED = 21;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN", "CLOSE", "LAMBDA", "FLOAT", "INTEGER", "STRING", "OP", "DOT", 
		"META", "COMMA", "ASSIGN", "COLON", "ID", "NL", "LINE_COMMENT", "WS", 
		"BLOCK_COMMENT", "LINE_JOINING", "UNEXPECTED", "Radix", "DigitNumber", 
		"AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "'.'", "'::'", "','", "'='",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN", "CLOSE", "LAMBDA", "FLOAT", "INTEGER", 
		"STRING", "OP", "DOT", "META", "COMMA", "ASSIGN", "COLON", "ID", "NL", 
		"LINE_COMMENT", "WS", "BLOCK_COMMENT", "LINE_JOINING", "UNEXPECTED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_action(_localctx, actionIndex);
			break;

		case 13:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 6:
			return this.OP_sempred(_localctx, predIndex);
		}
		return true;
	}
	private OP_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return  this.isOperator();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x17\xD0\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x05" +
		"\x048\n\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x05\x04?\n\x04\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x05" +
		"\x05J\n\x05\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06P\n\x06\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x07\x07V\n\x07\f\x07\x0E\x07Y\v\x07\x03\x07\x03\x07" +
		"\x03\b\x06\b^\n\b\r\b\x0E\b_\x03\b\x03\b\x03\t\x03\t\x03\n\x03\n\x03\n" +
		"\x03\v\x03\v\x03\f\x03\f\x03\r\x03\r\x05\ro\n\r\x03\r\x03\r\x03\r\x05" +
		"\rt\n\r\x03\x0E\x03\x0E\x07\x0Ex\n\x0E\f\x0E\x0E\x0E{\v\x0E\x03\x0F\x03" +
		"\x0F\x07\x0F\x7F\n\x0F\f\x0F\x0E\x0F\x82\v\x0F\x06\x0F\x84\n\x0F\r\x0F" +
		"\x0E\x0F\x85\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x10\x07\x10\x8E" +
		"\n\x10\f\x10\x0E\x10\x91\v\x10\x03\x11\x06\x11\x94\n\x11\r\x11\x0E\x11" +
		"\x95\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x07\x12\x9F" +
		"\n\x12\f\x12\x0E\x12\xA2\v\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12" +
		"\x03\x13\x03\x13\x07\x13\xAB\n\x13\f\x13\x0E\x13\xAE\v\x13\x03\x13\x05" +
		"\x13\xB1\n\x13\x03\x13\x03\x13\x05\x13\xB5\n\x13\x03\x13\x03\x13\x03\x14" +
		"\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x05\x15\xBF\n\x15\x03\x15\x03" +
		"\x15\x03\x16\x03\x16\x07\x16\xC5\n\x16\f\x16\x0E\x16\xC8\v\x16\x03\x17" +
		"\x03\x17\x07\x17\xCC\n\x17\f\x17\x0E\x17\xCF\v\x17\x04_\xA0\x02\x02\x18" +
		"\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v" +
		"\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D" +
		"\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x02+\x02" +
		"\x02-\x02\x02\x03\x02\x0E\x05\x02**]]}}\x05\x02++__\x7F\x7F\x03\x02))" +
		"\n\x02))^^ddhhppttvvxx\x05\x02C\\aac|\x06\x022;C\\aac|\x04\x02\f\f\x0F" +
		"\x0F\x04\x02\v\v\"\"\x03\x022;\x04\x02ZZzz\x04\x022;aa\x05\x022;C\\c|" +
		"\x02\xE6\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02" +
		"\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02" +
		"\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02" +
		"\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02" +
		"\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02" +
		"\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02" +
		"\'\x03\x02\x02\x02\x03/\x03\x02\x02\x02\x052\x03\x02\x02\x02\x077\x03" +
		"\x02\x02\x02\tI\x03\x02\x02\x02\vO\x03\x02\x02\x02\rQ\x03\x02\x02\x02" +
		"\x0F]\x03\x02\x02\x02\x11c\x03\x02\x02\x02\x13e\x03\x02\x02\x02\x15h\x03" +
		"\x02\x02\x02\x17j\x03\x02\x02\x02\x19n\x03\x02\x02\x02\x1Bu\x03\x02\x02" +
		"\x02\x1D\x83\x03\x02\x02\x02\x1F\x89\x03\x02\x02\x02!\x93\x03\x02\x02" +
		"\x02#\x99\x03\x02\x02\x02%\xA8\x03\x02\x02\x02\'\xB8\x03\x02\x02\x02)" +
		"\xBC\x03\x02\x02\x02+\xC2\x03\x02\x02\x02-\xC9\x03\x02\x02\x02/0\t\x02" +
		"\x02\x0201\b\x02\x02\x021\x04\x03\x02\x02\x0223\t\x03\x02\x0234\b\x03" +
		"\x03\x024\x06\x03\x02\x02\x0258\x05\x1D\x0F\x0268\x05!\x11\x0275\x03\x02" +
		"\x02\x0276\x03\x02\x02\x0278\x03\x02\x02\x0289\x03\x02\x02\x029:\x07?" +
		"\x02\x02:;\x07@\x02\x02;>\x03\x02\x02\x02<?\x05\x1D\x0F\x02=?\x05!\x11" +
		"\x02><\x03\x02\x02\x02>=\x03\x02\x02\x02>?\x03\x02\x02\x02?\b\x03\x02" +
		"\x02\x02@A\x05)\x15\x02AB\x05-\x17\x02BC\x070\x02\x02CD\x05-\x17\x02D" +
		"J\x03\x02\x02\x02EF\x05+\x16\x02FG\x070\x02\x02GH\x05+\x16\x02HJ\x03\x02" +
		"\x02\x02I@\x03\x02\x02\x02IE\x03\x02\x02\x02J\n\x03\x02\x02\x02KL\x05" +
		")\x15\x02LM\x05-\x17\x02MP\x03\x02\x02\x02NP\x05+\x16\x02OK\x03\x02\x02" +
		"\x02ON\x03\x02\x02\x02P\f\x03\x02\x02\x02QW\x07)\x02\x02RV\n\x04\x02\x02" +
		"ST\x07^\x02\x02TV\t\x05\x02\x02UR\x03\x02\x02\x02US\x03\x02\x02\x02VY" +
		"\x03\x02\x02\x02WU\x03\x02\x02\x02WX\x03\x02\x02\x02XZ\x03\x02\x02\x02" +
		"YW\x03\x02\x02\x02Z[\x07)\x02\x02[\x0E\x03\x02\x02\x02\\^\v\x02\x02\x02" +
		"]\\\x03\x02\x02\x02^_\x03\x02\x02\x02_`\x03\x02\x02\x02_]\x03\x02\x02" +
		"\x02`a\x03\x02\x02\x02ab\x06\b\x02\x02b\x10\x03\x02\x02\x02cd\x070\x02" +
		"\x02d\x12\x03\x02\x02\x02ef\x07<\x02\x02fg\x07<\x02\x02g\x14\x03\x02\x02" +
		"\x02hi\x07.\x02\x02i\x16\x03\x02\x02\x02jk\x07?\x02\x02k\x18\x03\x02\x02" +
		"\x02lo\x05\x1D\x0F\x02mo\x05!\x11\x02nl\x03\x02\x02\x02nm\x03\x02\x02" +
		"\x02no\x03\x02\x02\x02op\x03\x02\x02\x02ps\x07<\x02\x02qt\x05\x1D\x0F" +
		"\x02rt\x05!\x11\x02sq\x03\x02\x02\x02sr\x03\x02\x02\x02st\x03\x02\x02" +
		"\x02t\x1A\x03\x02\x02\x02uy\t\x06\x02\x02vx\t\x07\x02\x02wv\x03\x02\x02" +
		"\x02x{\x03\x02\x02\x02yw\x03\x02\x02\x02yz\x03\x02\x02\x02z\x1C\x03\x02" +
		"\x02\x02{y\x03\x02\x02\x02|\x80\t\b\x02\x02}\x7F\x05!\x11\x02~}\x03\x02" +
		"\x02\x02\x7F\x82\x03\x02\x02\x02\x80~\x03\x02\x02\x02\x80\x81\x03\x02" +
		"\x02\x02\x81\x84\x03\x02\x02\x02\x82\x80\x03\x02\x02\x02\x83|\x03\x02" +
		"\x02\x02\x84\x85\x03\x02\x02\x02\x85\x83\x03\x02\x02\x02\x85\x86\x03\x02" +
		"\x02\x02\x86\x87\x03\x02\x02\x02\x87\x88\b\x0F\x04\x02\x88\x1E\x03\x02" +
		"\x02\x02\x89\x8A\x07/\x02\x02\x8A\x8B\x07/\x02\x02\x8B\x8F\x03\x02\x02" +
		"\x02\x8C\x8E\n\b\x02\x02\x8D\x8C\x03\x02\x02\x02\x8E\x91\x03\x02\x02\x02" +
		"\x8F\x8D\x03\x02\x02\x02\x8F\x90\x03\x02\x02\x02\x90 \x03\x02\x02\x02" +
		"\x91\x8F\x03\x02\x02\x02\x92\x94\t\t\x02\x02\x93\x92\x03\x02\x02\x02\x94" +
		"\x95\x03\x02\x02\x02\x95\x93\x03\x02\x02\x02\x95\x96\x03\x02\x02\x02\x96" +
		"\x97\x03\x02\x02\x02\x97\x98\b\x11\x05\x02\x98\"\x03\x02\x02\x02\x99\x9A" +
		"\x071\x02\x02\x9A\x9B\x07,\x02\x02\x9B\xA0\x03\x02\x02\x02\x9C\x9F\x05" +
		"#\x12\x02\x9D\x9F\v\x02\x02\x02\x9E\x9C\x03\x02\x02\x02\x9E\x9D\x03\x02" +
		"\x02\x02\x9F\xA2\x03\x02\x02\x02\xA0\xA1\x03\x02\x02\x02\xA0\x9E\x03\x02" +
		"\x02\x02\xA1\xA3\x03\x02\x02\x02\xA2\xA0\x03\x02\x02\x02\xA3\xA4\x07," +
		"\x02\x02\xA4\xA5\x071\x02\x02\xA5\xA6\x03\x02\x02\x02\xA6\xA7\b\x12\x06" +
		"\x02\xA7$\x03\x02\x02\x02\xA8\xAC\x07^\x02\x02\xA9\xAB\t\t\x02\x02\xAA" +
		"\xA9\x03\x02\x02\x02\xAB\xAE\x03\x02\x02\x02\xAC\xAA\x03\x02\x02\x02\xAC" +
		"\xAD\x03\x02\x02\x02\xAD\xB4\x03\x02\x02\x02\xAE\xAC\x03\x02\x02\x02\xAF" +
		"\xB1\x07\x0F\x02\x02\xB0\xAF\x03\x02\x02\x02\xB0\xB1\x03\x02\x02\x02\xB1" +
		"\xB2\x03\x02\x02\x02\xB2\xB5\x07\f\x02\x02\xB3\xB5\x04\x0E\x0F\x02\xB4" +
		"\xB0\x03\x02\x02\x02\xB4\xB3\x03\x02\x02\x02\xB5\xB6\x03\x02\x02\x02\xB6" +
		"\xB7\b\x13\x07\x02\xB7&\x03\x02\x02\x02\xB8\xB9\v\x02\x02\x02\xB9\xBA" +
		"\x03\x02\x02\x02\xBA\xBB\b\x14\b\x02\xBB(\x03\x02\x02\x02\xBC\xBE\t\n" +
		"\x02\x02\xBD\xBF\t\n\x02\x02\xBE\xBD\x03\x02\x02\x02\xBE\xBF\x03\x02\x02" +
		"\x02\xBF\xC0\x03\x02\x02\x02\xC0\xC1\t\v\x02\x02\xC1*\x03\x02\x02\x02" +
		"\xC2\xC6\t\n\x02\x02\xC3\xC5\t\f\x02\x02\xC4\xC3\x03\x02\x02\x02\xC5\xC8" +
		"\x03\x02\x02\x02\xC6\xC4\x03\x02\x02\x02\xC6\xC7\x03\x02\x02\x02\xC7," +
		"\x03\x02\x02\x02\xC8\xC6\x03\x02\x02\x02\xC9\xCD\t\r\x02\x02\xCA\xCC\t" +
		"\x07\x02\x02\xCB\xCA\x03\x02\x02\x02\xCC\xCF\x03\x02\x02\x02\xCD\xCB\x03" +
		"\x02\x02\x02\xCD\xCE\x03\x02\x02\x02\xCE.\x03\x02\x02\x02\xCF\xCD\x03" +
		"\x02\x02\x02\x1B\x027>IOUW_nsy\x80\x85\x8F\x95\x9E\xA0\xAC\xB0\xB4\xBE" +
		"\xC4\xC6\xCB\xCD\t\x03\x02\x02\x03\x03\x03\x03\x0F\x04\x02\x05\x02\x02" +
		"\x06\x02\b\x02\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

