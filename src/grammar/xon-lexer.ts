// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly IS = 3;
	public static readonly NOT = 4;
	public static readonly AS = 5;
	public static readonly IF = 6;
	public static readonly ELSE = 7;
	public static readonly THEN = 8;
	public static readonly LOOP = 9;
	public static readonly IN = 10;
	public static readonly BREAK = 11;
	public static readonly RETURN = 12;
	public static readonly OPEN_BRACKET = 13;
	public static readonly CLOSE_BRACKET = 14;
	public static readonly OPEN_PAREN = 15;
	public static readonly CLOSE_PAREN = 16;
	public static readonly OPEN_BRACE = 17;
	public static readonly CLOSE_BRACE = 18;
	public static readonly COMMA = 19;
	public static readonly ASSIGN = 20;
	public static readonly QUESTION = 21;
	public static readonly COLON = 22;
	public static readonly DOT = 23;
	public static readonly PLUS = 24;
	public static readonly MINUS = 25;
	public static readonly EXCLAMATION = 26;
	public static readonly ASTERISK = 27;
	public static readonly SLASH = 28;
	public static readonly MODULO = 29;
	public static readonly CARET = 30;
	public static readonly HASH = 31;
	public static readonly LESS_THAN = 32;
	public static readonly MORE_THAN = 33;
	public static readonly AMPERSAND = 34;
	public static readonly PIPE = 35;
	public static readonly TILDE = 36;
	public static readonly AD = 37;
	public static readonly UNDERSCORE = 38;
	public static readonly LAMBDA_START = 39;
	public static readonly FLOAT_LITERAL = 40;
	public static readonly INTEGER_LITERAL = 41;
	public static readonly BOOLEAN_LITERAL = 42;
	public static readonly CHAR_LITERAL = 43;
	public static readonly STRING_LITERAL = 44;
	public static readonly PREPROCESSOR = 45;
	public static readonly ID = 46;
	public static readonly NL = 47;
	public static readonly WS = 48;
	public static readonly COMMENT = 49;
	public static readonly ERROR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"IS", "NOT", "AS", "IF", "ELSE", "THEN", "LOOP", "IN", "BREAK", "RETURN", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "COMMA", "ASSIGN", "QUESTION", "COLON", "DOT", "PLUS", 
		"MINUS", "EXCLAMATION", "ASTERISK", "SLASH", "MODULO", "CARET", "HASH", 
		"LESS_THAN", "MORE_THAN", "AMPERSAND", "PIPE", "TILDE", "AD", "UNDERSCORE", 
		"LAMBDA_START", "FLOAT_LITERAL", "INTEGER_LITERAL", "BOOLEAN_LITERAL", 
		"CHAR_LITERAL", "STRING_LITERAL", "PREPROCESSOR", "ID", "NL", "WS", "COMMENT", 
		"DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'is'", "'not'", "'as'", "'if'", "'else'", 
		"'then'", "'loop'", "'in'", "'break'", "'return'", "'['", "']'", "'('", 
		"')'", "'{'", "'}'", "','", "'='", "'?'", "':'", "'.'", "'+'", "'-'", 
		"'!'", "'*'", "'/'", "'%'", "'^'", "'#'", "'<'", "'>'", "'&'", "'|'", 
		"'~'", "'@'", "'_'", "'\\'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "IS", "NOT", "AS", "IF", "ELSE", "THEN", 
		"LOOP", "IN", "BREAK", "RETURN", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "COMMA", "ASSIGN", "QUESTION", 
		"COLON", "DOT", "PLUS", "MINUS", "EXCLAMATION", "ASTERISK", "SLASH", "MODULO", 
		"CARET", "HASH", "LESS_THAN", "MORE_THAN", "AMPERSAND", "PIPE", "TILDE", 
		"AD", "UNDERSCORE", "LAMBDA_START", "FLOAT_LITERAL", "INTEGER_LITERAL", 
		"BOOLEAN_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", "PREPROCESSOR", "ID", 
		"NL", "WS", "COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 10:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 11:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 12:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 13:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 14:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 15:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 44:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 44:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x023\u0151\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x03\x02\x03" +
		"\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03" +
		"\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t" +
		"\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03" +
		"\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03" +
		"\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03" +
		"\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03" +
		"\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03" +
		"\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03#\x03#\x03$\x03$\x03%" +
		"\x03%\x03&\x03&\x03\'\x03\'\x05\'\xD0\n\'\x03\'\x03\'\x03\'\x03\'\x03" +
		"\'\x03\'\x03\'\x03\'\x03\'\x05\'\xDB\n\'\x03(\x03(\x05(\xDF\n(\x03(\x03" +
		"(\x03(\x05(\xE4\n(\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x05)\xEF" +
		"\n)\x03*\x03*\x03*\x03*\x03+\x03+\x03+\x03+\x07+\xF9\n+\f+\x0E+\xFC\v" +
		"+\x03+\x03+\x03,\x03,\x03,\x03,\x07,\u0104\n,\f,\x0E,\u0107\v,\x03,\x03" +
		",\x03-\x06-\u010C\n-\r-\x0E-\u010D\x03.\x03.\x03.\x05.\u0113\n.\x03.\x03" +
		".\x05.\u0117\n.\x03.\x05.\u011A\n.\x05.\u011C\n.\x03.\x03.\x03/\x06/\u0121" +
		"\n/\r/\x0E/\u0122\x03/\x03/\x030\x030\x030\x030\x070\u012B\n0\f0\x0E0" +
		"\u012E\v0\x030\x030\x031\x061\u0133\n1\r1\x0E1\u0134\x031\x031\x061\u0139" +
		"\n1\r1\x0E1\u013A\x071\u013D\n1\f1\x0E1\u0140\v1\x032\x062\u0143\n2\r" +
		"2\x0E2\u0144\x032\x032\x062\u0149\n2\r2\x0E2\u014A\x072\u014D\n2\f2\x0E" +
		"2\u0150\v2\x03\u0105\x02\x023\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02" +
		"\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F" +
		"\x19\x02\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02" +
		"\x16\'\x02\x17)\x02\x18+\x02\x19-\x02\x1A/\x02\x1B1\x02\x1C3\x02\x1D5" +
		"\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?\x02#A\x02$C\x02%E\x02&G\x02\'I\x02" +
		"(K\x02)M\x02*O\x02+Q\x02,S\x02-U\x02.W\x02/Y\x020[\x021]\x022_\x023a\x02" +
		"\x02c\x02\x02\x03\x02\n\x03\x022;\x03\x02))\x03\x02$$\n\x02$$^^ddhhpp" +
		"ttvvxx\x05\x02C\\aac|\x04\x02\v\v\"\"\x04\x02\f\f\x0F\x0F\x05\x022;C\\" +
		"c|\x02\u0163\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03" +
		"\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02" +
		"\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02" +
		"\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02" +
		"\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02" +
		"\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02" +
		"\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-" +
		"\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02" +
		"\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02" +
		"\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03" +
		"\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02" +
		"\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02" +
		"O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02" +
		"\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02" +
		"\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x03e\x03\x02\x02\x02\x05h\x03" +
		"\x02\x02\x02\x07l\x03\x02\x02\x02\to\x03\x02\x02\x02\vr\x03\x02\x02\x02" +
		"\rw\x03\x02\x02\x02\x0F|\x03\x02\x02\x02\x11\x81\x03\x02\x02\x02\x13\x84" +
		"\x03\x02\x02\x02\x15\x8A\x03\x02\x02\x02\x17\x91\x03\x02\x02\x02\x19\x94" +
		"\x03\x02\x02\x02\x1B\x97\x03\x02\x02\x02\x1D\x9A\x03\x02\x02\x02\x1F\x9D" +
		"\x03\x02\x02\x02!\xA0\x03\x02\x02\x02#\xA3\x03\x02\x02\x02%\xA5\x03\x02" +
		"\x02\x02\'\xA7\x03\x02\x02\x02)\xA9\x03\x02\x02\x02+\xAB\x03\x02\x02\x02" +
		"-\xAD\x03\x02\x02\x02/\xAF\x03\x02\x02\x021\xB1\x03\x02\x02\x023\xB3\x03" +
		"\x02\x02\x025\xB5\x03\x02\x02\x027\xB7\x03\x02\x02\x029\xB9\x03\x02\x02" +
		"\x02;\xBB\x03\x02\x02\x02=\xBD\x03\x02\x02\x02?\xBF\x03\x02\x02\x02A\xC1" +
		"\x03\x02\x02\x02C\xC3\x03\x02\x02\x02E\xC5\x03\x02\x02\x02G\xC7\x03\x02" +
		"\x02\x02I\xC9\x03\x02\x02\x02K\xCB\x03\x02\x02\x02M\xDA\x03\x02\x02\x02" +
		"O\xE3\x03\x02\x02\x02Q\xEE\x03\x02\x02\x02S\xF0\x03\x02\x02\x02U\xF4\x03" +
		"\x02\x02\x02W\xFF\x03\x02\x02\x02Y\u010B\x03\x02\x02\x02[\u011B\x03\x02" +
		"\x02\x02]\u0120\x03\x02\x02\x02_\u0126\x03\x02\x02\x02a\u0132\x03\x02" +
		"\x02\x02c\u0142\x03\x02\x02\x02ef\x07k\x02\x02fg\x07u\x02\x02g\x04\x03" +
		"\x02\x02\x02hi\x07p\x02\x02ij\x07q\x02\x02jk\x07v\x02\x02k\x06\x03\x02" +
		"\x02\x02lm\x07c\x02\x02mn\x07u\x02\x02n\b\x03\x02\x02\x02op\x07k\x02\x02" +
		"pq\x07h\x02\x02q\n\x03\x02\x02\x02rs\x07g\x02\x02st\x07n\x02\x02tu\x07" +
		"u\x02\x02uv\x07g\x02\x02v\f\x03\x02\x02\x02wx\x07v\x02\x02xy\x07j\x02" +
		"\x02yz\x07g\x02\x02z{\x07p\x02\x02{\x0E\x03\x02\x02\x02|}\x07n\x02\x02" +
		"}~\x07q\x02\x02~\x7F\x07q\x02\x02\x7F\x80\x07r\x02\x02\x80\x10\x03\x02" +
		"\x02\x02\x81\x82\x07k\x02\x02\x82\x83\x07p\x02\x02\x83\x12\x03\x02\x02" +
		"\x02\x84\x85\x07d\x02\x02\x85\x86\x07t\x02\x02\x86\x87\x07g\x02\x02\x87" +
		"\x88\x07c\x02\x02\x88\x89\x07m\x02\x02\x89\x14\x03\x02\x02\x02\x8A\x8B" +
		"\x07t\x02\x02\x8B\x8C\x07g\x02\x02\x8C\x8D\x07v\x02\x02\x8D\x8E\x07w\x02" +
		"\x02\x8E\x8F\x07t\x02\x02\x8F\x90\x07p\x02\x02\x90\x16\x03\x02\x02\x02" +
		"\x91\x92\x07]\x02\x02\x92\x93\b\f\x02\x02\x93\x18\x03\x02\x02\x02\x94" +
		"\x95\x07_\x02\x02\x95\x96\b\r\x03\x02\x96\x1A\x03\x02\x02\x02\x97\x98" +
		"\x07*\x02\x02\x98\x99\b\x0E\x04\x02\x99\x1C\x03\x02\x02\x02\x9A\x9B\x07" +
		"+\x02\x02\x9B\x9C\b\x0F\x05\x02\x9C\x1E\x03\x02\x02\x02\x9D\x9E\x07}\x02" +
		"\x02\x9E\x9F\b\x10\x06\x02\x9F \x03\x02\x02\x02\xA0\xA1\x07\x7F\x02\x02" +
		"\xA1\xA2\b\x11\x07\x02\xA2\"\x03\x02\x02\x02\xA3\xA4\x07.\x02\x02\xA4" +
		"$\x03\x02\x02\x02\xA5\xA6\x07?\x02\x02\xA6&\x03\x02\x02\x02\xA7\xA8\x07" +
		"A\x02\x02\xA8(\x03\x02\x02\x02\xA9\xAA\x07<\x02\x02\xAA*\x03\x02\x02\x02" +
		"\xAB\xAC\x070\x02\x02\xAC,\x03\x02\x02\x02\xAD\xAE\x07-\x02\x02\xAE.\x03" +
		"\x02\x02\x02\xAF\xB0\x07/\x02\x02\xB00\x03\x02\x02\x02\xB1\xB2\x07#\x02" +
		"\x02\xB22\x03\x02\x02\x02\xB3\xB4\x07,\x02\x02\xB44\x03\x02\x02\x02\xB5" +
		"\xB6\x071\x02\x02\xB66\x03\x02\x02\x02\xB7\xB8\x07\'\x02\x02\xB88\x03" +
		"\x02\x02\x02\xB9\xBA\x07`\x02\x02\xBA:\x03\x02\x02\x02\xBB\xBC\x07%\x02" +
		"\x02\xBC<\x03\x02\x02\x02\xBD\xBE\x07>\x02\x02\xBE>\x03\x02\x02\x02\xBF" +
		"\xC0\x07@\x02\x02\xC0@\x03\x02\x02\x02\xC1\xC2\x07(\x02\x02\xC2B\x03\x02" +
		"\x02\x02\xC3\xC4\x07~\x02\x02\xC4D\x03\x02\x02\x02\xC5\xC6\x07\x80\x02" +
		"\x02\xC6F\x03\x02\x02\x02\xC7\xC8\x07B\x02\x02\xC8H\x03\x02\x02\x02\xC9" +
		"\xCA\x07a\x02\x02\xCAJ\x03\x02\x02\x02\xCB\xCC\x07^\x02\x02\xCCL\x03\x02" +
		"\x02\x02\xCD\xCF\t\x02\x02\x02\xCE\xD0\t\x02\x02\x02\xCF\xCE\x03\x02\x02" +
		"\x02\xCF\xD0\x03\x02\x02\x02\xD0\xD1\x03\x02\x02\x02\xD1\xD2\x07z\x02" +
		"\x02\xD2\xD3\x05c2\x02\xD3\xD4\x070\x02\x02\xD4\xD5\x05c2\x02\xD5\xDB" +
		"\x03\x02\x02\x02\xD6\xD7\x05a1\x02\xD7\xD8\x070\x02\x02\xD8\xD9\x05a1" +
		"\x02\xD9\xDB\x03\x02\x02\x02\xDA\xCD\x03\x02\x02\x02\xDA\xD6\x03\x02\x02" +
		"\x02\xDBN\x03\x02\x02\x02\xDC\xDE\t\x02\x02\x02\xDD\xDF\t\x02\x02\x02" +
		"\xDE\xDD\x03\x02\x02\x02\xDE\xDF\x03\x02\x02\x02\xDF\xE0\x03\x02\x02\x02" +
		"\xE0\xE1\x07z\x02\x02\xE1\xE4\x05c2\x02\xE2\xE4\x05a1\x02\xE3\xDC\x03" +
		"\x02\x02\x02\xE3\xE2\x03\x02\x02\x02\xE4P\x03\x02\x02\x02\xE5\xE6\x07" +
		"v\x02\x02\xE6\xE7\x07t\x02\x02\xE7\xE8\x07w\x02\x02\xE8\xEF\x07g\x02\x02" +
		"\xE9\xEA\x07h\x02\x02\xEA\xEB\x07c\x02\x02\xEB\xEC\x07n\x02\x02\xEC\xED" +
		"\x07u\x02\x02\xED\xEF\x07g\x02\x02\xEE\xE5\x03\x02\x02\x02\xEE\xE9\x03" +
		"\x02\x02\x02\xEFR\x03\x02\x02\x02\xF0\xF1\x07)\x02\x02\xF1\xF2\n\x03\x02" +
		"\x02\xF2\xF3\x07)\x02\x02\xF3T\x03\x02\x02\x02\xF4\xFA\x07$\x02\x02\xF5" +
		"\xF9\n\x04\x02\x02\xF6\xF7\x07^\x02\x02\xF7\xF9\t\x05\x02\x02\xF8\xF5" +
		"\x03\x02\x02\x02\xF8\xF6\x03\x02\x02\x02\xF9\xFC\x03\x02\x02\x02\xFA\xF8" +
		"\x03\x02\x02\x02\xFA\xFB\x03\x02\x02\x02\xFB\xFD\x03\x02\x02\x02\xFC\xFA" +
		"\x03\x02\x02\x02\xFD\xFE\x07$\x02\x02\xFEV\x03\x02\x02\x02\xFF\u0100\x07" +
		"%\x02\x02\u0100\u0101\x07}\x02\x02\u0101\u0105\x03\x02\x02\x02\u0102\u0104" +
		"\v\x02\x02\x02\u0103\u0102\x03\x02\x02\x02\u0104\u0107\x03\x02\x02\x02" +
		"\u0105\u0106\x03\x02\x02\x02\u0105\u0103\x03\x02\x02\x02\u0106\u0108\x03" +
		"\x02\x02\x02\u0107\u0105\x03\x02\x02\x02\u0108\u0109\x07\x7F\x02\x02\u0109" +
		"X\x03\x02\x02\x02\u010A\u010C\t\x06\x02\x02\u010B\u010A\x03\x02\x02\x02" +
		"\u010C\u010D\x03\x02\x02\x02\u010D\u010B\x03\x02\x02\x02\u010D\u010E\x03" +
		"\x02\x02\x02\u010EZ\x03\x02\x02\x02\u010F\u0110\x06.\x02\x02\u0110\u011C" +
		"\x05]/\x02\u0111\u0113\x07\x0F\x02\x02\u0112\u0111\x03\x02\x02\x02\u0112" +
		"\u0113\x03\x02\x02\x02\u0113\u0114\x03\x02\x02\x02\u0114\u0117\x07\f\x02" +
		"\x02\u0115\u0117\x07\x0F\x02\x02\u0116\u0112\x03\x02\x02\x02\u0116\u0115" +
		"\x03\x02\x02\x02\u0117\u0119\x03\x02\x02\x02\u0118\u011A\x05]/\x02\u0119" +
		"\u0118\x03\x02\x02\x02\u0119\u011A\x03\x02\x02\x02\u011A\u011C\x03\x02" +
		"\x02\x02\u011B\u010F\x03\x02\x02\x02\u011B\u0116\x03\x02\x02\x02\u011C" +
		"\u011D\x03\x02\x02\x02\u011D\u011E\b.\b\x02\u011E\\\x03\x02\x02\x02\u011F" +
		"\u0121\t\x07\x02\x02\u0120\u011F\x03\x02\x02\x02\u0121\u0122\x03\x02\x02" +
		"\x02\u0122\u0120\x03\x02\x02\x02\u0122\u0123\x03\x02\x02\x02\u0123\u0124" +
		"\x03\x02\x02\x02\u0124\u0125\b/\t\x02\u0125^\x03\x02\x02\x02\u0126\u0127" +
		"\x07/\x02\x02\u0127\u0128\x07/\x02\x02\u0128\u012C\x03\x02\x02\x02\u0129" +
		"\u012B\n\b\x02\x02\u012A\u0129\x03\x02\x02\x02\u012B\u012E\x03\x02\x02" +
		"\x02\u012C\u012A\x03\x02\x02\x02\u012C\u012D\x03\x02\x02\x02\u012D\u012F" +
		"\x03\x02\x02\x02\u012E\u012C\x03\x02\x02\x02\u012F\u0130\b0\t\x02\u0130" +
		"`\x03\x02\x02\x02\u0131\u0133\t\x02\x02\x02\u0132\u0131\x03\x02\x02\x02" +
		"\u0133\u0134\x03\x02\x02\x02\u0134\u0132\x03\x02\x02\x02\u0134\u0135\x03" +
		"\x02\x02\x02\u0135\u013E\x03\x02\x02\x02\u0136\u0138\x07a\x02\x02\u0137" +
		"\u0139\t\x02\x02\x02\u0138\u0137\x03\x02\x02\x02\u0139\u013A\x03\x02\x02" +
		"\x02\u013A\u0138\x03\x02\x02\x02\u013A\u013B\x03\x02\x02\x02\u013B\u013D" +
		"\x03\x02\x02\x02\u013C\u0136\x03\x02\x02\x02\u013D\u0140\x03\x02\x02\x02" +
		"\u013E\u013C\x03\x02\x02\x02\u013E\u013F\x03\x02\x02\x02\u013Fb\x03\x02" +
		"\x02\x02\u0140\u013E\x03\x02\x02\x02\u0141\u0143\t\t\x02\x02\u0142\u0141" +
		"\x03\x02\x02\x02\u0143\u0144\x03\x02\x02\x02\u0144\u0142\x03\x02\x02\x02" +
		"\u0144\u0145\x03\x02\x02\x02\u0145\u014E\x03\x02\x02\x02\u0146\u0148\x07" +
		"a\x02\x02\u0147\u0149\t\t\x02\x02\u0148\u0147\x03\x02\x02\x02\u0149\u014A" +
		"\x03\x02\x02\x02\u014A\u0148\x03\x02\x02\x02\u014A\u014B\x03\x02\x02\x02" +
		"\u014B\u014D\x03\x02\x02\x02\u014C\u0146\x03\x02\x02\x02\u014D\u0150\x03" +
		"\x02\x02\x02\u014E\u014C\x03\x02\x02\x02\u014E\u014F\x03\x02\x02\x02\u014F" +
		"d\x03\x02\x02\x02\u0150\u014E\x03\x02\x02\x02\x18\x02\xCF\xDA\xDE\xE3" +
		"\xEE\xF8\xFA\u0105\u010D\u0112\u0116\u0119\u011B\u0122\u012C\u0134\u013A" +
		"\u013E\u0144\u014A\u014E\n\x03\f\x02\x03\r\x03\x03\x0E\x04\x03\x0F\x05" +
		"\x03\x10\x06\x03\x11\x07\x03.\b\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

