// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
// @ts-nocheck
import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly Prefix = 3;
	public static readonly Postfix = 4;
	public static readonly Infix = 5;
	public static readonly Is = 6;
	public static readonly As = 7;
	public static readonly If = 8;
	public static readonly Else = 9;
	public static readonly ElseIf = 10;
	public static readonly Loop = 11;
	public static readonly In = 12;
	public static readonly Break = 13;
	public static readonly Return = 14;
	public static readonly Preprocessor = 15;
	public static readonly LineBreak = 16;
	public static readonly OpenBracket = 17;
	public static readonly CloseBracket = 18;
	public static readonly OpenParen = 19;
	public static readonly CloseParen = 20;
	public static readonly OpenBrace = 21;
	public static readonly CloseBrace = 22;
	public static readonly Comma = 23;
	public static readonly Assign = 24;
	public static readonly Question = 25;
	public static readonly Colon = 26;
	public static readonly Dot = 27;
	public static readonly Plus = 28;
	public static readonly Minus = 29;
	public static readonly Exclamation = 30;
	public static readonly Asterisk = 31;
	public static readonly Slash = 32;
	public static readonly Modulo = 33;
	public static readonly Caret = 34;
	public static readonly Hash = 35;
	public static readonly LessThan = 36;
	public static readonly MoreThan = 37;
	public static readonly Ampersand = 38;
	public static readonly Pipe = 39;
	public static readonly Tilde = 40;
	public static readonly Ad = 41;
	public static readonly Underscore = 42;
	public static readonly LambdaStart = 43;
	public static readonly BooleanLiteral = 44;
	public static readonly FloatLiteral = 45;
	public static readonly IntegerLiteral = 46;
	public static readonly CharLiteral = 47;
	public static readonly StringLiteral = 48;
	public static readonly StringFormatStart = 49;
	public static readonly StringFormatMiddle = 50;
	public static readonly StringFormatEnd = 51;
	public static readonly ID = 52;
	public static readonly Spaces = 53;
	public static readonly Comment = 54;
	public static readonly LineJoining = 55;
	public static readonly UnexpectedCharacter = 56;
	public static readonly ERROR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"Prefix", "Postfix", "Infix", "Is", "As", "If", "Else", "ElseIf", "Loop", 
		"In", "Break", "Return", "Preprocessor", "LineBreak", "OpenBracket", "CloseBracket", 
		"OpenParen", "CloseParen", "OpenBrace", "CloseBrace", "Comma", "Assign", 
		"Question", "Colon", "Dot", "Plus", "Minus", "Exclamation", "Asterisk", 
		"Slash", "Modulo", "Caret", "Hash", "LessThan", "MoreThan", "Ampersand", 
		"Pipe", "Tilde", "Ad", "Underscore", "LambdaStart", "BooleanLiteral", 
		"FloatLiteral", "IntegerLiteral", "CharLiteral", "StringLiteral", "StringFormatStart", 
		"StringFormatMiddle", "StringFormatEnd", "ID", "Spaces", "Comment", "LineJoining", 
		"UnexpectedCharacter", "SPACES", "DIGIT_NUMBER", "ALPHABET_NUMBER", "STRING_CHARACTER",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'prefix'", "'postfix'", "'infix'", "'is'", 
		"'as'", "'if'", "'else'", "'elif'", "'loop'", "'in'", "'break'", "'return'", 
		undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", "','", 
		"'='", "'?'", "':'", "'.'", "'+'", "'-'", "'!'", "'*'", "'/'", "'%'", 
		"'^'", "'#'", "'<'", "'>'", "'&'", "'|'", "'~'", "'@'", "'_'", "'\\'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "Prefix", "Postfix", "Infix", "Is", "As", 
		"If", "Else", "ElseIf", "Loop", "In", "Break", "Return", "Preprocessor", 
		"LineBreak", "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", 
		"OpenBrace", "CloseBrace", "Comma", "Assign", "Question", "Colon", "Dot", 
		"Plus", "Minus", "Exclamation", "Asterisk", "Slash", "Modulo", "Caret", 
		"Hash", "LessThan", "MoreThan", "Ampersand", "Pipe", "Tilde", "Ad", "Underscore", 
		"LambdaStart", "BooleanLiteral", "FloatLiteral", "IntegerLiteral", "CharLiteral", 
		"StringLiteral", "StringFormatStart", "StringFormatMiddle", "StringFormatEnd", 
		"ID", "Spaces", "Comment", "LineJoining", "UnexpectedCharacter",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 13:
			this.LineBreak_action(_localctx, actionIndex);
			break;

		case 14:
			this.OpenBracket_action(_localctx, actionIndex);
			break;

		case 15:
			this.CloseBracket_action(_localctx, actionIndex);
			break;

		case 16:
			this.OpenParen_action(_localctx, actionIndex);
			break;

		case 17:
			this.CloseParen_action(_localctx, actionIndex);
			break;

		case 18:
			this.OpenBrace_action(_localctx, actionIndex);
			break;

		case 19:
			this.CloseBrace_action(_localctx, actionIndex);
			break;
		}
	}
	private LineBreak_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.handleLineBreak()
			break;
		}
	}
	private OpenBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened++;
			break;
		}
	}
	private CloseBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened--;
			break;
		}
	}
	private OpenParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened++;
			break;
		}
	}
	private CloseParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened--;
			break;
		}
	}
	private OpenBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened++;
			break;
		}
	}
	private CloseBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.opened--;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 13:
			return this.LineBreak_sempred(_localctx, predIndex);
		}
		return true;
	}
	private LineBreak_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02:\u01A3\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x03\x02\x03" +
		"\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03" +
		"\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03" +
		"\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03" +
		"\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E" +
		"\x03\x0E\x03\x0E\x07\x0E\xB9\n\x0E\f\x0E\x0E\x0E\xBC\v\x0E\x03\x0E\x03" +
		"\x0E\x03\x0F\x03\x0F\x03\x0F\x05\x0F\xC3\n\x0F\x03\x0F\x03\x0F\x05\x0F" +
		"\xC7\n\x0F\x03\x0F\x05\x0F\xCA\n\x0F\x05\x0F\xCC\n\x0F\x03\x0F\x03\x0F" +
		"\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12" +
		"\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15" +
		"\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A" +
		"\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E" +
		"\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03#\x03#\x03$\x03$\x03" +
		"%\x03%\x03&\x03&\x03\'\x03\'\x03(\x03(\x03)\x03)\x03*\x03*\x03+\x03+\x03" +
		"+\x03+\x03+\x03+\x03+\x03+\x03+\x05+\u0115\n+\x03,\x03,\x05,\u0119\n," +
		"\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x03,\x05,\u0124\n,\x03-\x03-" +
		"\x05-\u0128\n-\x03-\x03-\x03-\x05-\u012D\n-\x03.\x03.\x03.\x03.\x03/\x03" +
		"/\x07/\u0135\n/\f/\x0E/\u0138\v/\x03/\x03/\x030\x030\x070\u013E\n0\f0" +
		"\x0E0\u0141\v0\x030\x030\x031\x031\x071\u0147\n1\f1\x0E1\u014A\v1\x03" +
		"1\x031\x032\x032\x072\u0150\n2\f2\x0E2\u0153\v2\x032\x032\x033\x063\u0158" +
		"\n3\r3\x0E3\u0159\x034\x034\x034\x034\x035\x035\x035\x035\x075\u0164\n" +
		"5\f5\x0E5\u0167\v5\x035\x035\x036\x036\x036\x056\u016E\n6\x036\x036\x05" +
		"6\u0172\n6\x036\x036\x037\x037\x037\x037\x038\x068\u017B\n8\r8\x0E8\u017C" +
		"\x039\x069\u0180\n9\r9\x0E9\u0181\x039\x039\x069\u0186\n9\r9\x0E9\u0187" +
		"\x079\u018A\n9\f9\x0E9\u018D\v9\x03:\x06:\u0190\n:\r:\x0E:\u0191\x03:" +
		"\x03:\x06:\u0196\n:\r:\x0E:\u0197\x07:\u019A\n:\f:\x0E:\u019D\v:\x03;" +
		"\x03;\x03;\x05;\u01A2\n;\x03\xBA\x02\x02<\x03\x02\x05\x05\x02\x06\x07" +
		"\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r\x15\x02" +
		"\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13!\x02" +
		"\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19-\x02\x1A/\x02\x1B1" +
		"\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?\x02#A\x02$C\x02" +
		"%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+Q\x02,S\x02-U\x02.W\x02/Y\x020[" +
		"\x021]\x022_\x023a\x024c\x025e\x026g\x027i\x028k\x029m\x02:o\x02\x02q" +
		"\x02\x02s\x02\x02u\x02\x02\x03\x02\n\x03\x022;\x03\x02))\x05\x02C\\aa" +
		"c|\x04\x02\f\f\x0F\x0F\x04\x02\v\v\"\"\x04\x022;c|\x04\x02$$}}\v\x02$" +
		"$^^ddhhppttvvxx}}\x02\u01B9\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02" +
		"\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02" +
		"\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02" +
		"\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02" +
		"\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02" +
		"\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02" +
		"%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03" +
		"\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02" +
		"\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x02" +
		"9\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02" +
		"\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02" +
		"\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03" +
		"\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02" +
		"\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02" +
		"[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02" +
		"\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02\x02\x02g\x03\x02\x02\x02" +
		"\x02i\x03\x02\x02\x02\x02k\x03\x02\x02\x02\x02m\x03\x02\x02\x02\x03w\x03" +
		"\x02\x02\x02\x05~\x03\x02\x02\x02\x07\x86\x03\x02\x02\x02\t\x8C\x03\x02" +
		"\x02\x02\v\x8F\x03\x02\x02\x02\r\x92\x03\x02\x02\x02\x0F\x95\x03\x02\x02" +
		"\x02\x11\x9A\x03\x02\x02\x02\x13\x9F\x03\x02\x02\x02\x15\xA4\x03\x02\x02" +
		"\x02\x17\xA7\x03\x02\x02\x02\x19\xAD\x03\x02\x02\x02\x1B\xB4\x03\x02\x02" +
		"\x02\x1D\xCB\x03\x02\x02\x02\x1F\xCF\x03\x02\x02\x02!\xD2\x03\x02\x02" +
		"\x02#\xD5\x03\x02\x02\x02%\xD8\x03\x02\x02\x02\'\xDB\x03\x02\x02\x02)" +
		"\xDE\x03\x02\x02\x02+\xE1\x03\x02\x02\x02-\xE3\x03\x02\x02\x02/\xE5\x03" +
		"\x02\x02\x021\xE7\x03\x02\x02\x023\xE9\x03\x02\x02\x025\xEB\x03\x02\x02" +
		"\x027\xED\x03\x02\x02\x029\xEF\x03\x02\x02\x02;\xF1\x03\x02\x02\x02=\xF3" +
		"\x03\x02\x02\x02?\xF5\x03\x02\x02\x02A\xF7\x03\x02\x02\x02C\xF9\x03\x02" +
		"\x02\x02E\xFB\x03\x02\x02\x02G\xFD\x03\x02\x02\x02I\xFF\x03\x02\x02\x02" +
		"K\u0101\x03\x02\x02\x02M\u0103\x03\x02\x02\x02O\u0105\x03\x02\x02\x02" +
		"Q\u0107\x03\x02\x02\x02S\u0109\x03\x02\x02\x02U\u0114\x03\x02\x02\x02" +
		"W\u0123\x03\x02\x02\x02Y\u012C\x03\x02\x02\x02[\u012E\x03\x02\x02\x02" +
		"]\u0132\x03\x02\x02\x02_\u013B\x03\x02\x02\x02a\u0144\x03\x02\x02\x02" +
		"c\u014D\x03\x02\x02\x02e\u0157\x03\x02\x02\x02g\u015B\x03\x02\x02\x02" +
		"i\u015F\x03\x02\x02\x02k\u016A\x03\x02\x02\x02m\u0175\x03\x02\x02\x02" +
		"o\u017A\x03\x02\x02\x02q\u017F\x03\x02\x02\x02s\u018F\x03\x02\x02\x02" +
		"u\u01A1\x03\x02\x02\x02wx\x07r\x02\x02xy\x07t\x02\x02yz\x07g\x02\x02z" +
		"{\x07h\x02\x02{|\x07k\x02\x02|}\x07z\x02\x02}\x04\x03\x02\x02\x02~\x7F" +
		"\x07r\x02\x02\x7F\x80\x07q\x02\x02\x80\x81\x07u\x02\x02\x81\x82\x07v\x02" +
		"\x02\x82\x83\x07h\x02\x02\x83\x84\x07k\x02\x02\x84\x85\x07z\x02\x02\x85" +
		"\x06\x03\x02\x02\x02\x86\x87\x07k\x02\x02\x87\x88\x07p\x02\x02\x88\x89" +
		"\x07h\x02\x02\x89\x8A\x07k\x02\x02\x8A\x8B\x07z\x02\x02\x8B\b\x03\x02" +
		"\x02\x02\x8C\x8D\x07k\x02\x02\x8D\x8E\x07u\x02\x02\x8E\n\x03\x02\x02\x02" +
		"\x8F\x90\x07c\x02\x02\x90\x91\x07u\x02\x02\x91\f\x03\x02\x02\x02\x92\x93" +
		"\x07k\x02\x02\x93\x94\x07h\x02\x02\x94\x0E\x03\x02\x02\x02\x95\x96\x07" +
		"g\x02\x02\x96\x97\x07n\x02\x02\x97\x98\x07u\x02\x02\x98\x99\x07g\x02\x02" +
		"\x99\x10\x03\x02\x02\x02\x9A\x9B\x07g\x02\x02\x9B\x9C\x07n\x02\x02\x9C" +
		"\x9D\x07k\x02\x02\x9D\x9E\x07h\x02\x02\x9E\x12\x03\x02\x02\x02\x9F\xA0" +
		"\x07n\x02\x02\xA0\xA1\x07q\x02\x02\xA1\xA2\x07q\x02\x02\xA2\xA3\x07r\x02" +
		"\x02\xA3\x14\x03\x02\x02\x02\xA4\xA5\x07k\x02\x02\xA5\xA6\x07p\x02\x02" +
		"\xA6\x16\x03\x02\x02\x02\xA7\xA8\x07d\x02\x02\xA8\xA9\x07t\x02\x02\xA9" +
		"\xAA\x07g\x02\x02\xAA\xAB\x07c\x02\x02\xAB\xAC\x07m\x02\x02\xAC\x18\x03" +
		"\x02\x02\x02\xAD\xAE\x07t\x02\x02\xAE\xAF\x07g\x02\x02\xAF\xB0\x07v\x02" +
		"\x02\xB0\xB1\x07w\x02\x02\xB1\xB2\x07t\x02\x02\xB2\xB3\x07p\x02\x02\xB3" +
		"\x1A\x03\x02\x02\x02\xB4\xB5\x07%\x02\x02\xB5\xB6\x07}\x02\x02\xB6\xBA" +
		"\x03\x02\x02\x02\xB7\xB9\v\x02\x02\x02\xB8\xB7\x03\x02\x02\x02\xB9\xBC" +
		"\x03\x02\x02\x02\xBA\xBB\x03\x02\x02\x02\xBA\xB8\x03\x02\x02\x02\xBB\xBD" +
		"\x03\x02\x02\x02\xBC\xBA\x03\x02\x02\x02\xBD\xBE\x07\x7F\x02\x02\xBE\x1C" +
		"\x03\x02\x02\x02\xBF\xC0\x06\x0F\x02\x02\xC0\xCC\x05o8\x02\xC1\xC3\x07" +
		"\x0F\x02\x02\xC2\xC1\x03\x02\x02\x02\xC2\xC3\x03\x02\x02\x02\xC3\xC4\x03" +
		"\x02\x02\x02\xC4\xC7\x07\f\x02\x02\xC5\xC7\x07\x0F\x02\x02\xC6\xC2\x03" +
		"\x02\x02\x02\xC6\xC5\x03\x02\x02\x02\xC7\xC9\x03\x02\x02\x02\xC8\xCA\x05" +
		"o8\x02\xC9\xC8\x03\x02\x02\x02\xC9\xCA\x03\x02\x02\x02\xCA\xCC\x03\x02" +
		"\x02\x02\xCB\xBF\x03\x02\x02\x02\xCB\xC6\x03\x02\x02\x02\xCC\xCD\x03\x02" +
		"\x02\x02\xCD\xCE\b\x0F\x02\x02\xCE\x1E\x03\x02\x02\x02\xCF\xD0\x07]\x02" +
		"\x02\xD0\xD1\b\x10\x03\x02\xD1 \x03\x02\x02\x02\xD2\xD3\x07_\x02\x02\xD3" +
		"\xD4\b\x11\x04\x02\xD4\"\x03\x02\x02\x02\xD5\xD6\x07*\x02\x02\xD6\xD7" +
		"\b\x12\x05\x02\xD7$\x03\x02\x02\x02\xD8\xD9\x07+\x02\x02\xD9\xDA\b\x13" +
		"\x06\x02\xDA&\x03\x02\x02\x02\xDB\xDC\x07}\x02\x02\xDC\xDD\b\x14\x07\x02" +
		"\xDD(\x03\x02\x02\x02\xDE\xDF\x07\x7F\x02\x02\xDF\xE0\b\x15\b\x02\xE0" +
		"*\x03\x02\x02\x02\xE1\xE2\x07.\x02\x02\xE2,\x03\x02\x02\x02\xE3\xE4\x07" +
		"?\x02\x02\xE4.\x03\x02\x02\x02\xE5\xE6\x07A\x02\x02\xE60\x03\x02\x02\x02" +
		"\xE7\xE8\x07<\x02\x02\xE82\x03\x02\x02\x02\xE9\xEA\x070\x02\x02\xEA4\x03" +
		"\x02\x02\x02\xEB\xEC\x07-\x02\x02\xEC6\x03\x02\x02\x02\xED\xEE\x07/\x02" +
		"\x02\xEE8\x03\x02\x02\x02\xEF\xF0\x07#\x02\x02\xF0:\x03\x02\x02\x02\xF1" +
		"\xF2\x07,\x02\x02\xF2<\x03\x02\x02\x02\xF3\xF4\x071\x02\x02\xF4>\x03\x02" +
		"\x02\x02\xF5\xF6\x07\'\x02\x02\xF6@\x03\x02\x02\x02\xF7\xF8\x07`\x02\x02" +
		"\xF8B\x03\x02\x02\x02\xF9\xFA\x07%\x02\x02\xFAD\x03\x02\x02\x02\xFB\xFC" +
		"\x07>\x02\x02\xFCF\x03\x02\x02\x02\xFD\xFE\x07@\x02\x02\xFEH\x03\x02\x02" +
		"\x02\xFF\u0100\x07(\x02\x02\u0100J\x03\x02\x02\x02\u0101\u0102\x07~\x02" +
		"\x02\u0102L\x03\x02\x02\x02\u0103\u0104\x07\x80\x02\x02\u0104N\x03\x02" +
		"\x02\x02\u0105\u0106\x07B\x02\x02\u0106P\x03\x02\x02\x02\u0107\u0108\x07" +
		"a\x02\x02\u0108R\x03\x02\x02\x02\u0109\u010A\x07^\x02\x02\u010AT\x03\x02" +
		"\x02\x02\u010B\u010C\x07v\x02\x02\u010C\u010D\x07t\x02\x02\u010D\u010E" +
		"\x07w\x02\x02\u010E\u0115\x07g\x02\x02\u010F\u0110\x07h\x02\x02\u0110" +
		"\u0111\x07c\x02\x02\u0111\u0112\x07n\x02\x02\u0112\u0113\x07u\x02\x02" +
		"\u0113\u0115\x07g\x02\x02\u0114\u010B\x03\x02\x02\x02\u0114\u010F\x03" +
		"\x02\x02\x02\u0115V\x03\x02\x02\x02\u0116\u0118\t\x02\x02\x02\u0117\u0119" +
		"\t\x02\x02\x02\u0118\u0117\x03\x02\x02\x02\u0118\u0119\x03\x02\x02\x02" +
		"\u0119\u011A\x03\x02\x02\x02\u011A\u011B\x07z\x02\x02\u011B\u011C\x05" +
		"s:\x02\u011C\u011D\x070\x02\x02\u011D\u011E\x05s:\x02\u011E\u0124\x03" +
		"\x02\x02\x02\u011F\u0120\x05q9\x02\u0120\u0121\x070\x02\x02\u0121\u0122" +
		"\x05q9\x02\u0122\u0124\x03\x02\x02\x02\u0123\u0116\x03\x02\x02\x02\u0123" +
		"\u011F\x03\x02\x02\x02\u0124X\x03\x02\x02\x02\u0125\u0127\t\x02\x02\x02" +
		"\u0126\u0128\t\x02\x02\x02\u0127\u0126\x03\x02\x02\x02\u0127\u0128\x03" +
		"\x02\x02\x02\u0128\u0129\x03\x02\x02\x02\u0129\u012A\x07z\x02\x02\u012A" +
		"\u012D\x05s:\x02\u012B\u012D\x05q9\x02\u012C\u0125\x03\x02\x02\x02\u012C" +
		"\u012B\x03\x02\x02\x02\u012DZ\x03\x02\x02\x02\u012E\u012F\x07)\x02\x02" +
		"\u012F\u0130\n\x03\x02\x02\u0130\u0131\x07)\x02\x02\u0131\\\x03\x02\x02" +
		"\x02\u0132\u0136\x07$\x02\x02\u0133\u0135\x05u;\x02\u0134\u0133\x03\x02" +
		"\x02\x02\u0135\u0138\x03\x02\x02\x02\u0136\u0134\x03\x02\x02\x02\u0136" +
		"\u0137\x03\x02\x02\x02\u0137\u0139\x03\x02\x02\x02\u0138\u0136\x03\x02" +
		"\x02\x02\u0139\u013A\x07$\x02\x02\u013A^\x03\x02\x02\x02\u013B\u013F\x07" +
		"$\x02\x02\u013C\u013E\x05u;\x02\u013D\u013C\x03\x02\x02\x02\u013E\u0141" +
		"\x03\x02\x02\x02\u013F\u013D\x03\x02\x02\x02\u013F\u0140\x03\x02\x02\x02" +
		"\u0140\u0142\x03\x02\x02\x02\u0141\u013F\x03\x02\x02\x02\u0142\u0143\x07" +
		"}\x02\x02\u0143`\x03\x02\x02\x02\u0144\u0148\x07\x7F\x02\x02\u0145\u0147" +
		"\x05u;\x02\u0146\u0145\x03\x02\x02\x02\u0147\u014A\x03\x02\x02\x02\u0148" +
		"\u0146\x03\x02\x02\x02\u0148\u0149\x03\x02\x02\x02\u0149\u014B\x03\x02" +
		"\x02\x02\u014A\u0148\x03\x02\x02\x02\u014B\u014C\x07}\x02\x02\u014Cb\x03" +
		"\x02\x02\x02\u014D\u0151\x07\x7F\x02\x02\u014E\u0150\x05u;\x02\u014F\u014E" +
		"\x03\x02\x02\x02\u0150\u0153\x03\x02\x02\x02\u0151\u014F\x03\x02\x02\x02" +
		"\u0151\u0152\x03\x02\x02\x02\u0152\u0154\x03\x02\x02\x02\u0153\u0151\x03" +
		"\x02\x02\x02\u0154\u0155\x07$\x02\x02\u0155d\x03\x02\x02\x02\u0156\u0158" +
		"\t\x04\x02\x02\u0157\u0156\x03\x02\x02\x02\u0158\u0159\x03\x02\x02\x02" +
		"\u0159\u0157\x03\x02\x02\x02\u0159\u015A\x03\x02\x02\x02\u015Af\x03\x02" +
		"\x02\x02\u015B\u015C\x05o8\x02\u015C\u015D\x03\x02\x02\x02\u015D\u015E" +
		"\b4\t\x02\u015Eh\x03\x02\x02\x02\u015F\u0160\x071\x02\x02\u0160\u0161" +
		"\x071\x02\x02\u0161\u0165\x03\x02\x02\x02\u0162\u0164\n\x05\x02\x02\u0163" +
		"\u0162\x03\x02\x02\x02\u0164\u0167\x03\x02\x02\x02\u0165\u0163\x03\x02" +
		"\x02\x02\u0165\u0166\x03\x02\x02\x02\u0166\u0168\x03\x02\x02\x02\u0167" +
		"\u0165\x03\x02\x02\x02\u0168\u0169\b5\t\x02\u0169j\x03\x02\x02\x02\u016A" +
		"\u016B\x07^\x02\x02\u016B\u0171\x05o8\x02\u016C\u016E\x07\x0F\x02\x02" +
		"\u016D\u016C\x03\x02\x02\x02\u016D\u016E\x03\x02\x02\x02\u016E\u016F\x03" +
		"\x02\x02\x02\u016F\u0172\x07\f\x02\x02\u0170\u0172\x07\x0F\x02\x02\u0171" +
		"\u016D\x03\x02\x02\x02\u0171\u0170\x03\x02\x02\x02\u0172\u0173\x03\x02" +
		"\x02\x02\u0173\u0174\b6\t\x02\u0174l\x03\x02\x02\x02\u0175\u0176\v\x02" +
		"\x02\x02\u0176\u0177\x03\x02\x02\x02\u0177\u0178\b7\n\x02\u0178n\x03\x02" +
		"\x02\x02\u0179\u017B\t\x06\x02\x02\u017A\u0179\x03\x02\x02\x02\u017B\u017C" +
		"\x03\x02\x02\x02\u017C\u017A\x03\x02\x02\x02\u017C\u017D\x03\x02\x02\x02" +
		"\u017Dp\x03\x02\x02\x02\u017E\u0180\t\x02\x02\x02\u017F\u017E\x03\x02" +
		"\x02\x02\u0180\u0181\x03\x02\x02\x02\u0181\u017F\x03\x02\x02\x02\u0181" +
		"\u0182\x03\x02\x02\x02\u0182\u018B\x03\x02\x02\x02\u0183\u018A\x07a\x02" +
		"\x02\u0184\u0186\t\x02\x02\x02\u0185\u0184\x03\x02\x02\x02\u0186\u0187" +
		"\x03\x02\x02\x02\u0187\u0185\x03\x02\x02\x02\u0187\u0188\x03\x02\x02\x02" +
		"\u0188\u018A\x03\x02\x02\x02\u0189\u0183\x03\x02\x02\x02\u0189\u0185\x03" +
		"\x02\x02\x02\u018A\u018D\x03\x02\x02\x02\u018B\u0189\x03\x02\x02\x02\u018B" +
		"\u018C\x03\x02\x02\x02\u018Cr\x03\x02\x02\x02\u018D\u018B\x03\x02\x02" +
		"\x02\u018E\u0190\t\x07\x02\x02\u018F\u018E\x03\x02\x02\x02\u0190\u0191" +
		"\x03\x02\x02\x02\u0191\u018F\x03\x02\x02\x02\u0191\u0192\x03\x02\x02\x02" +
		"\u0192\u019B\x03\x02\x02\x02\u0193\u0195\x07a\x02\x02\u0194\u0196\t\x07" +
		"\x02\x02\u0195\u0194\x03\x02\x02\x02\u0196\u0197\x03\x02\x02\x02\u0197" +
		"\u0195\x03\x02\x02\x02\u0197\u0198\x03\x02\x02\x02\u0198\u019A\x03\x02" +
		"\x02\x02\u0199\u0193\x03\x02\x02\x02\u019A\u019D\x03\x02\x02\x02\u019B" +
		"\u0199\x03\x02\x02\x02\u019B\u019C\x03\x02\x02\x02\u019Ct\x03\x02\x02" +
		"\x02\u019D\u019B\x03\x02\x02\x02\u019E\u01A2\n\b\x02\x02\u019F\u01A0\x07" +
		"^\x02\x02\u01A0\u01A2\t\t\x02\x02\u01A1\u019E\x03\x02\x02\x02\u01A1\u019F" +
		"\x03\x02\x02\x02\u01A2v\x03\x02\x02\x02\x1E\x02\xBA\xC2\xC6\xC9\xCB\u0114" +
		"\u0118\u0123\u0127\u012C\u0136\u013F\u0148\u0151\u0159\u0165\u016D\u0171" +
		"\u017C\u0181\u0187\u0189\u018B\u0191\u0197\u019B\u01A1\v\x03\x0F\x02\x03" +
		"\x10\x03\x03\x11\x04\x03\x12\x05\x03\x13\x06\x03\x14\x07\x03\x15\b\b\x02" +
		"\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

