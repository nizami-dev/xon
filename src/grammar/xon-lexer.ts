// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN_BRACKET = 3;
	public static readonly CLOSE_BRACKET = 4;
	public static readonly OPEN_PAREN = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_BRACE = 7;
	public static readonly CLOSE_BRACE = 8;
	public static readonly ACTUAL = 9;
	public static readonly BREAK = 10;
	public static readonly CONTINUE = 11;
	public static readonly DO = 12;
	public static readonly ELSE = 13;
	public static readonly EXPECT = 14;
	public static readonly EXPORT = 15;
	public static readonly FOR = 16;
	public static readonly IF = 17;
	public static readonly IMPORT = 18;
	public static readonly RETURN = 19;
	public static readonly WHILE = 20;
	public static readonly MODEL = 21;
	public static readonly OBJECT = 22;
	public static readonly FACTORY = 23;
	public static readonly AND = 24;
	public static readonly AS = 25;
	public static readonly IS = 26;
	public static readonly OR = 27;
	public static readonly ASSIGN = 28;
	public static readonly COMMA = 29;
	public static readonly QUESTION = 30;
	public static readonly DOT = 31;
	public static readonly COLON = 32;
	public static readonly LAMBDA = 33;
	public static readonly FLOAT_LITERAL = 34;
	public static readonly INTEGER_LITERAL = 35;
	public static readonly STRING_LITERAL = 36;
	public static readonly PREPROCESSOR = 37;
	public static readonly ID = 38;
	public static readonly OP = 39;
	public static readonly NL = 40;
	public static readonly WS = 41;
	public static readonly BLOCK_COMMENT = 42;
	public static readonly LINE_COMMENT = 43;
	public static readonly UNEXPECTED = 44;
	public static readonly LINE_JOINING = 45;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", "DO", "ELSE", "EXPECT", 
		"EXPORT", "FOR", "IF", "IMPORT", "RETURN", "WHILE", "MODEL", "OBJECT", 
		"FACTORY", "AND", "AS", "IS", "OR", "ASSIGN", "COMMA", "QUESTION", "DOT", 
		"COLON", "LAMBDA", "FLOAT_LITERAL", "INTEGER_LITERAL", "STRING_LITERAL", 
		"PREPROCESSOR", "ID", "OP", "NL", "WS", "BLOCK_COMMENT", "LINE_COMMENT", 
		"UNEXPECTED", "LINE_JOINING", "Radix", "DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'actual'", "'break'", "'continue'", "'do'", "'else'", "'expect'", "'export'", 
		"'for'", "'if'", "'import'", "'return'", "'while'", "'model'", "'object'", 
		"'factory'", "'and'", "'as'", "'is'", "'or'", "'='", "','",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", 
		"DO", "ELSE", "EXPECT", "EXPORT", "FOR", "IF", "IMPORT", "RETURN", "WHILE", 
		"MODEL", "OBJECT", "FACTORY", "AND", "AS", "IS", "OR", "ASSIGN", "COMMA", 
		"QUESTION", "DOT", "COLON", "LAMBDA", "FLOAT_LITERAL", "INTEGER_LITERAL", 
		"STRING_LITERAL", "PREPROCESSOR", "ID", "OP", "NL", "WS", "BLOCK_COMMENT", 
		"LINE_COMMENT", "UNEXPECTED", "LINE_JOINING",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 2:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 3:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 4:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 5:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 37:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 37:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02/\u01B6\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x03\x02\x03\x02\x03\x02\x03\x03\x03" +
		"\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03" +
		"\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03" +
		"\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03" +
		"\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03" +
		"\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03" +
		"\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03" +
		"\x13\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03" +
		"\x14\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x15\x03\x16\x03" +
		"\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03" +
		"\x17\x03\x17\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1A\x03" +
		"\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x07\x1D\xE1" +
		"\n\x1D\f\x1D\x0E\x1D\xE4\v\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x07\x1E" +
		"\xEA\n\x1E\f\x1E\x0E\x1E\xED\v\x1E\x03\x1E\x03\x1E\x03\x1E\x07\x1E\xF2" +
		"\n\x1E\f\x1E\x0E\x1E\xF5\v\x1E\x03\x1F\x03\x1F\x07\x1F\xF9\n\x1F\f\x1F" +
		"\x0E\x1F\xFC\v\x1F\x03\x1F\x03\x1F\x03\x1F\x07\x1F\u0101\n\x1F\f\x1F\x0E" +
		"\x1F\u0104\v\x1F\x03 \x03 \x07 \u0108\n \f \x0E \u010B\v \x03 \x03 \x03" +
		" \x03 \x03 \x07 \u0112\n \f \x0E \u0115\v \x03!\x03!\x03!\x03!\x03!\x03" +
		"!\x03!\x03!\x03!\x05!\u0120\n!\x03\"\x03\"\x03\"\x03\"\x05\"\u0126\n\"" +
		"\x03#\x03#\x03#\x03#\x07#\u012C\n#\f#\x0E#\u012F\v#\x03#\x03#\x03$\x03" +
		"$\x03$\x03$\x03$\x03$\x07$\u0139\n$\f$\x0E$\u013C\v$\x03$\x03$\x07$\u0140" +
		"\n$\f$\x0E$\u0143\v$\x03$\x03$\x03%\x03%\x07%\u0149\n%\f%\x0E%\u014C\v" +
		"%\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03" +
		"&\x05&\u015C\n&\x03\'\x03\'\x03\'\x05\'\u0161\n\'\x03\'\x03\'\x05\'\u0165" +
		"\n\'\x03\'\x05\'\u0168\n\'\x05\'\u016A\n\'\x03\'\x03\'\x03(\x06(\u016F" +
		"\n(\r(\x0E(\u0170\x03(\x03(\x03)\x03)\x03)\x03)\x03)\x07)\u017A\n)\f)" +
		"\x0E)\u017D\v)\x03)\x03)\x03)\x03)\x03)\x03*\x03*\x03*\x03*\x07*\u0188" +
		"\n*\f*\x0E*\u018B\v*\x03*\x03*\x03+\x03+\x03+\x03+\x03,\x03,\x07,\u0195" +
		"\n,\f,\x0E,\u0198\v,\x03,\x05,\u019B\n,\x03,\x03,\x05,\u019F\n,\x03,\x03" +
		",\x03-\x03-\x05-\u01A5\n-\x03-\x03-\x03.\x03.\x07.\u01AB\n.\f.\x0E.\u01AE" +
		"\v.\x03/\x03/\x07/\u01B2\n/\f/\x0E/\u01B5\v/\x05\u013A\u0141\u017B\x02" +
		"\x020\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F" +
		"\x02\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02" +
		"\x11\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02" +
		"\x18+\x02\x19-\x02\x1A/\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02" +
		" ;\x02!=\x02\"?\x02#A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+" +
		"Q\x02,S\x02-U\x02.W\x02/Y\x02\x02[\x02\x02]\x02\x02\x03\x02\r\x03\x02" +
		"))\n\x02))^^ddhhppttvvxx\x05\x02C\\aac|\x06\x022;C\\aac|\x05\x02##\'\'" +
		",`\x04\x02\v\v\"\"\x04\x02\f\f\x0F\x0F\x03\x022;\x04\x02ZZzz\x04\x022" +
		";aa\x05\x022;C\\c|\x02\u01DD\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02" +
		"\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02" +
		"\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02" +
		"\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02" +
		"\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02" +
		"\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02" +
		"%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03" +
		"\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02" +
		"\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x02" +
		"9\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02" +
		"\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02" +
		"\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03" +
		"\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02" +
		"\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x03_\x03\x02\x02\x02\x05" +
		"b\x03\x02\x02\x02\x07e\x03\x02\x02\x02\th\x03\x02\x02\x02\vk\x03\x02\x02" +
		"\x02\rn\x03\x02\x02\x02\x0Fq\x03\x02\x02\x02\x11x\x03\x02\x02\x02\x13" +
		"~\x03\x02\x02\x02\x15\x87\x03\x02\x02\x02\x17\x8A\x03\x02\x02\x02\x19" +
		"\x8F\x03\x02\x02\x02\x1B\x96\x03\x02\x02\x02\x1D\x9D\x03\x02\x02\x02\x1F" +
		"\xA1\x03\x02\x02\x02!\xA4\x03\x02\x02\x02#\xAB\x03\x02\x02\x02%\xB2\x03" +
		"\x02\x02\x02\'\xB8\x03\x02\x02\x02)\xBE\x03\x02\x02\x02+\xC5\x03\x02\x02" +
		"\x02-\xCD\x03\x02\x02\x02/\xD1\x03\x02\x02\x021\xD4\x03\x02\x02\x023\xD7" +
		"\x03\x02\x02\x025\xDA\x03\x02\x02\x027\xDC\x03\x02\x02\x029\xE2\x03\x02" +
		"\x02\x02;\xEB\x03\x02\x02\x02=\xFA\x03\x02\x02\x02?\u0109\x03\x02\x02" +
		"\x02A\u011F\x03\x02\x02\x02C\u0125\x03\x02\x02\x02E\u0127\x03\x02\x02" +
		"\x02G\u0132\x03\x02\x02\x02I\u0146\x03\x02\x02\x02K\u015B\x03\x02\x02" +
		"\x02M\u0169\x03\x02\x02\x02O\u016E\x03\x02\x02\x02Q\u0174\x03\x02\x02" +
		"\x02S\u0183\x03\x02\x02\x02U\u018E\x03\x02\x02\x02W\u0192\x03\x02\x02" +
		"\x02Y\u01A2\x03\x02\x02\x02[\u01A8\x03\x02\x02\x02]\u01AF\x03\x02\x02" +
		"\x02_`\x07]\x02\x02`a\b\x02\x02\x02a\x04\x03\x02\x02\x02bc\x07_\x02\x02" +
		"cd\b\x03\x03\x02d\x06\x03\x02\x02\x02ef\x07*\x02\x02fg\b\x04\x04\x02g" +
		"\b\x03\x02\x02\x02hi\x07+\x02\x02ij\b\x05\x05\x02j\n\x03\x02\x02\x02k" +
		"l\x07}\x02\x02lm\b\x06\x06\x02m\f\x03\x02\x02\x02no\x07\x7F\x02\x02op" +
		"\b\x07\x07\x02p\x0E\x03\x02\x02\x02qr\x07c\x02\x02rs\x07e\x02\x02st\x07" +
		"v\x02\x02tu\x07w\x02\x02uv\x07c\x02\x02vw\x07n\x02\x02w\x10\x03\x02\x02" +
		"\x02xy\x07d\x02\x02yz\x07t\x02\x02z{\x07g\x02\x02{|\x07c\x02\x02|}\x07" +
		"m\x02\x02}\x12\x03\x02\x02\x02~\x7F\x07e\x02\x02\x7F\x80\x07q\x02\x02" +
		"\x80\x81\x07p\x02\x02\x81\x82\x07v\x02\x02\x82\x83\x07k\x02\x02\x83\x84" +
		"\x07p\x02\x02\x84\x85\x07w\x02\x02\x85\x86\x07g\x02\x02\x86\x14\x03\x02" +
		"\x02\x02\x87\x88\x07f\x02\x02\x88\x89\x07q\x02\x02\x89\x16\x03\x02\x02" +
		"\x02\x8A\x8B\x07g\x02\x02\x8B\x8C\x07n\x02\x02\x8C\x8D\x07u\x02\x02\x8D" +
		"\x8E\x07g\x02\x02\x8E\x18\x03\x02\x02\x02\x8F\x90\x07g\x02\x02\x90\x91" +
		"\x07z\x02\x02\x91\x92\x07r\x02\x02\x92\x93\x07g\x02\x02\x93\x94\x07e\x02" +
		"\x02\x94\x95\x07v\x02\x02\x95\x1A\x03\x02\x02\x02\x96\x97\x07g\x02\x02" +
		"\x97\x98\x07z\x02\x02\x98\x99\x07r\x02\x02\x99\x9A\x07q\x02\x02\x9A\x9B" +
		"\x07t\x02\x02\x9B\x9C\x07v\x02\x02\x9C\x1C\x03\x02\x02\x02\x9D\x9E\x07" +
		"h\x02\x02\x9E\x9F\x07q\x02\x02\x9F\xA0\x07t\x02\x02\xA0\x1E\x03\x02\x02" +
		"\x02\xA1\xA2\x07k\x02\x02\xA2\xA3\x07h\x02\x02\xA3 \x03\x02\x02\x02\xA4" +
		"\xA5\x07k\x02\x02\xA5\xA6\x07o\x02\x02\xA6\xA7\x07r\x02\x02\xA7\xA8\x07" +
		"q\x02\x02\xA8\xA9\x07t\x02\x02\xA9\xAA\x07v\x02\x02\xAA\"\x03\x02\x02" +
		"\x02\xAB\xAC\x07t\x02\x02\xAC\xAD\x07g\x02\x02\xAD\xAE\x07v\x02\x02\xAE" +
		"\xAF\x07w\x02\x02\xAF\xB0\x07t\x02\x02\xB0\xB1\x07p\x02\x02\xB1$\x03\x02" +
		"\x02\x02\xB2\xB3\x07y\x02\x02\xB3\xB4\x07j\x02\x02\xB4\xB5\x07k\x02\x02" +
		"\xB5\xB6\x07n\x02\x02\xB6\xB7\x07g\x02\x02\xB7&\x03\x02\x02\x02\xB8\xB9" +
		"\x07o\x02\x02\xB9\xBA\x07q\x02\x02\xBA\xBB\x07f\x02\x02\xBB\xBC\x07g\x02" +
		"\x02\xBC\xBD\x07n\x02\x02\xBD(\x03\x02\x02\x02\xBE\xBF\x07q\x02\x02\xBF" +
		"\xC0\x07d\x02\x02\xC0\xC1\x07l\x02\x02\xC1\xC2\x07g\x02\x02\xC2\xC3\x07" +
		"e\x02\x02\xC3\xC4\x07v\x02\x02\xC4*\x03\x02\x02\x02\xC5\xC6\x07h\x02\x02" +
		"\xC6\xC7\x07c\x02\x02\xC7\xC8\x07e\x02\x02\xC8\xC9\x07v\x02\x02\xC9\xCA" +
		"\x07q\x02\x02\xCA\xCB\x07t\x02\x02\xCB\xCC\x07{\x02\x02\xCC,\x03\x02\x02" +
		"\x02\xCD\xCE\x07c\x02\x02\xCE\xCF\x07p\x02\x02\xCF\xD0\x07f\x02\x02\xD0" +
		".\x03\x02\x02\x02\xD1\xD2\x07c\x02\x02\xD2\xD3\x07u\x02\x02\xD30\x03\x02" +
		"\x02\x02\xD4\xD5\x07k\x02\x02\xD5\xD6\x07u\x02\x02\xD62\x03\x02\x02\x02" +
		"\xD7\xD8\x07q\x02\x02\xD8\xD9\x07t\x02\x02\xD94\x03\x02\x02\x02\xDA\xDB" +
		"\x07?\x02\x02\xDB6\x03\x02\x02\x02\xDC\xDD\x07.\x02\x02\xDD8\x03\x02\x02" +
		"\x02\xDE\xE1\x05M\'\x02\xDF\xE1\x05O(\x02\xE0\xDE\x03\x02\x02\x02\xE0" +
		"\xDF\x03\x02\x02\x02\xE1\xE4\x03\x02\x02\x02\xE2\xE0\x03\x02\x02\x02\xE2" +
		"\xE3\x03\x02\x02\x02\xE3\xE5\x03\x02\x02\x02\xE4\xE2\x03\x02\x02\x02\xE5" +
		"\xE6\x07A\x02\x02\xE6:\x03\x02\x02\x02\xE7\xEA\x05M\'\x02\xE8\xEA\x05" +
		"O(\x02\xE9\xE7\x03\x02\x02\x02\xE9\xE8\x03\x02\x02\x02\xEA\xED\x03\x02" +
		"\x02\x02\xEB\xE9\x03\x02\x02\x02\xEB\xEC\x03\x02\x02\x02\xEC\xEE\x03\x02" +
		"\x02\x02\xED\xEB\x03\x02\x02\x02\xEE\xF3\x070\x02\x02\xEF\xF2\x05M\'\x02" +
		"\xF0\xF2\x05O(\x02\xF1\xEF\x03\x02\x02\x02\xF1\xF0\x03\x02\x02\x02\xF2" +
		"\xF5\x03\x02\x02\x02\xF3\xF1\x03\x02\x02\x02\xF3\xF4\x03\x02\x02\x02\xF4" +
		"<\x03\x02\x02\x02\xF5\xF3\x03\x02\x02\x02\xF6\xF9\x05M\'\x02\xF7\xF9\x05" +
		"O(\x02\xF8\xF6\x03\x02\x02\x02\xF8\xF7\x03\x02\x02\x02\xF9\xFC\x03\x02" +
		"\x02\x02\xFA\xF8\x03\x02\x02\x02\xFA\xFB\x03\x02\x02\x02\xFB\xFD\x03\x02" +
		"\x02\x02\xFC\xFA\x03\x02\x02\x02\xFD\u0102\x07<\x02\x02\xFE\u0101\x05" +
		"M\'\x02\xFF\u0101\x05O(\x02\u0100\xFE\x03\x02\x02\x02\u0100\xFF\x03\x02" +
		"\x02\x02\u0101\u0104\x03\x02\x02\x02\u0102\u0100\x03\x02\x02\x02\u0102" +
		"\u0103\x03\x02\x02\x02\u0103>\x03\x02\x02\x02\u0104\u0102\x03\x02\x02" +
		"\x02\u0105\u0108\x05M\'\x02\u0106\u0108\x05O(\x02\u0107\u0105\x03\x02" +
		"\x02\x02\u0107\u0106\x03\x02\x02\x02\u0108\u010B\x03\x02\x02\x02\u0109" +
		"\u0107\x03\x02\x02\x02\u0109\u010A\x03\x02\x02\x02\u010A\u010C\x03\x02" +
		"\x02\x02\u010B\u0109\x03\x02\x02\x02\u010C\u010D\x07?\x02\x02\u010D\u010E" +
		"\x07@\x02\x02\u010E\u0113\x03\x02\x02\x02\u010F\u0112\x05M\'\x02\u0110" +
		"\u0112\x05O(\x02\u0111\u010F\x03\x02\x02\x02\u0111\u0110\x03\x02\x02\x02" +
		"\u0112\u0115\x03\x02\x02\x02\u0113\u0111\x03\x02\x02\x02\u0113\u0114\x03" +
		"\x02\x02\x02\u0114@\x03\x02\x02\x02\u0115\u0113\x03\x02\x02\x02\u0116" +
		"\u0117\x05Y-\x02\u0117\u0118\x05]/\x02\u0118\u0119\x070\x02\x02\u0119" +
		"\u011A\x05]/\x02\u011A\u0120\x03\x02\x02\x02\u011B\u011C\x05[.\x02\u011C" +
		"\u011D\x070\x02\x02\u011D\u011E\x05[.\x02\u011E\u0120\x03\x02\x02\x02" +
		"\u011F\u0116\x03\x02\x02\x02\u011F\u011B\x03\x02\x02\x02\u0120B\x03\x02" +
		"\x02\x02\u0121\u0122\x05Y-\x02\u0122\u0123\x05]/\x02\u0123\u0126\x03\x02" +
		"\x02\x02\u0124\u0126\x05[.\x02\u0125\u0121\x03\x02\x02\x02\u0125\u0124" +
		"\x03\x02\x02\x02\u0126D\x03\x02\x02\x02\u0127\u012D\x07)\x02\x02\u0128" +
		"\u012C\n\x02\x02\x02\u0129\u012A\x07^\x02\x02\u012A\u012C\t\x03\x02\x02" +
		"\u012B\u0128\x03\x02\x02\x02\u012B\u0129\x03\x02\x02\x02\u012C\u012F\x03" +
		"\x02\x02\x02\u012D\u012B\x03\x02\x02\x02\u012D\u012E\x03\x02\x02\x02\u012E" +
		"\u0130\x03\x02\x02\x02\u012F\u012D\x03\x02\x02\x02\u0130\u0131\x07)\x02" +
		"\x02\u0131F\x03\x02\x02\x02\u0132\u0133\x07%\x02\x02\u0133\u0134\x07}" +
		"\x02\x02\u0134\u0141\x03\x02\x02\x02\u0135\u0140\x05G$\x02\u0136\u013A" +
		"\x07}\x02\x02\u0137\u0139\v\x02\x02\x02\u0138\u0137\x03\x02\x02\x02\u0139" +
		"\u013C\x03\x02\x02\x02\u013A\u013B\x03\x02\x02\x02\u013A\u0138\x03\x02" +
		"\x02\x02\u013B\u013D\x03\x02\x02\x02\u013C\u013A\x03\x02\x02\x02\u013D" +
		"\u0140\x07\x7F\x02\x02\u013E\u0140\v\x02\x02\x02\u013F\u0135\x03\x02\x02" +
		"\x02\u013F\u0136\x03\x02\x02\x02\u013F\u013E\x03\x02\x02\x02\u0140\u0143" +
		"\x03\x02\x02\x02\u0141\u0142\x03\x02\x02\x02\u0141\u013F\x03\x02\x02\x02" +
		"\u0142\u0144\x03\x02\x02\x02\u0143\u0141\x03\x02\x02\x02\u0144\u0145\x07" +
		"\x7F\x02\x02\u0145H\x03\x02\x02\x02\u0146\u014A\t\x04\x02\x02\u0147\u0149" +
		"\t\x05\x02\x02\u0148\u0147\x03\x02\x02\x02\u0149\u014C\x03\x02\x02\x02" +
		"\u014A\u0148\x03\x02\x02\x02\u014A\u014B\x03\x02\x02\x02\u014BJ\x03\x02" +
		"\x02\x02\u014C\u014A\x03\x02\x02\x02\u014D\u015C\t\x06\x02\x02\u014E\u014F" +
		"\x070\x02\x02\u014F\u015C\x070\x02\x02\u0150\u0151\x070\x02\x02\u0151" +
		"\u0152\x070\x02\x02\u0152\u015C\x070\x02\x02\u0153\u0154\x07>\x02\x02" +
		"\u0154\u015C\x07?\x02\x02\u0155\u0156\x07@\x02\x02\u0156\u015C\x07?\x02" +
		"\x02\u0157\u0158\x07?\x02\x02\u0158\u015C\x07?\x02\x02\u0159\u015A\x07" +
		"#\x02\x02\u015A\u015C\x07?\x02\x02\u015B\u014D\x03\x02\x02\x02\u015B\u014E" +
		"\x03\x02\x02\x02\u015B\u0150\x03\x02\x02\x02\u015B\u0153\x03\x02\x02\x02" +
		"\u015B\u0155\x03\x02\x02\x02\u015B\u0157\x03\x02\x02\x02\u015B\u0159\x03" +
		"\x02\x02\x02\u015CL\x03\x02\x02\x02\u015D\u015E\x06\'\x02\x02\u015E\u016A" +
		"\x05O(\x02\u015F\u0161\x07\x0F\x02\x02\u0160\u015F\x03\x02\x02\x02\u0160" +
		"\u0161\x03\x02\x02\x02\u0161\u0162\x03\x02\x02\x02\u0162\u0165\x07\f\x02" +
		"\x02\u0163\u0165\x07\x0F\x02\x02\u0164\u0160\x03\x02\x02\x02\u0164\u0163" +
		"\x03\x02\x02\x02\u0165\u0167\x03\x02\x02\x02\u0166\u0168\x05O(\x02\u0167" +
		"\u0166\x03\x02\x02\x02\u0167\u0168\x03\x02\x02\x02\u0168\u016A\x03\x02" +
		"\x02\x02\u0169\u015D\x03\x02\x02\x02\u0169\u0164\x03\x02\x02\x02\u016A" +
		"\u016B\x03\x02\x02\x02\u016B\u016C\b\'\b\x02\u016CN\x03\x02\x02\x02\u016D" +
		"\u016F\t\x07\x02\x02\u016E\u016D\x03\x02\x02\x02\u016F\u0170\x03\x02\x02" +
		"\x02\u0170\u016E\x03\x02\x02\x02\u0170\u0171\x03\x02\x02\x02\u0171\u0172" +
		"\x03\x02\x02\x02\u0172\u0173\b(\t\x02\u0173P\x03\x02\x02\x02\u0174\u0175" +
		"\x071\x02\x02\u0175\u0176\x07,\x02\x02\u0176\u017B\x03\x02\x02\x02\u0177" +
		"\u017A\x05Q)\x02\u0178\u017A\v\x02\x02\x02\u0179\u0177\x03\x02\x02\x02" +
		"\u0179\u0178\x03\x02\x02\x02\u017A\u017D\x03\x02\x02\x02\u017B\u017C\x03" +
		"\x02\x02\x02\u017B\u0179\x03\x02\x02\x02\u017C\u017E\x03\x02\x02\x02\u017D" +
		"\u017B\x03\x02\x02\x02\u017E\u017F\x07,\x02\x02\u017F\u0180\x071\x02\x02" +
		"\u0180\u0181\x03\x02\x02\x02\u0181\u0182\b)\n\x02\u0182R\x03\x02\x02\x02" +
		"\u0183\u0184\x07/\x02\x02\u0184\u0185\x07/\x02\x02\u0185\u0189\x03\x02" +
		"\x02\x02\u0186\u0188\n\b\x02\x02\u0187\u0186\x03\x02\x02\x02\u0188\u018B" +
		"\x03\x02\x02\x02\u0189\u0187\x03\x02\x02\x02\u0189\u018A\x03\x02\x02\x02" +
		"\u018A\u018C\x03\x02\x02\x02\u018B\u0189\x03\x02\x02\x02\u018C\u018D\b" +
		"*\n\x02\u018DT\x03\x02\x02\x02\u018E\u018F\v\x02\x02\x02\u018F\u0190\x03" +
		"\x02\x02\x02\u0190\u0191\b+\v\x02\u0191V\x03\x02\x02\x02\u0192\u0196\x07" +
		"^\x02\x02\u0193\u0195\t\x07\x02\x02\u0194\u0193\x03\x02\x02\x02\u0195" +
		"\u0198\x03\x02\x02\x02\u0196\u0194\x03\x02\x02\x02\u0196\u0197\x03\x02" +
		"\x02\x02\u0197\u019E\x03\x02\x02\x02\u0198\u0196\x03\x02\x02\x02\u0199" +
		"\u019B\x07\x0F\x02\x02\u019A\u0199\x03\x02\x02\x02\u019A\u019B\x03\x02" +
		"\x02\x02\u019B\u019C\x03\x02\x02\x02\u019C\u019F\x07\f\x02\x02\u019D\u019F" +
		"\x04\x0E\x0F\x02\u019E\u019A\x03\x02\x02\x02\u019E\u019D\x03\x02\x02\x02" +
		"\u019F\u01A0\x03\x02\x02\x02\u01A0\u01A1\b,\f\x02\u01A1X\x03\x02\x02\x02" +
		"\u01A2\u01A4\t\t\x02\x02\u01A3\u01A5\t\t\x02\x02\u01A4\u01A3\x03\x02\x02" +
		"\x02\u01A4\u01A5\x03\x02\x02\x02\u01A5\u01A6\x03\x02\x02\x02\u01A6\u01A7" +
		"\t\n\x02\x02\u01A7Z\x03\x02\x02\x02\u01A8\u01AC\t\t\x02\x02\u01A9\u01AB" +
		"\t\v\x02\x02\u01AA\u01A9\x03\x02\x02\x02\u01AB\u01AE\x03\x02\x02\x02\u01AC" +
		"\u01AA\x03\x02\x02\x02\u01AC\u01AD\x03\x02\x02\x02\u01AD\\\x03\x02\x02" +
		"\x02\u01AE\u01AC\x03\x02\x02\x02\u01AF\u01B3\t\f\x02\x02\u01B0\u01B2\t" +
		"\x05\x02\x02\u01B1\u01B0\x03\x02\x02\x02\u01B2\u01B5\x03\x02\x02\x02\u01B3" +
		"\u01B1\x03\x02\x02\x02\u01B3\u01B4\x03\x02\x02\x02\u01B4^\x03\x02\x02" +
		"\x02\u01B5\u01B3\x03\x02\x02\x02*\x02\xE0\xE2\xE9\xEB\xF1\xF3\xF8\xFA" +
		"\u0100\u0102\u0107\u0109\u0111\u0113\u011F\u0125\u012B\u012D\u013A\u013F" +
		"\u0141\u014A\u015B\u0160\u0164\u0167\u0169\u0170\u0179\u017B\u0189\u0196" +
		"\u019A\u019E\u01A4\u01AA\u01AC\u01B1\u01B3\r\x03\x02\x02\x03\x03\x03\x03" +
		"\x04\x04\x03\x05\x05\x03\x06\x06\x03\x07\x07\x03\'\b\x02\x05\x02\x02\x06" +
		"\x02\x02\x04\x02\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

