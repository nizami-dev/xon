// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
// @ts-nocheck
import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly As = 3;
	public static readonly If = 4;
	public static readonly Else = 5;
	public static readonly ElseIf = 6;
	public static readonly Loop = 7;
	public static readonly In = 8;
	public static readonly Break = 9;
	public static readonly Return = 10;
	public static readonly Preprocessor = 11;
	public static readonly LineBreak = 12;
	public static readonly OpenBracket = 13;
	public static readonly CloseBracket = 14;
	public static readonly OpenParen = 15;
	public static readonly CloseParen = 16;
	public static readonly OpenBrace = 17;
	public static readonly CloseBrace = 18;
	public static readonly Comma = 19;
	public static readonly Assign = 20;
	public static readonly Question = 21;
	public static readonly Colon = 22;
	public static readonly Dot = 23;
	public static readonly Plus = 24;
	public static readonly Minus = 25;
	public static readonly Exclamation = 26;
	public static readonly Asterisk = 27;
	public static readonly Slash = 28;
	public static readonly Modulo = 29;
	public static readonly Caret = 30;
	public static readonly Hash = 31;
	public static readonly LessThan = 32;
	public static readonly MoreThan = 33;
	public static readonly LessThanEquals = 34;
	public static readonly MoreThanEquals = 35;
	public static readonly Equals = 36;
	public static readonly NotEquals = 37;
	public static readonly And = 38;
	public static readonly Or = 39;
	public static readonly AsteriskAssign = 40;
	public static readonly SlashAssign = 41;
	public static readonly PercentAssign = 42;
	public static readonly PlusAssign = 43;
	public static readonly MinusAssign = 44;
	public static readonly Pipe = 45;
	public static readonly LambdaStart = 46;
	public static readonly NullLiteral = 47;
	public static readonly BooleanLiteral = 48;
	public static readonly NumberLiteral = 49;
	public static readonly StringLiteral = 50;
	public static readonly ID = 51;
	public static readonly Skip = 52;
	public static readonly UnexpectedCharacter = 53;
	public static readonly ERROR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"As", "If", "Else", "ElseIf", "Loop", "In", "Break", "Return", "Preprocessor", 
		"LineBreak", "OpenBracket", "CloseBracket", "OpenParen", "CloseParen", 
		"OpenBrace", "CloseBrace", "Comma", "Assign", "Question", "Colon", "Dot", 
		"Plus", "Minus", "Exclamation", "Asterisk", "Slash", "Modulo", "Caret", 
		"Hash", "LessThan", "MoreThan", "LessThanEquals", "MoreThanEquals", "Equals", 
		"NotEquals", "And", "Or", "AsteriskAssign", "SlashAssign", "PercentAssign", 
		"PlusAssign", "MinusAssign", "Pipe", "LambdaStart", "NullLiteral", "BooleanLiteral", 
		"NumberLiteral", "StringLiteral", "ID", "Skip", "UnexpectedCharacter", 
		"SPACES", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", "LINE_JOINING", 
		"NUMBER", "CHARACTER",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'as'", "'if'", "'else'", "'elif'", "'loop'", 
		"'in'", "'break'", "'return'", undefined, undefined, "'['", "']'", "'('", 
		"')'", "'{'", "'}'", "','", "'='", "'?'", "':'", "'.'", "'+'", "'-'", 
		"'!'", "'*'", "'/'", "'%'", "'^'", "'#'", "'<'", "'>'", "'<='", "'>='", 
		"'=='", "'!='", "'&&'", "'||'", "'*='", "'/='", "'%='", "'+='", "'-='", 
		"'|'", "'\\'", "'null'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "As", "If", "Else", "ElseIf", "Loop", "In", 
		"Break", "Return", "Preprocessor", "LineBreak", "OpenBracket", "CloseBracket", 
		"OpenParen", "CloseParen", "OpenBrace", "CloseBrace", "Comma", "Assign", 
		"Question", "Colon", "Dot", "Plus", "Minus", "Exclamation", "Asterisk", 
		"Slash", "Modulo", "Caret", "Hash", "LessThan", "MoreThan", "LessThanEquals", 
		"MoreThanEquals", "Equals", "NotEquals", "And", "Or", "AsteriskAssign", 
		"SlashAssign", "PercentAssign", "PlusAssign", "MinusAssign", "Pipe", "LambdaStart", 
		"NullLiteral", "BooleanLiteral", "NumberLiteral", "StringLiteral", "ID", 
		"Skip", "UnexpectedCharacter",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 9:
			this.LineBreak_action(_localctx, actionIndex);
			break;

		case 10:
			this.OpenBracket_action(_localctx, actionIndex);
			break;

		case 11:
			this.CloseBracket_action(_localctx, actionIndex);
			break;

		case 12:
			this.OpenParen_action(_localctx, actionIndex);
			break;

		case 13:
			this.CloseParen_action(_localctx, actionIndex);
			break;

		case 14:
			this.OpenBrace_action(_localctx, actionIndex);
			break;

		case 15:
			this.CloseBrace_action(_localctx, actionIndex);
			break;
		}
	}
	private LineBreak_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.handleLineBreak()
			break;
		}
	}
	private OpenBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened++;
			break;
		}
	}
	private CloseBracket_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened--;
			break;
		}
	}
	private OpenParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened++;
			break;
		}
	}
	private CloseParen_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened--;
			break;
		}
	}
	private OpenBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened++;
			break;
		}
	}
	private CloseBrace_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.opened--;
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 9:
			return this.LineBreak_sempred(_localctx, predIndex);
		}
		return true;
	}
	private LineBreak_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x027\u018F\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x03\x02\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t" +
		"\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x07\n\x9F" +
		"\n\n\f\n\x0E\n\xA2\v\n\x03\n\x03\n\x03\v\x03\v\x03\v\x05\v\xA9\n\v\x03" +
		"\v\x03\v\x05\v\xAD\n\v\x03\v\x05\v\xB0\n\v\x05\v\xB2\n\v\x03\v\x03\v\x03" +
		"\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F" +
		"\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17" +
		"\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B" +
		"\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 " +
		"\x03 \x03!\x03!\x03!\x03\"\x03\"\x03\"\x03#\x03#\x03#\x03$\x03$\x03$\x03" +
		"%\x03%\x03%\x03&\x03&\x03&\x03\'\x03\'\x03\'\x03(\x03(\x03(\x03)\x03)" +
		"\x03)\x03*\x03*\x03*\x03+\x03+\x03+\x03,\x03,\x03-\x03-\x03.\x03.\x03" +
		".\x03.\x03.\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x05/\u0119\n" +
		"/\x030\x030\x050\u011D\n0\x030\x030\x050\u0121\n0\x031\x031\x071\u0125" +
		"\n1\f1\x0E1\u0128\v1\x031\x031\x032\x032\x072\u012E\n2\f2\x0E2\u0131\v" +
		"2\x033\x033\x033\x033\x053\u0137\n3\x033\x033\x034\x034\x034\x034\x03" +
		"5\x065\u0140\n5\r5\x0E5\u0141\x036\x036\x036\x036\x076\u0148\n6\f6\x0E" +
		"6\u014B\v6\x036\x036\x036\x037\x037\x037\x037\x077\u0154\n7\f7\x0E7\u0157" +
		"\v7\x038\x038\x058\u015B\n8\x038\x058\u015E\n8\x038\x038\x058\u0162\n" +
		"8\x039\x039\x059\u0166\n9\x039\x039\x069\u016A\n9\r9\x0E9\u016B\x039\x03" +
		"9\x069\u0170\n9\r9\x0E9\u0171\x079\u0174\n9\f9\x0E9\u0177\v9\x039\x06" +
		"9\u017A\n9\r9\x0E9\u017B\x039\x039\x069\u0180\n9\r9\x0E9\u0181\x079\u0184" +
		"\n9\f9\x0E9\u0187\v9\x059\u0189\n9\x03:\x03:\x03:\x05:\u018E\n:\x04\xA0" +
		"\u0149\x02\x02;\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r" +
		"\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10" +
		"\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02" +
		"\x17)\x02\x18+\x02\x19-\x02\x1A/\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02" +
		"\x1F9\x02 ;\x02!=\x02\"?\x02#A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02" +
		"*O\x02+Q\x02,S\x02-U\x02.W\x02/Y\x020[\x021]\x022_\x023a\x024c\x025e\x02" +
		"6g\x027i\x02\x02k\x02\x02m\x02\x02o\x02\x02q\x02\x02s\x02\x02\x03\x02" +
		"\n\x05\x02C\\aac|\x06\x022;C\\aac|\x04\x02\v\v\"\"\x04\x02\f\f\x0F\x0F" +
		"\x03\x022;\x05\x022;C\\c|\x03\x02))\v\x02$$))^^ddhhppttvvxx\x02\u01A4" +
		"\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02" +
		"\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02" +
		"\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02" +
		"\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02" +
		"\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02" +
		"!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03" +
		"\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02" +
		"\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x02" +
		"5\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02" +
		"\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02" +
		"\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03" +
		"\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02" +
		"\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02" +
		"W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02" +
		"\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02\x02\x02\x02c\x03\x02\x02\x02" +
		"\x02e\x03\x02\x02\x02\x02g\x03\x02\x02\x02\x03u\x03\x02\x02\x02\x05x\x03" +
		"\x02\x02\x02\x07{\x03\x02\x02\x02\t\x80\x03\x02\x02\x02\v\x85\x03\x02" +
		"\x02\x02\r\x8A\x03\x02\x02\x02\x0F\x8D\x03\x02\x02\x02\x11\x93\x03\x02" +
		"\x02\x02\x13\x9A\x03\x02\x02\x02\x15\xB1\x03\x02\x02\x02\x17\xB5\x03\x02" +
		"\x02\x02\x19\xB8\x03\x02\x02\x02\x1B\xBB\x03\x02\x02\x02\x1D\xBE\x03\x02" +
		"\x02\x02\x1F\xC1\x03\x02\x02\x02!\xC4\x03\x02\x02\x02#\xC7\x03\x02\x02" +
		"\x02%\xC9\x03\x02\x02\x02\'\xCB\x03\x02\x02\x02)\xCD\x03\x02\x02\x02+" +
		"\xCF\x03\x02\x02\x02-\xD1\x03\x02\x02\x02/\xD3\x03\x02\x02\x021\xD5\x03" +
		"\x02\x02\x023\xD7\x03\x02\x02\x025\xD9\x03\x02\x02\x027\xDB\x03\x02\x02" +
		"\x029\xDD\x03\x02\x02\x02;\xDF\x03\x02\x02\x02=\xE1\x03\x02\x02\x02?\xE3" +
		"\x03\x02\x02\x02A\xE5\x03\x02\x02\x02C\xE8\x03\x02\x02\x02E\xEB\x03\x02" +
		"\x02\x02G\xEE\x03\x02\x02\x02I\xF1\x03\x02\x02\x02K\xF4\x03\x02\x02\x02" +
		"M\xF7\x03\x02\x02\x02O\xFA\x03\x02\x02\x02Q\xFD\x03\x02\x02\x02S\u0100" +
		"\x03\x02\x02\x02U\u0103\x03\x02\x02\x02W\u0106\x03\x02\x02\x02Y\u0108" +
		"\x03\x02\x02\x02[\u010A\x03\x02\x02\x02]\u0118\x03\x02\x02\x02_\u0120" +
		"\x03\x02\x02\x02a\u0122\x03\x02\x02\x02c\u012B\x03\x02\x02\x02e\u0136" +
		"\x03\x02\x02\x02g\u013A\x03\x02\x02\x02i\u013F\x03\x02\x02\x02k\u0143" +
		"\x03\x02\x02\x02m\u014F\x03\x02\x02\x02o\u0158\x03\x02\x02\x02q\u0188" +
		"\x03\x02\x02\x02s\u018D\x03\x02\x02\x02uv\x07c\x02\x02vw\x07u\x02\x02" +
		"w\x04\x03\x02\x02\x02xy\x07k\x02\x02yz\x07h\x02\x02z\x06\x03\x02\x02\x02" +
		"{|\x07g\x02\x02|}\x07n\x02\x02}~\x07u\x02\x02~\x7F\x07g\x02\x02\x7F\b" +
		"\x03\x02\x02\x02\x80\x81\x07g\x02\x02\x81\x82\x07n\x02\x02\x82\x83\x07" +
		"k\x02\x02\x83\x84\x07h\x02\x02\x84\n\x03\x02\x02\x02\x85\x86\x07n\x02" +
		"\x02\x86\x87\x07q\x02\x02\x87\x88\x07q\x02\x02\x88\x89\x07r\x02\x02\x89" +
		"\f\x03\x02\x02\x02\x8A\x8B\x07k\x02\x02\x8B\x8C\x07p\x02\x02\x8C\x0E\x03" +
		"\x02\x02\x02\x8D\x8E\x07d\x02\x02\x8E\x8F\x07t\x02\x02\x8F\x90\x07g\x02" +
		"\x02\x90\x91\x07c\x02\x02\x91\x92\x07m\x02\x02\x92\x10\x03\x02\x02\x02" +
		"\x93\x94\x07t\x02\x02\x94\x95\x07g\x02\x02\x95\x96\x07v\x02\x02\x96\x97" +
		"\x07w\x02\x02\x97\x98\x07t\x02\x02\x98\x99\x07p\x02\x02\x99\x12\x03\x02" +
		"\x02\x02\x9A\x9B\x07%\x02\x02\x9B\x9C\x07}\x02\x02\x9C\xA0\x03\x02\x02" +
		"\x02\x9D\x9F\v\x02\x02\x02\x9E\x9D\x03\x02\x02\x02\x9F\xA2\x03\x02\x02" +
		"\x02\xA0\xA1\x03\x02\x02\x02\xA0\x9E\x03\x02\x02\x02\xA1\xA3\x03\x02\x02" +
		"\x02\xA2\xA0\x03\x02\x02\x02\xA3\xA4\x07\x7F\x02\x02\xA4\x14\x03\x02\x02" +
		"\x02\xA5\xA6\x06\v\x02\x02\xA6\xB2\x05i5\x02\xA7\xA9\x07\x0F\x02\x02\xA8" +
		"\xA7\x03\x02\x02\x02\xA8\xA9\x03\x02\x02\x02\xA9\xAA\x03\x02\x02\x02\xAA" +
		"\xAD\x07\f\x02\x02\xAB\xAD\x07\x0F\x02\x02\xAC\xA8\x03\x02\x02\x02\xAC" +
		"\xAB\x03\x02\x02\x02\xAD\xAF\x03\x02\x02\x02\xAE\xB0\x05i5\x02\xAF\xAE" +
		"\x03\x02\x02\x02\xAF\xB0\x03\x02\x02\x02\xB0\xB2\x03\x02\x02\x02\xB1\xA5" +
		"\x03\x02\x02\x02\xB1\xAC\x03\x02\x02\x02\xB2\xB3\x03\x02\x02\x02\xB3\xB4" +
		"\b\v\x02\x02\xB4\x16\x03\x02\x02\x02\xB5\xB6\x07]\x02\x02\xB6\xB7\b\f" +
		"\x03\x02\xB7\x18\x03\x02\x02\x02\xB8\xB9\x07_\x02\x02\xB9\xBA\b\r\x04" +
		"\x02\xBA\x1A\x03\x02\x02\x02\xBB\xBC\x07*\x02\x02\xBC\xBD\b\x0E\x05\x02" +
		"\xBD\x1C\x03\x02\x02\x02\xBE\xBF\x07+\x02\x02\xBF\xC0\b\x0F\x06\x02\xC0" +
		"\x1E\x03\x02\x02\x02\xC1\xC2\x07}\x02\x02\xC2\xC3\b\x10\x07\x02\xC3 \x03" +
		"\x02\x02\x02\xC4\xC5\x07\x7F\x02\x02\xC5\xC6\b\x11\b\x02\xC6\"\x03\x02" +
		"\x02\x02\xC7\xC8\x07.\x02\x02\xC8$\x03\x02\x02\x02\xC9\xCA\x07?\x02\x02" +
		"\xCA&\x03\x02\x02\x02\xCB\xCC\x07A\x02\x02\xCC(\x03\x02\x02\x02\xCD\xCE" +
		"\x07<\x02\x02\xCE*\x03\x02\x02\x02\xCF\xD0\x070\x02\x02\xD0,\x03\x02\x02" +
		"\x02\xD1\xD2\x07-\x02\x02\xD2.\x03\x02\x02\x02\xD3\xD4\x07/\x02\x02\xD4" +
		"0\x03\x02\x02\x02\xD5\xD6\x07#\x02\x02\xD62\x03\x02\x02\x02\xD7\xD8\x07" +
		",\x02\x02\xD84\x03\x02\x02\x02\xD9\xDA\x071\x02\x02\xDA6\x03\x02\x02\x02" +
		"\xDB\xDC\x07\'\x02\x02\xDC8\x03\x02\x02\x02\xDD\xDE\x07`\x02\x02\xDE:" +
		"\x03\x02\x02\x02\xDF\xE0\x07%\x02\x02\xE0<\x03\x02\x02\x02\xE1\xE2\x07" +
		">\x02\x02\xE2>\x03\x02\x02\x02\xE3\xE4\x07@\x02\x02\xE4@\x03\x02\x02\x02" +
		"\xE5\xE6\x07>\x02\x02\xE6\xE7\x07?\x02\x02\xE7B\x03\x02\x02\x02\xE8\xE9" +
		"\x07@\x02\x02\xE9\xEA\x07?\x02\x02\xEAD\x03\x02\x02\x02\xEB\xEC\x07?\x02" +
		"\x02\xEC\xED\x07?\x02\x02\xEDF\x03\x02\x02\x02\xEE\xEF\x07#\x02\x02\xEF" +
		"\xF0\x07?\x02\x02\xF0H\x03\x02\x02\x02\xF1\xF2\x07(\x02\x02\xF2\xF3\x07" +
		"(\x02\x02\xF3J\x03\x02\x02\x02\xF4\xF5\x07~\x02\x02\xF5\xF6\x07~\x02\x02" +
		"\xF6L\x03\x02\x02\x02\xF7\xF8\x07,\x02\x02\xF8\xF9\x07?\x02\x02\xF9N\x03" +
		"\x02\x02\x02\xFA\xFB\x071\x02\x02\xFB\xFC\x07?\x02\x02\xFCP\x03\x02\x02" +
		"\x02\xFD\xFE\x07\'\x02\x02\xFE\xFF\x07?\x02\x02\xFFR\x03\x02\x02\x02\u0100" +
		"\u0101\x07-\x02\x02\u0101\u0102\x07?\x02\x02\u0102T\x03\x02\x02\x02\u0103" +
		"\u0104\x07/\x02\x02\u0104\u0105\x07?\x02\x02\u0105V\x03\x02\x02\x02\u0106" +
		"\u0107\x07~\x02\x02\u0107X\x03\x02\x02\x02\u0108\u0109\x07^\x02\x02\u0109" +
		"Z\x03\x02\x02\x02\u010A\u010B\x07p\x02\x02\u010B\u010C\x07w\x02\x02\u010C" +
		"\u010D\x07n\x02\x02\u010D\u010E\x07n\x02\x02\u010E\\\x03\x02\x02\x02\u010F" +
		"\u0110\x07v\x02\x02\u0110\u0111\x07t\x02\x02\u0111\u0112\x07w\x02\x02" +
		"\u0112\u0119\x07g\x02\x02\u0113\u0114\x07h\x02\x02\u0114\u0115\x07c\x02" +
		"\x02\u0115\u0116\x07n\x02\x02\u0116\u0117\x07u\x02\x02\u0117\u0119\x07" +
		"g\x02\x02\u0118\u010F\x03\x02\x02\x02\u0118\u0113\x03\x02\x02\x02\u0119" +
		"^\x03\x02\x02\x02\u011A\u0121\x05q9\x02\u011B\u011D\x05q9\x02\u011C\u011B" +
		"\x03\x02\x02\x02\u011C\u011D\x03\x02\x02\x02\u011D\u011E\x03\x02\x02\x02" +
		"\u011E\u011F\x070\x02\x02\u011F\u0121\x05q9\x02\u0120\u011A\x03\x02\x02" +
		"\x02\u0120\u011C\x03\x02\x02\x02\u0121`\x03\x02\x02\x02\u0122\u0126\x07" +
		")\x02\x02\u0123\u0125\x05s:\x02\u0124\u0123\x03\x02\x02\x02\u0125\u0128" +
		"\x03\x02\x02\x02\u0126\u0124\x03\x02\x02\x02\u0126\u0127\x03\x02\x02\x02" +
		"\u0127\u0129\x03\x02\x02\x02\u0128\u0126\x03\x02\x02\x02\u0129\u012A\x07" +
		")\x02\x02\u012Ab\x03\x02\x02\x02\u012B\u012F\t\x02\x02\x02\u012C\u012E" +
		"\t\x03\x02\x02\u012D\u012C\x03\x02\x02\x02\u012E\u0131\x03\x02\x02\x02" +
		"\u012F\u012D\x03\x02\x02\x02\u012F\u0130\x03\x02\x02\x02\u0130d\x03\x02" +
		"\x02\x02\u0131\u012F\x03\x02\x02\x02\u0132\u0137\x05i5\x02\u0133\u0137" +
		"\x05m7\x02\u0134\u0137\x05k6\x02\u0135\u0137\x05o8\x02\u0136\u0132\x03" +
		"\x02\x02\x02\u0136\u0133\x03\x02\x02\x02\u0136\u0134\x03\x02\x02\x02\u0136" +
		"\u0135\x03\x02\x02\x02\u0137\u0138\x03\x02\x02\x02\u0138\u0139\b3\t\x02" +
		"\u0139f\x03\x02\x02\x02\u013A\u013B\v\x02\x02\x02\u013B\u013C\x03\x02" +
		"\x02\x02\u013C\u013D\b4\n\x02\u013Dh\x03\x02\x02\x02\u013E\u0140\t\x04" +
		"\x02\x02\u013F\u013E\x03\x02\x02\x02\u0140\u0141\x03\x02\x02\x02\u0141" +
		"\u013F\x03\x02\x02\x02\u0141\u0142\x03\x02\x02\x02\u0142j\x03\x02\x02" +
		"\x02\u0143\u0144\x071\x02\x02\u0144\u0145\x07,\x02\x02\u0145\u0149\x03" +
		"\x02\x02\x02\u0146\u0148\v\x02\x02\x02\u0147\u0146\x03\x02\x02\x02\u0148" +
		"\u014B\x03\x02\x02\x02\u0149\u014A\x03\x02\x02\x02\u0149\u0147\x03\x02" +
		"\x02\x02\u014A\u014C\x03\x02\x02\x02\u014B\u0149\x03\x02\x02\x02\u014C" +
		"\u014D\x07,\x02\x02\u014D\u014E\x071\x02\x02\u014El\x03\x02\x02\x02\u014F" +
		"\u0150\x071\x02\x02\u0150\u0151\x071\x02\x02\u0151\u0155\x03\x02\x02\x02" +
		"\u0152\u0154\n\x05\x02\x02\u0153\u0152\x03\x02\x02\x02\u0154\u0157\x03" +
		"\x02\x02\x02\u0155\u0153\x03\x02\x02\x02\u0155\u0156\x03\x02\x02\x02\u0156" +
		"n\x03\x02\x02\x02\u0157\u0155\x03\x02\x02\x02\u0158\u015A\x07^\x02\x02" +
		"\u0159\u015B\x05i5\x02\u015A\u0159\x03\x02\x02\x02\u015A\u015B\x03\x02" +
		"\x02\x02\u015B\u0161\x03\x02\x02\x02\u015C\u015E\x07\x0F\x02\x02\u015D" +
		"\u015C\x03\x02\x02\x02\u015D\u015E\x03\x02\x02\x02\u015E\u015F\x03\x02" +
		"\x02\x02\u015F\u0162\x07\f\x02\x02\u0160\u0162\x07\x0F\x02\x02\u0161\u015D" +
		"\x03\x02\x02\x02\u0161\u0160\x03\x02\x02\x02\u0162p\x03\x02\x02\x02\u0163" +
		"\u0165\t\x06\x02\x02\u0164\u0166\t\x06\x02\x02\u0165\u0164\x03\x02\x02" +
		"\x02\u0165\u0166\x03\x02\x02\x02\u0166\u0167\x03\x02\x02\x02\u0167\u0169" +
		"\x07z\x02\x02\u0168\u016A\t\x07\x02\x02\u0169\u0168\x03\x02\x02\x02\u016A" +
		"\u016B\x03\x02\x02\x02\u016B\u0169\x03\x02\x02\x02\u016B\u016C\x03\x02" +
		"\x02\x02\u016C\u0175\x03\x02\x02\x02\u016D\u016F\x07a\x02\x02\u016E\u0170" +
		"\t\x07\x02\x02\u016F\u016E\x03\x02\x02\x02\u0170\u0171\x03\x02\x02\x02" +
		"\u0171\u016F\x03\x02\x02\x02\u0171\u0172\x03\x02\x02\x02\u0172\u0174\x03" +
		"\x02\x02\x02\u0173\u016D\x03\x02\x02\x02\u0174\u0177\x03\x02\x02\x02\u0175" +
		"\u0173\x03\x02\x02\x02\u0175\u0176\x03\x02\x02\x02\u0176\u0189\x03\x02" +
		"\x02\x02\u0177\u0175\x03\x02\x02\x02\u0178\u017A\t\x06\x02\x02\u0179\u0178" +
		"\x03\x02\x02\x02\u017A\u017B\x03\x02\x02\x02\u017B\u0179\x03\x02\x02\x02" +
		"\u017B\u017C\x03\x02\x02\x02\u017C\u0185\x03\x02\x02\x02\u017D\u017F\x07" +
		"a\x02\x02\u017E\u0180\t\x06\x02\x02\u017F\u017E\x03\x02\x02\x02\u0180" +
		"\u0181\x03\x02\x02\x02\u0181\u017F\x03\x02\x02\x02\u0181\u0182\x03\x02" +
		"\x02\x02\u0182\u0184\x03\x02\x02\x02\u0183\u017D\x03\x02\x02\x02\u0184" +
		"\u0187\x03\x02\x02\x02\u0185\u0183\x03\x02\x02\x02\u0185\u0186\x03\x02" +
		"\x02\x02\u0186\u0189\x03\x02\x02\x02\u0187\u0185\x03\x02\x02\x02\u0188" +
		"\u0163\x03\x02\x02\x02\u0188\u0179\x03\x02\x02\x02\u0189r\x03\x02\x02" +
		"\x02\u018A\u018E\n\b\x02\x02\u018B\u018C\x07^\x02\x02\u018C\u018E\t\t" +
		"\x02\x02\u018D\u018A\x03\x02\x02\x02\u018D\u018B\x03\x02\x02\x02\u018E" +
		"t\x03\x02\x02\x02\x1D\x02\xA0\xA8\xAC\xAF\xB1\u0118\u011C\u0120\u0126" +
		"\u012F\u0136\u0141\u0149\u0155\u015A\u015D\u0161\u0165\u016B\u0171\u0175" +
		"\u017B\u0181\u0185\u0188\u018D\v\x03\v\x02\x03\f\x03\x03\r\x04\x03\x0E" +
		"\x05\x03\x0F\x06\x03\x10\x07\x03\x11\b\b\x02\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

