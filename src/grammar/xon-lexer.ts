// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly IS = 3;
	public static readonly AS = 4;
	public static readonly IF = 5;
	public static readonly ELSE = 6;
	public static readonly ELSE_IF = 7;
	public static readonly LOOP = 8;
	public static readonly IN = 9;
	public static readonly BREAK = 10;
	public static readonly RETURN = 11;
	public static readonly OPEN_BRACKET = 12;
	public static readonly CLOSE_BRACKET = 13;
	public static readonly OPEN_PAREN = 14;
	public static readonly CLOSE_PAREN = 15;
	public static readonly OPEN_BRACE = 16;
	public static readonly CLOSE_BRACE = 17;
	public static readonly COMMA = 18;
	public static readonly ASSIGN = 19;
	public static readonly QUESTION = 20;
	public static readonly COLON = 21;
	public static readonly DOT = 22;
	public static readonly PLUS = 23;
	public static readonly MINUS = 24;
	public static readonly EXCLAMATION = 25;
	public static readonly ASTERISK = 26;
	public static readonly SLASH = 27;
	public static readonly MODULO = 28;
	public static readonly CARET = 29;
	public static readonly HASH = 30;
	public static readonly LESS_THAN = 31;
	public static readonly MORE_THAN = 32;
	public static readonly AMPERSAND = 33;
	public static readonly PIPE = 34;
	public static readonly TILDE = 35;
	public static readonly AD = 36;
	public static readonly UNDERSCORE = 37;
	public static readonly LAMBDA_START = 38;
	public static readonly FLOAT_LITERAL = 39;
	public static readonly INTEGER_LITERAL = 40;
	public static readonly BOOLEAN_LITERAL = 41;
	public static readonly CHAR_LITERAL = 42;
	public static readonly STRING_LITERAL = 43;
	public static readonly PREPROCESSOR = 44;
	public static readonly ID = 45;
	public static readonly NL = 46;
	public static readonly WS = 47;
	public static readonly COMMENT = 48;
	public static readonly ERROR = 2;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"IS", "AS", "IF", "ELSE", "ELSE_IF", "LOOP", "IN", "BREAK", "RETURN", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "COMMA", "ASSIGN", "QUESTION", "COLON", "DOT", "PLUS", 
		"MINUS", "EXCLAMATION", "ASTERISK", "SLASH", "MODULO", "CARET", "HASH", 
		"LESS_THAN", "MORE_THAN", "AMPERSAND", "PIPE", "TILDE", "AD", "UNDERSCORE", 
		"LAMBDA_START", "FLOAT_LITERAL", "INTEGER_LITERAL", "BOOLEAN_LITERAL", 
		"CHAR_LITERAL", "STRING_LITERAL", "PREPROCESSOR", "ID", "NL", "WS", "COMMENT", 
		"DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'is'", "'as'", "'if'", "'else'", "'elif'", 
		"'loop'", "'in'", "'break'", "'return'", "'['", "']'", "'('", "')'", "'{'", 
		"'}'", "','", "'='", "'?'", "':'", "'.'", "'+'", "'-'", "'!'", "'*'", 
		"'/'", "'%'", "'^'", "'#'", "'<'", "'>'", "'&'", "'|'", "'~'", "'@'", 
		"'_'", "'\\'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "IS", "AS", "IF", "ELSE", "ELSE_IF", "LOOP", 
		"IN", "BREAK", "RETURN", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "COMMA", "ASSIGN", "QUESTION", 
		"COLON", "DOT", "PLUS", "MINUS", "EXCLAMATION", "ASTERISK", "SLASH", "MODULO", 
		"CARET", "HASH", "LESS_THAN", "MORE_THAN", "AMPERSAND", "PIPE", "TILDE", 
		"AD", "UNDERSCORE", "LAMBDA_START", "FLOAT_LITERAL", "INTEGER_LITERAL", 
		"BOOLEAN_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", "PREPROCESSOR", "ID", 
		"NL", "WS", "COMMENT",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 9:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 10:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 11:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 12:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 13:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 14:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 43:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 43:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x022\u014B\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x03\x02\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03" +
		"\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t" +
		"\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03" +
		"\v\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0F" +
		"\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12" +
		"\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17" +
		"\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B" +
		"\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03 " +
		"\x03 \x03!\x03!\x03\"\x03\"\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x05" +
		"&\xCA\n&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x03&\x05&\xD5\n&\x03" +
		"\'\x03\'\x05\'\xD9\n\'\x03\'\x03\'\x03\'\x05\'\xDE\n\'\x03(\x03(\x03(" +
		"\x03(\x03(\x03(\x03(\x03(\x03(\x05(\xE9\n(\x03)\x03)\x03)\x03)\x03*\x03" +
		"*\x03*\x03*\x07*\xF3\n*\f*\x0E*\xF6\v*\x03*\x03*\x03+\x03+\x03+\x03+\x07" +
		"+\xFE\n+\f+\x0E+\u0101\v+\x03+\x03+\x03,\x06,\u0106\n,\r,\x0E,\u0107\x03" +
		"-\x03-\x03-\x05-\u010D\n-\x03-\x03-\x05-\u0111\n-\x03-\x05-\u0114\n-\x05" +
		"-\u0116\n-\x03-\x03-\x03.\x06.\u011B\n.\r.\x0E.\u011C\x03.\x03.\x03/\x03" +
		"/\x03/\x03/\x07/\u0125\n/\f/\x0E/\u0128\v/\x03/\x03/\x030\x060\u012D\n" +
		"0\r0\x0E0\u012E\x030\x030\x060\u0133\n0\r0\x0E0\u0134\x070\u0137\n0\f" +
		"0\x0E0\u013A\v0\x031\x061\u013D\n1\r1\x0E1\u013E\x031\x031\x061\u0143" +
		"\n1\r1\x0E1\u0144\x071\u0147\n1\f1\x0E1\u014A\v1\x03\xFF\x02\x022\x03" +
		"\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11" +
		"\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02" +
		"\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19" +
		"-\x02\x1A/\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02" +
		"\"?\x02#A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+Q\x02,S\x02-" +
		"U\x02.W\x02/Y\x020[\x021]\x022_\x02\x02a\x02\x02\x03\x02\n\x03\x022;\x03" +
		"\x02))\x03\x02$$\n\x02$$^^ddhhppttvvxx\x05\x02C\\aac|\x04\x02\v\v\"\"" +
		"\x04\x02\f\f\x0F\x0F\x05\x022;C\\c|\x02\u015D\x02\x03\x03\x02\x02\x02" +
		"\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02" +
		"\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02" +
		"\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02" +
		"\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02" +
		"\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02" +
		"#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03" +
		"\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02" +
		"\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x02" +
		"7\x03\x02\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02" +
		"\x02\x02\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02" +
		"\x02E\x03\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03" +
		"\x02\x02\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02" +
		"\x02\x02S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02" +
		"Y\x03\x02\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x03c\x03\x02" +
		"\x02\x02\x05f\x03\x02\x02\x02\x07i\x03\x02\x02\x02\tl\x03\x02\x02\x02" +
		"\vq\x03\x02\x02\x02\rv\x03\x02\x02\x02\x0F{\x03\x02\x02\x02\x11~\x03\x02" +
		"\x02\x02\x13\x84\x03\x02\x02\x02\x15\x8B\x03\x02\x02\x02\x17\x8E\x03\x02" +
		"\x02\x02\x19\x91\x03\x02\x02\x02\x1B\x94\x03\x02\x02\x02\x1D\x97\x03\x02" +
		"\x02\x02\x1F\x9A\x03\x02\x02\x02!\x9D\x03\x02\x02\x02#\x9F\x03\x02\x02" +
		"\x02%\xA1\x03\x02\x02\x02\'\xA3\x03\x02\x02\x02)\xA5\x03\x02\x02\x02+" +
		"\xA7\x03\x02\x02\x02-\xA9\x03\x02\x02\x02/\xAB\x03\x02\x02\x021\xAD\x03" +
		"\x02\x02\x023\xAF\x03\x02\x02\x025\xB1\x03\x02\x02\x027\xB3\x03\x02\x02" +
		"\x029\xB5\x03\x02\x02\x02;\xB7\x03\x02\x02\x02=\xB9\x03\x02\x02\x02?\xBB" +
		"\x03\x02\x02\x02A\xBD\x03\x02\x02\x02C\xBF\x03\x02\x02\x02E\xC1\x03\x02" +
		"\x02\x02G\xC3\x03\x02\x02\x02I\xC5\x03\x02\x02\x02K\xD4\x03\x02\x02\x02" +
		"M\xDD\x03\x02\x02\x02O\xE8\x03\x02\x02\x02Q\xEA\x03\x02\x02\x02S\xEE\x03" +
		"\x02\x02\x02U\xF9\x03\x02\x02\x02W\u0105\x03\x02\x02\x02Y\u0115\x03\x02" +
		"\x02\x02[\u011A\x03\x02\x02\x02]\u0120\x03\x02\x02\x02_\u012C\x03\x02" +
		"\x02\x02a\u013C\x03\x02\x02\x02cd\x07k\x02\x02de\x07u\x02\x02e\x04\x03" +
		"\x02\x02\x02fg\x07c\x02\x02gh\x07u\x02\x02h\x06\x03\x02\x02\x02ij\x07" +
		"k\x02\x02jk\x07h\x02\x02k\b\x03\x02\x02\x02lm\x07g\x02\x02mn\x07n\x02" +
		"\x02no\x07u\x02\x02op\x07g\x02\x02p\n\x03\x02\x02\x02qr\x07g\x02\x02r" +
		"s\x07n\x02\x02st\x07k\x02\x02tu\x07h\x02\x02u\f\x03\x02\x02\x02vw\x07" +
		"n\x02\x02wx\x07q\x02\x02xy\x07q\x02\x02yz\x07r\x02\x02z\x0E\x03\x02\x02" +
		"\x02{|\x07k\x02\x02|}\x07p\x02\x02}\x10\x03\x02\x02\x02~\x7F\x07d\x02" +
		"\x02\x7F\x80\x07t\x02\x02\x80\x81\x07g\x02\x02\x81\x82\x07c\x02\x02\x82" +
		"\x83\x07m\x02\x02\x83\x12\x03\x02\x02\x02\x84\x85\x07t\x02\x02\x85\x86" +
		"\x07g\x02\x02\x86\x87\x07v\x02\x02\x87\x88\x07w\x02\x02\x88\x89\x07t\x02" +
		"\x02\x89\x8A\x07p\x02\x02\x8A\x14\x03\x02\x02\x02\x8B\x8C\x07]\x02\x02" +
		"\x8C\x8D\b\v\x02\x02\x8D\x16\x03\x02\x02\x02\x8E\x8F\x07_\x02\x02\x8F" +
		"\x90\b\f\x03\x02\x90\x18\x03\x02\x02\x02\x91\x92\x07*\x02\x02\x92\x93" +
		"\b\r\x04\x02\x93\x1A\x03\x02\x02\x02\x94\x95\x07+\x02\x02\x95\x96\b\x0E" +
		"\x05\x02\x96\x1C\x03\x02\x02\x02\x97\x98\x07}\x02\x02\x98\x99\b\x0F\x06" +
		"\x02\x99\x1E\x03\x02\x02\x02\x9A\x9B\x07\x7F\x02\x02\x9B\x9C\b\x10\x07" +
		"\x02\x9C \x03\x02\x02\x02\x9D\x9E\x07.\x02\x02\x9E\"\x03\x02\x02\x02\x9F" +
		"\xA0\x07?\x02\x02\xA0$\x03\x02\x02\x02\xA1\xA2\x07A\x02\x02\xA2&\x03\x02" +
		"\x02\x02\xA3\xA4\x07<\x02\x02\xA4(\x03\x02\x02\x02\xA5\xA6\x070\x02\x02" +
		"\xA6*\x03\x02\x02\x02\xA7\xA8\x07-\x02\x02\xA8,\x03\x02\x02\x02\xA9\xAA" +
		"\x07/\x02\x02\xAA.\x03\x02\x02\x02\xAB\xAC\x07#\x02\x02\xAC0\x03\x02\x02" +
		"\x02\xAD\xAE\x07,\x02\x02\xAE2\x03\x02\x02\x02\xAF\xB0\x071\x02\x02\xB0" +
		"4\x03\x02\x02\x02\xB1\xB2\x07\'\x02\x02\xB26\x03\x02\x02\x02\xB3\xB4\x07" +
		"`\x02\x02\xB48\x03\x02\x02\x02\xB5\xB6\x07%\x02\x02\xB6:\x03\x02\x02\x02" +
		"\xB7\xB8\x07>\x02\x02\xB8<\x03\x02\x02\x02\xB9\xBA\x07@\x02\x02\xBA>\x03" +
		"\x02\x02\x02\xBB\xBC\x07(\x02\x02\xBC@\x03\x02\x02\x02\xBD\xBE\x07~\x02" +
		"\x02\xBEB\x03\x02\x02\x02\xBF\xC0\x07\x80\x02\x02\xC0D\x03\x02\x02\x02" +
		"\xC1\xC2\x07B\x02\x02\xC2F\x03\x02\x02\x02\xC3\xC4\x07a\x02\x02\xC4H\x03" +
		"\x02\x02\x02\xC5\xC6\x07^\x02\x02\xC6J\x03\x02\x02\x02\xC7\xC9\t\x02\x02" +
		"\x02\xC8\xCA\t\x02\x02\x02\xC9\xC8\x03\x02\x02\x02\xC9\xCA\x03\x02\x02" +
		"\x02\xCA\xCB\x03\x02\x02\x02\xCB\xCC\x07z\x02\x02\xCC\xCD\x05a1\x02\xCD" +
		"\xCE\x070\x02\x02\xCE\xCF\x05a1\x02\xCF\xD5\x03\x02\x02\x02\xD0\xD1\x05" +
		"_0\x02\xD1\xD2\x070\x02\x02\xD2\xD3\x05_0\x02\xD3\xD5\x03\x02\x02\x02" +
		"\xD4\xC7\x03\x02\x02\x02\xD4\xD0\x03\x02\x02\x02\xD5L\x03\x02\x02\x02" +
		"\xD6\xD8\t\x02\x02\x02\xD7\xD9\t\x02\x02\x02\xD8\xD7\x03\x02\x02\x02\xD8" +
		"\xD9\x03\x02\x02\x02\xD9\xDA\x03\x02\x02\x02\xDA\xDB\x07z\x02\x02\xDB" +
		"\xDE\x05a1\x02\xDC\xDE\x05_0\x02\xDD\xD6\x03\x02\x02\x02\xDD\xDC\x03\x02" +
		"\x02\x02\xDEN\x03\x02\x02\x02\xDF\xE0\x07v\x02\x02\xE0\xE1\x07t\x02\x02" +
		"\xE1\xE2\x07w\x02\x02\xE2\xE9\x07g\x02\x02\xE3\xE4\x07h\x02\x02\xE4\xE5" +
		"\x07c\x02\x02\xE5\xE6\x07n\x02\x02\xE6\xE7\x07u\x02\x02\xE7\xE9\x07g\x02" +
		"\x02\xE8\xDF\x03\x02\x02\x02\xE8\xE3\x03\x02\x02\x02\xE9P\x03\x02\x02" +
		"\x02\xEA\xEB\x07)\x02\x02\xEB\xEC\n\x03\x02\x02\xEC\xED\x07)\x02\x02\xED" +
		"R\x03\x02\x02\x02\xEE\xF4\x07$\x02\x02\xEF\xF3\n\x04\x02\x02\xF0\xF1\x07" +
		"^\x02\x02\xF1\xF3\t\x05\x02\x02\xF2\xEF\x03\x02\x02\x02\xF2\xF0\x03\x02" +
		"\x02\x02\xF3\xF6\x03\x02\x02\x02\xF4\xF2\x03\x02\x02\x02\xF4\xF5\x03\x02" +
		"\x02\x02\xF5\xF7\x03\x02\x02\x02\xF6\xF4\x03\x02\x02\x02\xF7\xF8\x07$" +
		"\x02\x02\xF8T\x03\x02\x02\x02\xF9\xFA\x07%\x02\x02\xFA\xFB\x07}\x02\x02" +
		"\xFB\xFF\x03\x02\x02\x02\xFC\xFE\v\x02\x02\x02\xFD\xFC\x03\x02\x02\x02" +
		"\xFE\u0101\x03\x02\x02\x02\xFF\u0100\x03\x02\x02\x02\xFF\xFD\x03\x02\x02" +
		"\x02\u0100\u0102\x03\x02\x02\x02\u0101\xFF\x03\x02\x02\x02\u0102\u0103" +
		"\x07\x7F\x02\x02\u0103V\x03\x02\x02\x02\u0104\u0106\t\x06\x02\x02\u0105" +
		"\u0104\x03\x02\x02\x02\u0106\u0107\x03\x02\x02\x02\u0107\u0105\x03\x02" +
		"\x02\x02\u0107\u0108\x03\x02\x02\x02\u0108X\x03\x02\x02\x02\u0109\u010A" +
		"\x06-\x02\x02\u010A\u0116\x05[.\x02\u010B\u010D\x07\x0F\x02\x02\u010C" +
		"\u010B\x03\x02\x02\x02\u010C\u010D\x03\x02\x02\x02\u010D\u010E\x03\x02" +
		"\x02\x02\u010E\u0111\x07\f\x02\x02\u010F\u0111\x07\x0F\x02\x02\u0110\u010C" +
		"\x03\x02\x02\x02\u0110\u010F\x03\x02\x02\x02\u0111\u0113\x03\x02\x02\x02" +
		"\u0112\u0114\x05[.\x02\u0113\u0112\x03\x02\x02\x02\u0113\u0114\x03\x02" +
		"\x02\x02\u0114\u0116\x03\x02\x02\x02\u0115\u0109\x03\x02\x02\x02\u0115" +
		"\u0110\x03\x02\x02\x02\u0116\u0117\x03\x02\x02\x02\u0117\u0118\b-\b\x02" +
		"\u0118Z\x03\x02\x02\x02\u0119\u011B\t\x07\x02\x02\u011A\u0119\x03\x02" +
		"\x02\x02\u011B\u011C\x03\x02\x02\x02\u011C\u011A\x03\x02\x02\x02\u011C" +
		"\u011D\x03\x02\x02\x02\u011D\u011E\x03\x02\x02\x02\u011E\u011F\b.\t\x02" +
		"\u011F\\\x03\x02\x02\x02\u0120\u0121\x071\x02\x02\u0121\u0122\x071\x02" +
		"\x02\u0122\u0126\x03\x02\x02\x02\u0123\u0125\n\b\x02\x02\u0124\u0123\x03" +
		"\x02\x02\x02\u0125\u0128\x03\x02\x02\x02\u0126\u0124\x03\x02\x02\x02\u0126" +
		"\u0127\x03\x02\x02\x02\u0127\u0129\x03\x02\x02\x02\u0128\u0126\x03\x02" +
		"\x02\x02\u0129\u012A\b/\t\x02\u012A^\x03\x02\x02\x02\u012B\u012D\t\x02" +
		"\x02\x02\u012C\u012B\x03\x02\x02\x02\u012D\u012E\x03\x02\x02\x02\u012E" +
		"\u012C\x03\x02\x02\x02\u012E\u012F\x03\x02\x02\x02\u012F\u0138\x03\x02" +
		"\x02\x02\u0130\u0132\x07a\x02\x02\u0131\u0133\t\x02\x02\x02\u0132\u0131" +
		"\x03\x02\x02\x02\u0133\u0134\x03\x02\x02\x02\u0134\u0132\x03\x02\x02\x02" +
		"\u0134\u0135\x03\x02\x02\x02\u0135\u0137\x03\x02\x02\x02\u0136\u0130\x03" +
		"\x02\x02\x02\u0137\u013A\x03\x02\x02\x02\u0138\u0136\x03\x02\x02\x02\u0138" +
		"\u0139\x03\x02\x02\x02\u0139`\x03\x02\x02\x02\u013A\u0138\x03\x02\x02" +
		"\x02\u013B\u013D\t\t\x02\x02\u013C\u013B\x03\x02\x02\x02\u013D\u013E\x03" +
		"\x02\x02\x02\u013E\u013C\x03\x02\x02\x02\u013E\u013F\x03\x02\x02\x02\u013F" +
		"\u0148\x03\x02\x02\x02\u0140\u0142\x07a\x02\x02\u0141\u0143\t\t\x02\x02" +
		"\u0142\u0141\x03\x02\x02\x02\u0143\u0144\x03\x02\x02\x02\u0144\u0142\x03" +
		"\x02\x02\x02\u0144\u0145\x03\x02\x02\x02\u0145\u0147\x03\x02\x02\x02\u0146" +
		"\u0140\x03\x02\x02\x02\u0147\u014A\x03\x02\x02\x02\u0148\u0146\x03\x02" +
		"\x02\x02\u0148\u0149\x03\x02\x02\x02\u0149b\x03\x02\x02\x02\u014A\u0148" +
		"\x03\x02\x02\x02\x18\x02\xC9\xD4\xD8\xDD\xE8\xF2\xF4\xFF\u0107\u010C\u0110" +
		"\u0113\u0115\u011C\u0126\u012E\u0134\u0138\u013E\u0144\u0148\n\x03\v\x02" +
		"\x03\f\x03\x03\r\x04\x03\x0E\x05\x03\x0F\x06\x03\x10\x07\x03-\b\b\x02" +
		"\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

