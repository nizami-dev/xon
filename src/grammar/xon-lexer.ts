// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN_BRACKET = 3;
	public static readonly CLOSE_BRACKET = 4;
	public static readonly OPEN_PAREN = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_BRACE = 7;
	public static readonly CLOSE_BRACE = 8;
	public static readonly ACTUAL = 9;
	public static readonly BREAK = 10;
	public static readonly CONTINUE = 11;
	public static readonly DO = 12;
	public static readonly ELSE = 13;
	public static readonly EXPECT = 14;
	public static readonly EXPORT = 15;
	public static readonly FOR = 16;
	public static readonly IF = 17;
	public static readonly IMPORT = 18;
	public static readonly RETURN = 19;
	public static readonly WHILE = 20;
	public static readonly ASSIGN = 21;
	public static readonly COMMA = 22;
	public static readonly META = 23;
	public static readonly COLON = 24;
	public static readonly QUESTION = 25;
	public static readonly DOT = 26;
	public static readonly LAMBDA = 27;
	public static readonly FLOAT_LITERAL = 28;
	public static readonly INTEGER_LITERAL = 29;
	public static readonly STRING_LITERAL = 30;
	public static readonly PREPROCESSOR = 31;
	public static readonly ID = 32;
	public static readonly LESS = 33;
	public static readonly GREAT = 34;
	public static readonly OP = 35;
	public static readonly NL = 36;
	public static readonly LINE_COMMENT = 37;
	public static readonly WS = 38;
	public static readonly BLOCK_COMMENT = 39;
	public static readonly LINE_JOINING = 40;
	public static readonly UNEXPECTED = 41;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", "DO", "ELSE", "EXPECT", 
		"EXPORT", "FOR", "IF", "IMPORT", "RETURN", "WHILE", "ASSIGN", "COMMA", 
		"META", "COLON", "QUESTION", "DOT", "LAMBDA", "FLOAT_LITERAL", "INTEGER_LITERAL", 
		"STRING_LITERAL", "PREPROCESSOR", "ID", "LESS", "GREAT", "OP", "NL", "LINE_COMMENT", 
		"WS", "BLOCK_COMMENT", "LINE_JOINING", "UNEXPECTED", "Radix", "DigitNumber", 
		"AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'actual'", "'break'", "'continue'", "'do'", "'else'", "'expect'", "'export'", 
		"'for'", "'if'", "'import'", "'return'", "'while'", "'='", "','", "'::'", 
		"':'", undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, "'<'", "'>'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "ACTUAL", "BREAK", "CONTINUE", 
		"DO", "ELSE", "EXPECT", "EXPORT", "FOR", "IF", "IMPORT", "RETURN", "WHILE", 
		"ASSIGN", "COMMA", "META", "COLON", "QUESTION", "DOT", "LAMBDA", "FLOAT_LITERAL", 
		"INTEGER_LITERAL", "STRING_LITERAL", "PREPROCESSOR", "ID", "LESS", "GREAT", 
		"OP", "NL", "LINE_COMMENT", "WS", "BLOCK_COMMENT", "LINE_JOINING", "UNEXPECTED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 2:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 3:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 4:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 5:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 33:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02+\u0181\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03" +
		"\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t" +
		"\x03\t\x03\t\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03" +
		"\v\x03\v\x03\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12\x03\x12" +
		"\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17" +
		"\x03\x18\x03\x18\x07\x18\xBC\n\x18\f\x18\x0E\x18\xBF\v\x18\x03\x18\x03" +
		"\x18\x03\x19\x03\x19\x07\x19\xC5\n\x19\f\x19\x0E\x19\xC8\v\x19\x03\x19" +
		"\x03\x19\x03\x19\x07\x19\xCD\n\x19\f\x19\x0E\x19\xD0\v\x19\x03\x1A\x03" +
		"\x1A\x07\x1A\xD4\n\x1A\f\x1A\x0E\x1A\xD7\v\x1A\x03\x1A\x03\x1A\x03\x1A" +
		"\x03\x1A\x03\x1A\x07\x1A\xDE\n\x1A\f\x1A\x0E\x1A\xE1\v\x1A\x03\x1B\x03" +
		"\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x05\x1B\xEC" +
		"\n\x1B\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x05\x1C\xF2\n\x1C\x03\x1D\x03\x1D" +
		"\x03\x1D\x03\x1D\x07\x1D\xF8\n\x1D\f\x1D\x0E\x1D\xFB\v\x1D\x03\x1D\x03" +
		"\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x07\x1E\u0105\n\x1E" +
		"\f\x1E\x0E\x1E\u0108\v\x1E\x03\x1E\x03\x1E\x07\x1E\u010C\n\x1E\f\x1E\x0E" +
		"\x1E\u010F\v\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x07\x1F\u0115\n\x1F\f" +
		"\x1F\x0E\x1F\u0118\v\x1F\x03 \x03 \x03!\x03!\x03\"\x03\"\x03\"\x03\"\x03" +
		"\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x03\"\x05\"\u012C\n" +
		"\"\x03#\x03#\x07#\u0130\n#\f#\x0E#\u0133\v#\x06#\u0135\n#\r#\x0E#\u0136" +
		"\x03#\x03#\x03$\x03$\x03$\x03$\x07$\u013F\n$\f$\x0E$\u0142\v$\x03%\x06" +
		"%\u0145\n%\r%\x0E%\u0146\x03%\x03%\x03&\x03&\x03&\x03&\x03&\x07&\u0150" +
		"\n&\f&\x0E&\u0153\v&\x03&\x03&\x03&\x03&\x03&\x03\'\x03\'\x07\'\u015C" +
		"\n\'\f\'\x0E\'\u015F\v\'\x03\'\x05\'\u0162\n\'\x03\'\x03\'\x05\'\u0166" +
		"\n\'\x03\'\x03\'\x03(\x03(\x03(\x03(\x03)\x03)\x05)\u0170\n)\x03)\x03" +
		")\x03*\x03*\x07*\u0176\n*\f*\x0E*\u0179\v*\x03+\x03+\x07+\u017D\n+\f+" +
		"\x0E+\u0180\v+\x05\u0106\u010D\u0151\x02\x02,\x03\x02\x05\x05\x02\x06" +
		"\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11\x02\f\x13\x02\r\x15" +
		"\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02\x12\x1F\x02\x13!" +
		"\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19-\x02\x1A/\x02\x1B" +
		"1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02\"?\x02#A\x02$C\x02" +
		"%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+Q\x02\x02S\x02\x02U\x02\x02\x03" +
		"\x02\r\x03\x02))\n\x02))^^ddhhppttvvxx\x05\x02C\\aac|\x06\x022;C\\aac" +
		"|\x06\x02##\'(,`~~\x04\x02\f\f\x0F\x0F\x04\x02\v\v\"\"\x03\x022;\x04\x02" +
		"ZZzz\x04\x022;aa\x05\x022;C\\c|\x02\u01A2\x02\x03\x03\x02\x02\x02\x02" +
		"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
		"\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
		"\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D" +
		"\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03" +
		"\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02" +
		"\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x02" +
		"1\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02" +
		"\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02" +
		"\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03" +
		"\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02" +
		"\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x03W\x03\x02\x02\x02\x05" +
		"Z\x03\x02\x02\x02\x07]\x03\x02\x02\x02\t`\x03\x02\x02\x02\vc\x03\x02\x02" +
		"\x02\rf\x03\x02\x02\x02\x0Fi\x03\x02\x02\x02\x11p\x03\x02\x02\x02\x13" +
		"v\x03\x02\x02\x02\x15\x7F\x03\x02\x02\x02\x17\x82\x03\x02\x02\x02\x19" +
		"\x87\x03\x02\x02\x02\x1B\x8E\x03\x02\x02\x02\x1D\x95\x03\x02\x02\x02\x1F" +
		"\x99\x03\x02\x02\x02!\x9C\x03\x02\x02\x02#\xA3\x03\x02\x02\x02%\xAA\x03" +
		"\x02\x02\x02\'\xB0\x03\x02\x02\x02)\xB2\x03\x02\x02\x02+\xB4\x03\x02\x02" +
		"\x02-\xB7\x03\x02\x02\x02/\xBD\x03\x02\x02\x021\xC6\x03\x02\x02\x023\xD5" +
		"\x03\x02\x02\x025\xEB\x03\x02\x02\x027\xF1\x03\x02\x02\x029\xF3\x03\x02" +
		"\x02\x02;\xFE\x03\x02\x02\x02=\u0112\x03\x02\x02\x02?\u0119\x03\x02\x02" +
		"\x02A\u011B\x03\x02\x02\x02C\u012B\x03\x02\x02\x02E\u0134\x03\x02\x02" +
		"\x02G\u013A\x03\x02\x02\x02I\u0144\x03\x02\x02\x02K\u014A\x03\x02\x02" +
		"\x02M\u0159\x03\x02\x02\x02O\u0169\x03\x02\x02\x02Q\u016D\x03\x02\x02" +
		"\x02S\u0173\x03\x02\x02\x02U\u017A\x03\x02\x02\x02WX\x07]\x02\x02XY\b" +
		"\x02\x02\x02Y\x04\x03\x02\x02\x02Z[\x07_\x02\x02[\\\b\x03\x03\x02\\\x06" +
		"\x03\x02\x02\x02]^\x07*\x02\x02^_\b\x04\x04\x02_\b\x03\x02\x02\x02`a\x07" +
		"+\x02\x02ab\b\x05\x05\x02b\n\x03\x02\x02\x02cd\x07}\x02\x02de\b\x06\x06" +
		"\x02e\f\x03\x02\x02\x02fg\x07\x7F\x02\x02gh\b\x07\x07\x02h\x0E\x03\x02" +
		"\x02\x02ij\x07c\x02\x02jk\x07e\x02\x02kl\x07v\x02\x02lm\x07w\x02\x02m" +
		"n\x07c\x02\x02no\x07n\x02\x02o\x10\x03\x02\x02\x02pq\x07d\x02\x02qr\x07" +
		"t\x02\x02rs\x07g\x02\x02st\x07c\x02\x02tu\x07m\x02\x02u\x12\x03\x02\x02" +
		"\x02vw\x07e\x02\x02wx\x07q\x02\x02xy\x07p\x02\x02yz\x07v\x02\x02z{\x07" +
		"k\x02\x02{|\x07p\x02\x02|}\x07w\x02\x02}~\x07g\x02\x02~\x14\x03\x02\x02" +
		"\x02\x7F\x80\x07f\x02\x02\x80\x81\x07q\x02\x02\x81\x16\x03\x02\x02\x02" +
		"\x82\x83\x07g\x02\x02\x83\x84\x07n\x02\x02\x84\x85\x07u\x02\x02\x85\x86" +
		"\x07g\x02\x02\x86\x18\x03\x02\x02\x02\x87\x88\x07g\x02\x02\x88\x89\x07" +
		"z\x02\x02\x89\x8A\x07r\x02\x02\x8A\x8B\x07g\x02\x02\x8B\x8C\x07e\x02\x02" +
		"\x8C\x8D\x07v\x02\x02\x8D\x1A\x03\x02\x02\x02\x8E\x8F\x07g\x02\x02\x8F" +
		"\x90\x07z\x02\x02\x90\x91\x07r\x02\x02\x91\x92\x07q\x02\x02\x92\x93\x07" +
		"t\x02\x02\x93\x94\x07v\x02\x02\x94\x1C\x03\x02\x02\x02\x95\x96\x07h\x02" +
		"\x02\x96\x97\x07q\x02\x02\x97\x98\x07t\x02\x02\x98\x1E\x03\x02\x02\x02" +
		"\x99\x9A\x07k\x02\x02\x9A\x9B\x07h\x02\x02\x9B \x03\x02\x02\x02\x9C\x9D" +
		"\x07k\x02\x02\x9D\x9E\x07o\x02\x02\x9E\x9F\x07r\x02\x02\x9F\xA0\x07q\x02" +
		"\x02\xA0\xA1\x07t\x02\x02\xA1\xA2\x07v\x02\x02\xA2\"\x03\x02\x02\x02\xA3" +
		"\xA4\x07t\x02\x02\xA4\xA5\x07g\x02\x02\xA5\xA6\x07v\x02\x02\xA6\xA7\x07" +
		"w\x02\x02\xA7\xA8\x07t\x02\x02\xA8\xA9\x07p\x02\x02\xA9$\x03\x02\x02\x02" +
		"\xAA\xAB\x07y\x02\x02\xAB\xAC\x07j\x02\x02\xAC\xAD\x07k\x02\x02\xAD\xAE" +
		"\x07n\x02\x02\xAE\xAF\x07g\x02\x02\xAF&\x03\x02\x02\x02\xB0\xB1\x07?\x02" +
		"\x02\xB1(\x03\x02\x02\x02\xB2\xB3\x07.\x02\x02\xB3*\x03\x02\x02\x02\xB4" +
		"\xB5\x07<\x02\x02\xB5\xB6\x07<\x02\x02\xB6,\x03\x02\x02\x02\xB7\xB8\x07" +
		"<\x02\x02\xB8.\x03\x02\x02\x02\xB9\xBC\x05E#\x02\xBA\xBC\x05I%\x02\xBB" +
		"\xB9\x03\x02\x02\x02\xBB\xBA\x03\x02\x02\x02\xBC\xBF\x03\x02\x02\x02\xBD" +
		"\xBB\x03\x02\x02\x02\xBD\xBE\x03\x02\x02\x02\xBE\xC0\x03\x02\x02\x02\xBF" +
		"\xBD\x03\x02\x02\x02\xC0\xC1\x07A\x02\x02\xC10\x03\x02\x02\x02\xC2\xC5" +
		"\x05E#\x02\xC3\xC5\x05I%\x02\xC4\xC2\x03\x02\x02\x02\xC4\xC3\x03\x02\x02" +
		"\x02\xC5\xC8\x03\x02\x02\x02\xC6\xC4\x03\x02\x02\x02\xC6\xC7\x03\x02\x02" +
		"\x02\xC7\xC9\x03\x02\x02\x02\xC8\xC6\x03\x02\x02\x02\xC9\xCE\x070\x02" +
		"\x02\xCA\xCD\x05E#\x02\xCB\xCD\x05I%\x02\xCC\xCA\x03\x02\x02\x02\xCC\xCB" +
		"\x03\x02\x02\x02\xCD\xD0\x03\x02\x02\x02\xCE\xCC\x03\x02\x02\x02\xCE\xCF" +
		"\x03\x02\x02\x02\xCF2\x03\x02\x02\x02\xD0\xCE\x03\x02\x02\x02\xD1\xD4" +
		"\x05E#\x02\xD2\xD4\x05I%\x02\xD3\xD1\x03\x02\x02\x02\xD3\xD2\x03\x02\x02" +
		"\x02\xD4\xD7\x03\x02\x02\x02\xD5\xD3\x03\x02\x02\x02\xD5\xD6\x03\x02\x02" +
		"\x02\xD6\xD8\x03\x02\x02\x02\xD7\xD5\x03\x02\x02\x02\xD8\xD9\x07?\x02" +
		"\x02\xD9\xDA\x07@\x02\x02\xDA\xDF\x03\x02\x02\x02\xDB\xDE\x05E#\x02\xDC" +
		"\xDE\x05I%\x02\xDD\xDB\x03\x02\x02\x02\xDD\xDC\x03\x02\x02\x02\xDE\xE1" +
		"\x03\x02\x02\x02\xDF\xDD\x03\x02\x02\x02\xDF\xE0\x03\x02\x02\x02\xE04" +
		"\x03\x02\x02\x02\xE1\xDF\x03\x02\x02\x02\xE2\xE3\x05Q)\x02\xE3\xE4\x05" +
		"U+\x02\xE4\xE5\x070\x02\x02\xE5\xE6\x05U+\x02\xE6\xEC\x03\x02\x02\x02" +
		"\xE7\xE8\x05S*\x02\xE8\xE9\x070\x02\x02\xE9\xEA\x05S*\x02\xEA\xEC\x03" +
		"\x02\x02\x02\xEB\xE2\x03\x02\x02\x02\xEB\xE7\x03\x02\x02\x02\xEC6\x03" +
		"\x02\x02\x02\xED\xEE\x05Q)\x02\xEE\xEF\x05U+\x02\xEF\xF2\x03\x02\x02\x02" +
		"\xF0\xF2\x05S*\x02\xF1\xED\x03\x02\x02\x02\xF1\xF0\x03\x02\x02\x02\xF2" +
		"8\x03\x02\x02\x02\xF3\xF9\x07)\x02\x02\xF4\xF8\n\x02\x02\x02\xF5\xF6\x07" +
		"^\x02\x02\xF6\xF8\t\x03\x02\x02\xF7\xF4\x03\x02\x02\x02\xF7\xF5\x03\x02" +
		"\x02\x02\xF8\xFB\x03\x02\x02\x02\xF9\xF7\x03\x02\x02\x02\xF9\xFA\x03\x02" +
		"\x02\x02\xFA\xFC\x03\x02\x02\x02\xFB\xF9\x03\x02\x02\x02\xFC\xFD\x07)" +
		"\x02\x02\xFD:\x03\x02\x02\x02\xFE\xFF\x07%\x02\x02\xFF\u0100\x07}\x02" +
		"\x02\u0100\u010D\x03\x02\x02\x02\u0101\u010C\x05;\x1E\x02\u0102\u0106" +
		"\x07}\x02\x02\u0103\u0105\v\x02\x02\x02\u0104\u0103\x03\x02\x02\x02\u0105" +
		"\u0108\x03\x02\x02\x02\u0106\u0107\x03\x02\x02\x02\u0106\u0104\x03\x02" +
		"\x02\x02\u0107\u0109\x03\x02\x02\x02\u0108\u0106\x03\x02\x02\x02\u0109" +
		"\u010C\x07\x7F\x02\x02\u010A\u010C\v\x02\x02\x02\u010B\u0101\x03\x02\x02" +
		"\x02\u010B\u0102\x03\x02\x02\x02\u010B\u010A\x03\x02\x02\x02\u010C\u010F" +
		"\x03\x02\x02\x02\u010D\u010E\x03\x02\x02\x02\u010D\u010B\x03\x02\x02\x02" +
		"\u010E\u0110\x03\x02\x02\x02\u010F\u010D\x03\x02\x02\x02\u0110\u0111\x07" +
		"\x7F\x02\x02\u0111<\x03\x02\x02\x02\u0112\u0116\t\x04\x02\x02\u0113\u0115" +
		"\t\x05\x02\x02\u0114\u0113\x03\x02\x02\x02\u0115\u0118\x03\x02\x02\x02" +
		"\u0116\u0114\x03\x02\x02\x02\u0116\u0117\x03\x02\x02\x02\u0117>\x03\x02" +
		"\x02\x02\u0118\u0116\x03\x02\x02\x02\u0119\u011A\x07>\x02\x02\u011A@\x03" +
		"\x02\x02\x02\u011B\u011C\x07@\x02\x02\u011CB\x03\x02\x02\x02\u011D\u012C" +
		"\t\x06\x02\x02\u011E\u011F\x070\x02\x02\u011F\u012C\x070\x02\x02\u0120" +
		"\u0121\x070\x02\x02\u0121\u0122\x070\x02\x02\u0122\u012C\x070\x02\x02" +
		"\u0123\u0124\x07>\x02\x02\u0124\u012C\x07?\x02\x02\u0125\u0126\x07@\x02" +
		"\x02\u0126\u012C\x07?\x02\x02\u0127\u0128\x07?\x02\x02\u0128\u012C\x07" +
		"?\x02\x02\u0129\u012A\x07#\x02\x02\u012A\u012C\x07?\x02\x02\u012B\u011D" +
		"\x03\x02\x02\x02\u012B\u011E\x03\x02\x02\x02\u012B\u0120\x03\x02\x02\x02" +
		"\u012B\u0123\x03\x02\x02\x02\u012B\u0125\x03\x02\x02\x02\u012B\u0127\x03" +
		"\x02\x02\x02\u012B\u0129\x03\x02\x02\x02\u012CD\x03\x02\x02\x02\u012D" +
		"\u0131\t\x07\x02\x02\u012E\u0130\x05I%\x02\u012F\u012E\x03\x02\x02\x02" +
		"\u0130\u0133\x03\x02\x02\x02\u0131\u012F\x03\x02\x02\x02\u0131\u0132\x03" +
		"\x02\x02\x02\u0132\u0135\x03\x02\x02\x02\u0133\u0131\x03\x02\x02\x02\u0134" +
		"\u012D\x03\x02\x02\x02\u0135\u0136\x03\x02\x02\x02\u0136\u0134\x03\x02" +
		"\x02\x02\u0136\u0137\x03\x02\x02\x02\u0137\u0138\x03\x02\x02\x02\u0138" +
		"\u0139\b#\b\x02\u0139F\x03\x02\x02\x02\u013A\u013B\x07/\x02\x02\u013B" +
		"\u013C\x07/\x02\x02\u013C\u0140\x03\x02\x02\x02\u013D\u013F\n\x07\x02" +
		"\x02\u013E\u013D\x03\x02\x02\x02\u013F\u0142\x03\x02\x02\x02\u0140\u013E" +
		"\x03\x02\x02\x02\u0140\u0141\x03\x02\x02\x02\u0141H\x03\x02\x02\x02\u0142" +
		"\u0140\x03\x02\x02\x02\u0143\u0145\t\b\x02\x02\u0144\u0143\x03\x02\x02" +
		"\x02\u0145\u0146\x03\x02\x02\x02\u0146\u0144\x03\x02\x02\x02\u0146\u0147" +
		"\x03\x02\x02\x02\u0147\u0148\x03\x02\x02\x02\u0148\u0149\b%\t\x02\u0149" +
		"J\x03\x02\x02\x02\u014A\u014B\x071\x02\x02\u014B\u014C\x07,\x02\x02\u014C" +
		"\u0151\x03\x02\x02\x02\u014D\u0150\x05K&\x02\u014E\u0150\v\x02\x02\x02" +
		"\u014F\u014D\x03\x02\x02\x02\u014F\u014E\x03\x02\x02\x02\u0150\u0153\x03" +
		"\x02\x02\x02\u0151\u0152\x03\x02\x02\x02\u0151\u014F\x03\x02\x02\x02\u0152" +
		"\u0154\x03\x02\x02\x02\u0153\u0151\x03\x02\x02\x02\u0154\u0155\x07,\x02" +
		"\x02\u0155\u0156\x071\x02\x02\u0156\u0157\x03\x02\x02\x02\u0157\u0158" +
		"\b&\n\x02\u0158L\x03\x02\x02\x02\u0159\u015D\x07^\x02\x02\u015A\u015C" +
		"\t\b\x02\x02\u015B\u015A\x03\x02\x02\x02\u015C\u015F\x03\x02\x02\x02\u015D" +
		"\u015B\x03\x02\x02\x02\u015D\u015E\x03\x02\x02\x02\u015E\u0165\x03\x02" +
		"\x02\x02\u015F\u015D\x03\x02\x02\x02\u0160\u0162\x07\x0F\x02\x02\u0161" +
		"\u0160\x03\x02\x02\x02\u0161\u0162\x03\x02\x02\x02\u0162\u0163\x03\x02" +
		"\x02\x02\u0163\u0166\x07\f\x02\x02\u0164\u0166\x04\x0E\x0F\x02\u0165\u0161" +
		"\x03\x02\x02\x02\u0165\u0164\x03\x02\x02\x02\u0166\u0167\x03\x02\x02\x02" +
		"\u0167\u0168\b\'\v\x02\u0168N\x03\x02\x02\x02\u0169\u016A\v\x02\x02\x02" +
		"\u016A\u016B\x03\x02\x02\x02\u016B\u016C\b(\f\x02\u016CP\x03\x02\x02\x02" +
		"\u016D\u016F\t\t\x02\x02\u016E\u0170\t\t\x02\x02\u016F\u016E\x03\x02\x02" +
		"\x02\u016F\u0170\x03\x02\x02\x02\u0170\u0171\x03\x02\x02\x02\u0171\u0172" +
		"\t\n\x02\x02\u0172R\x03\x02\x02\x02\u0173\u0177\t\t\x02\x02\u0174\u0176" +
		"\t\v\x02\x02\u0175\u0174\x03\x02\x02\x02\u0176\u0179\x03\x02\x02\x02\u0177" +
		"\u0175\x03\x02\x02\x02\u0177\u0178\x03\x02\x02\x02\u0178T\x03\x02\x02" +
		"\x02\u0179\u0177\x03\x02\x02\x02\u017A\u017E\t\f\x02\x02\u017B\u017D\t" +
		"\x05\x02\x02\u017C\u017B\x03\x02\x02\x02\u017D\u0180\x03\x02\x02\x02\u017E" +
		"\u017C\x03\x02\x02\x02\u017E\u017F\x03\x02\x02\x02\u017FV\x03\x02\x02" +
		"\x02\u0180\u017E\x03\x02\x02\x02$\x02\xBB\xBD\xC4\xC6\xCC\xCE\xD3\xD5" +
		"\xDD\xDF\xEB\xF1\xF7\xF9\u0106\u010B\u010D\u0116\u012B\u0131\u0136\u0140" +
		"\u0146\u014F\u0151\u015D\u0161\u0165\u016F\u0175\u0177\u017C\u017E\r\x03" +
		"\x02\x02\x03\x03\x03\x03\x04\x04\x03\x05\x05\x03\x06\x06\x03\x07\x07\x03" +
		"#\b\x02\x05\x02\x02\x06\x02\b\x02\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

