// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN_BRACKET = 3;
	public static readonly CLOSE_BRACKET = 4;
	public static readonly OPEN_PAREN = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_BRACE = 7;
	public static readonly CLOSE_BRACE = 8;
	public static readonly ACTUAL = 9;
	public static readonly BREAK = 10;
	public static readonly DO = 11;
	public static readonly ELSE = 12;
	public static readonly EXPECT = 13;
	public static readonly EXPORT = 14;
	public static readonly FOR = 15;
	public static readonly IF = 16;
	public static readonly IN = 17;
	public static readonly IMPORT = 18;
	public static readonly RETURN = 19;
	public static readonly SET = 20;
	public static readonly WHILE = 21;
	public static readonly ASSIGN = 22;
	public static readonly COLON = 23;
	public static readonly COMMA = 24;
	public static readonly DOT = 25;
	public static readonly GENERIC_LEFT = 26;
	public static readonly GENERIC_RIGHT = 27;
	public static readonly HASH = 28;
	public static readonly QUESTION = 29;
	public static readonly FLOAT_LITERAL = 30;
	public static readonly INTEGER_LITERAL = 31;
	public static readonly REGEX_LITERAL = 32;
	public static readonly STRING_LITERAL = 33;
	public static readonly PREPROCESSOR = 34;
	public static readonly ID = 35;
	public static readonly OPERATOR = 36;
	public static readonly NL = 37;
	public static readonly WS = 38;
	public static readonly BLOCK_COMMENT = 39;
	public static readonly LINE_COMMENT = 40;
	public static readonly UNEXPECTED = 41;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "ACTUAL", "BREAK", "DO", "ELSE", "EXPECT", "EXPORT", "FOR", 
		"IF", "IN", "IMPORT", "RETURN", "SET", "WHILE", "ASSIGN", "COLON", "COMMA", 
		"DOT", "GENERIC_LEFT", "GENERIC_RIGHT", "HASH", "QUESTION", "FLOAT_LITERAL", 
		"INTEGER_LITERAL", "REGEX_LITERAL", "STRING_LITERAL", "PREPROCESSOR", 
		"ID", "OPERATOR", "NL", "WS", "BLOCK_COMMENT", "LINE_COMMENT", "UNEXPECTED", 
		"Radix", "DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'actual'", "'break'", "'do'", "'else'", "'expect'", "'export'", "'for'", 
		"'if'", "'in'", "'import'", "'return'", "'set'", "'while'", "'='", "':'", 
		"','", "'.'", "'<|'", "'|>'", "'#'", "'?'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "ACTUAL", "BREAK", "DO", "ELSE", 
		"EXPECT", "EXPORT", "FOR", "IF", "IN", "IMPORT", "RETURN", "SET", "WHILE", 
		"ASSIGN", "COLON", "COMMA", "DOT", "GENERIC_LEFT", "GENERIC_RIGHT", "HASH", 
		"QUESTION", "FLOAT_LITERAL", "INTEGER_LITERAL", "REGEX_LITERAL", "STRING_LITERAL", 
		"PREPROCESSOR", "ID", "OPERATOR", "NL", "WS", "BLOCK_COMMENT", "LINE_COMMENT", 
		"UNEXPECTED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 2:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 3:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 4:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 5:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 34:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 34:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02+\u0152\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03" +
		"\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03" +
		"\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t" +
		"\x03\t\x03\t\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03" +
		"\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\r\x03" +
		"\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03" +
		"\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03" +
		"\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03" +
		"\x13\x03\x13\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x14\x03\x15\x03" +
		"\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03" +
		"\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\xCA" +
		"\n\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x05\x1E\xD0\n\x1E\x03\x1F\x03\x1F" +
		"\x03\x1F\x03\x1F\x07\x1F\xD6\n\x1F\f\x1F\x0E\x1F\xD9\v\x1F\x03\x1F\x03" +
		"\x1F\x03 \x03 \x03 \x03 \x07 \xE1\n \f \x0E \xE4\v \x03 \x03 \x03!\x03" +
		"!\x03!\x03!\x07!\xEC\n!\f!\x0E!\xEF\v!\x03!\x03!\x03\"\x03\"\x07\"\xF5" +
		"\n\"\f\"\x0E\"\xF8\v\"\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03#\x03" +
		"#\x03#\x03#\x03#\x03#\x05#\u0108\n#\x03$\x03$\x03$\x05$\u010D\n$\x03$" +
		"\x03$\x05$\u0111\n$\x03$\x05$\u0114\n$\x05$\u0116\n$\x03$\x03$\x03%\x06" +
		"%\u011B\n%\r%\x0E%\u011C\x03%\x03%\x03&\x03&\x03&\x03&\x03&\x07&\u0126" +
		"\n&\f&\x0E&\u0129\v&\x03&\x03&\x03&\x03&\x03&\x03\'\x03\'\x03\'\x03\'" +
		"\x07\'\u0134\n\'\f\'\x0E\'\u0137\v\'\x03\'\x03\'\x03(\x03(\x03(\x03(\x03" +
		")\x03)\x05)\u0141\n)\x03)\x03)\x03*\x03*\x07*\u0147\n*\f*\x0E*\u014A\v" +
		"*\x03+\x03+\x07+\u014E\n+\f+\x0E+\u0151\v+\x04\xED\u0127\x02\x02,\x03" +
		"\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F\x02\v\x11" +
		"\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02\x11\x1D\x02" +
		"\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02\x18+\x02\x19" +
		"-\x02\x1A/\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02 ;\x02!=\x02" +
		"\"?\x02#A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+Q\x02\x02S\x02" +
		"\x02U\x02\x02\x03\x02\x0F\x03\x02bb\x04\x02^^bb\x03\x02))\n\x02))^^dd" +
		"hhppttvvxx\x05\x02C\\aac|\x06\x022;C\\aac|\x05\x02##\'\',`\x04\x02\v\v" +
		"\"\"\x04\x02\f\f\x0F\x0F\x03\x022;\x04\x02ZZzz\x04\x022;aa\x05\x022;C" +
		"\\c|\x02\u0167\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07" +
		"\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03" +
		"\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03" +
		"\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03" +
		"\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03" +
		"\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02" +
		"\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02" +
		"-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02" +
		"\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x029\x03\x02\x02\x02" +
		"\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02\x02\x02\x02A\x03" +
		"\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02\x02G\x03\x02\x02" +
		"\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03\x02\x02\x02\x02" +
		"O\x03\x02\x02\x02\x03W\x03\x02\x02\x02\x05Z\x03\x02\x02\x02\x07]\x03\x02" +
		"\x02\x02\t`\x03\x02\x02\x02\vc\x03\x02\x02\x02\rf\x03\x02\x02\x02\x0F" +
		"i\x03\x02\x02\x02\x11p\x03\x02\x02\x02\x13v\x03\x02\x02\x02\x15y\x03\x02" +
		"\x02\x02\x17~\x03\x02\x02\x02\x19\x85\x03\x02\x02\x02\x1B\x8C\x03\x02" +
		"\x02\x02\x1D\x90\x03\x02\x02\x02\x1F\x93\x03\x02\x02\x02!\x96\x03\x02" +
		"\x02\x02#\x9D\x03\x02\x02\x02%\xA4\x03\x02\x02\x02\'\xA8\x03\x02\x02\x02" +
		")\xAE\x03\x02\x02\x02+\xB0\x03\x02\x02\x02-\xB2\x03\x02\x02\x02/\xB4\x03" +
		"\x02\x02\x021\xB6\x03\x02\x02\x023\xB9\x03\x02\x02\x025\xBC\x03\x02\x02" +
		"\x027\xBE\x03\x02\x02\x029\xC9\x03\x02\x02\x02;\xCF\x03\x02\x02\x02=\xD1" +
		"\x03\x02\x02\x02?\xDC\x03\x02\x02\x02A\xE7\x03\x02\x02\x02C\xF2\x03\x02" +
		"\x02\x02E\u0107\x03\x02\x02\x02G\u0115\x03\x02\x02\x02I\u011A\x03\x02" +
		"\x02\x02K\u0120\x03\x02\x02\x02M\u012F\x03\x02\x02\x02O\u013A\x03\x02" +
		"\x02\x02Q\u013E\x03\x02\x02\x02S\u0144\x03\x02\x02\x02U\u014B\x03\x02" +
		"\x02\x02WX\x07]\x02\x02XY\b\x02\x02\x02Y\x04\x03\x02\x02\x02Z[\x07_\x02" +
		"\x02[\\\b\x03\x03\x02\\\x06\x03\x02\x02\x02]^\x07*\x02\x02^_\b\x04\x04" +
		"\x02_\b\x03\x02\x02\x02`a\x07+\x02\x02ab\b\x05\x05\x02b\n\x03\x02\x02" +
		"\x02cd\x07}\x02\x02de\b\x06\x06\x02e\f\x03\x02\x02\x02fg\x07\x7F\x02\x02" +
		"gh\b\x07\x07\x02h\x0E\x03\x02\x02\x02ij\x07c\x02\x02jk\x07e\x02\x02kl" +
		"\x07v\x02\x02lm\x07w\x02\x02mn\x07c\x02\x02no\x07n\x02\x02o\x10\x03\x02" +
		"\x02\x02pq\x07d\x02\x02qr\x07t\x02\x02rs\x07g\x02\x02st\x07c\x02\x02t" +
		"u\x07m\x02\x02u\x12\x03\x02\x02\x02vw\x07f\x02\x02wx\x07q\x02\x02x\x14" +
		"\x03\x02\x02\x02yz\x07g\x02\x02z{\x07n\x02\x02{|\x07u\x02\x02|}\x07g\x02" +
		"\x02}\x16\x03\x02\x02\x02~\x7F\x07g\x02\x02\x7F\x80\x07z\x02\x02\x80\x81" +
		"\x07r\x02\x02\x81\x82\x07g\x02\x02\x82\x83\x07e\x02\x02\x83\x84\x07v\x02" +
		"\x02\x84\x18\x03\x02\x02\x02\x85\x86\x07g\x02\x02\x86\x87\x07z\x02\x02" +
		"\x87\x88\x07r\x02\x02\x88\x89\x07q\x02\x02\x89\x8A\x07t\x02\x02\x8A\x8B" +
		"\x07v\x02\x02\x8B\x1A\x03\x02\x02\x02\x8C\x8D\x07h\x02\x02\x8D\x8E\x07" +
		"q\x02\x02\x8E\x8F\x07t\x02\x02\x8F\x1C\x03\x02\x02\x02\x90\x91\x07k\x02" +
		"\x02\x91\x92\x07h\x02\x02\x92\x1E\x03\x02\x02\x02\x93\x94\x07k\x02\x02" +
		"\x94\x95\x07p\x02\x02\x95 \x03\x02\x02\x02\x96\x97\x07k\x02\x02\x97\x98" +
		"\x07o\x02\x02\x98\x99\x07r\x02\x02\x99\x9A\x07q\x02\x02\x9A\x9B\x07t\x02" +
		"\x02\x9B\x9C\x07v\x02\x02\x9C\"\x03\x02\x02\x02\x9D\x9E\x07t\x02\x02\x9E" +
		"\x9F\x07g\x02\x02\x9F\xA0\x07v\x02\x02\xA0\xA1\x07w\x02\x02\xA1\xA2\x07" +
		"t\x02\x02\xA2\xA3\x07p\x02\x02\xA3$\x03\x02\x02\x02\xA4\xA5\x07u\x02\x02" +
		"\xA5\xA6\x07g\x02\x02\xA6\xA7\x07v\x02\x02\xA7&\x03\x02\x02\x02\xA8\xA9" +
		"\x07y\x02\x02\xA9\xAA\x07j\x02\x02\xAA\xAB\x07k\x02\x02\xAB\xAC\x07n\x02" +
		"\x02\xAC\xAD\x07g\x02\x02\xAD(\x03\x02\x02\x02\xAE\xAF\x07?\x02\x02\xAF" +
		"*\x03\x02\x02\x02\xB0\xB1\x07<\x02\x02\xB1,\x03\x02\x02\x02\xB2\xB3\x07" +
		".\x02\x02\xB3.\x03\x02\x02\x02\xB4\xB5\x070\x02\x02\xB50\x03\x02\x02\x02" +
		"\xB6\xB7\x07>\x02\x02\xB7\xB8\x07~\x02\x02\xB82\x03\x02\x02\x02\xB9\xBA" +
		"\x07~\x02\x02\xBA\xBB\x07@\x02\x02\xBB4\x03\x02\x02\x02\xBC\xBD\x07%\x02" +
		"\x02\xBD6\x03\x02\x02\x02\xBE\xBF\x07A\x02\x02\xBF8\x03\x02\x02\x02\xC0" +
		"\xC1\x05Q)\x02\xC1\xC2\x05U+\x02\xC2\xC3\x070\x02\x02\xC3\xC4\x05U+\x02" +
		"\xC4\xCA\x03\x02\x02\x02\xC5\xC6\x05S*\x02\xC6\xC7\x070\x02\x02\xC7\xC8" +
		"\x05S*\x02\xC8\xCA\x03\x02\x02\x02\xC9\xC0\x03\x02\x02\x02\xC9\xC5\x03" +
		"\x02\x02\x02\xCA:\x03\x02\x02\x02\xCB\xCC\x05Q)\x02\xCC\xCD\x05U+\x02" +
		"\xCD\xD0\x03\x02\x02\x02\xCE\xD0\x05S*\x02\xCF\xCB\x03\x02\x02\x02\xCF" +
		"\xCE\x03\x02\x02\x02\xD0<\x03\x02\x02\x02\xD1\xD7\x07b\x02\x02\xD2\xD6" +
		"\n\x02\x02\x02\xD3\xD4\x07^\x02\x02\xD4\xD6\t\x03\x02\x02\xD5\xD2\x03" +
		"\x02\x02\x02\xD5\xD3\x03\x02\x02\x02\xD6\xD9\x03\x02\x02\x02\xD7\xD5\x03" +
		"\x02\x02\x02\xD7\xD8\x03\x02\x02\x02\xD8\xDA\x03\x02\x02\x02\xD9\xD7\x03" +
		"\x02\x02\x02\xDA\xDB\x07b\x02\x02\xDB>\x03\x02\x02\x02\xDC\xE2\x07)\x02" +
		"\x02\xDD\xE1\n\x04\x02\x02\xDE\xDF\x07^\x02\x02\xDF\xE1\t\x05\x02\x02" +
		"\xE0\xDD\x03\x02\x02\x02\xE0\xDE\x03\x02\x02\x02\xE1\xE4\x03\x02\x02\x02" +
		"\xE2\xE0\x03\x02\x02\x02\xE2\xE3\x03\x02\x02\x02\xE3\xE5\x03\x02\x02\x02" +
		"\xE4\xE2\x03\x02\x02\x02\xE5\xE6\x07)\x02\x02\xE6@\x03\x02\x02\x02\xE7" +
		"\xE8\x07%\x02\x02\xE8\xE9\x07}\x02\x02\xE9\xED\x03\x02\x02\x02\xEA\xEC" +
		"\v\x02\x02\x02\xEB\xEA\x03\x02\x02\x02\xEC\xEF\x03\x02\x02\x02\xED\xEE" +
		"\x03\x02\x02\x02\xED\xEB\x03\x02\x02\x02\xEE\xF0\x03\x02\x02\x02\xEF\xED" +
		"\x03\x02\x02\x02\xF0\xF1\x07\x7F\x02\x02\xF1B\x03\x02\x02\x02\xF2\xF6" +
		"\t\x06\x02\x02\xF3\xF5\t\x07\x02\x02\xF4\xF3\x03\x02\x02\x02\xF5\xF8\x03" +
		"\x02\x02\x02\xF6\xF4\x03\x02\x02\x02\xF6\xF7\x03\x02\x02\x02\xF7D\x03" +
		"\x02\x02\x02\xF8\xF6\x03\x02\x02\x02\xF9\u0108\t\b\x02\x02\xFA\xFB\x07" +
		"0\x02\x02\xFB\u0108\x070\x02\x02\xFC\xFD\x070\x02\x02\xFD\xFE\x070\x02" +
		"\x02\xFE\u0108\x070\x02\x02\xFF\u0100\x07>\x02\x02\u0100\u0108\x07?\x02" +
		"\x02\u0101\u0102\x07@\x02\x02\u0102\u0108\x07?\x02\x02\u0103\u0104\x07" +
		"?\x02\x02\u0104\u0108\x07?\x02\x02\u0105\u0106\x07#\x02\x02\u0106\u0108" +
		"\x07?\x02\x02\u0107\xF9\x03\x02\x02\x02\u0107\xFA\x03\x02\x02\x02\u0107" +
		"\xFC\x03\x02\x02\x02\u0107\xFF\x03\x02\x02\x02\u0107\u0101\x03\x02\x02" +
		"\x02\u0107\u0103\x03\x02\x02\x02\u0107\u0105\x03\x02\x02\x02\u0108F\x03" +
		"\x02\x02\x02\u0109\u010A\x06$\x02\x02\u010A\u0116\x05I%\x02\u010B\u010D" +
		"\x07\x0F\x02\x02\u010C\u010B\x03\x02\x02\x02\u010C\u010D\x03\x02\x02\x02" +
		"\u010D\u010E\x03\x02\x02\x02\u010E\u0111\x07\f\x02\x02\u010F\u0111\x07" +
		"\x0F\x02\x02\u0110\u010C\x03\x02\x02\x02\u0110\u010F\x03\x02\x02\x02\u0111" +
		"\u0113\x03\x02\x02\x02\u0112\u0114\x05I%\x02\u0113\u0112\x03\x02\x02\x02" +
		"\u0113\u0114\x03\x02\x02\x02\u0114\u0116\x03\x02\x02\x02\u0115\u0109\x03" +
		"\x02\x02\x02\u0115\u0110\x03\x02\x02\x02\u0116\u0117\x03\x02\x02\x02\u0117" +
		"\u0118\b$\b\x02\u0118H\x03\x02\x02\x02\u0119\u011B\t\t\x02\x02\u011A\u0119" +
		"\x03\x02\x02\x02\u011B\u011C\x03\x02\x02\x02\u011C\u011A\x03\x02\x02\x02" +
		"\u011C\u011D\x03\x02\x02\x02\u011D\u011E\x03\x02\x02\x02\u011E\u011F\b" +
		"%\t\x02\u011FJ\x03\x02\x02\x02\u0120\u0121\x071\x02\x02\u0121\u0122\x07" +
		",\x02\x02\u0122\u0127\x03\x02\x02\x02\u0123\u0126\x05K&\x02\u0124\u0126" +
		"\v\x02\x02\x02\u0125\u0123\x03\x02\x02\x02\u0125\u0124\x03\x02\x02\x02" +
		"\u0126\u0129\x03\x02\x02\x02\u0127\u0128\x03\x02\x02\x02\u0127\u0125\x03" +
		"\x02\x02\x02\u0128\u012A\x03\x02\x02\x02\u0129\u0127\x03\x02\x02\x02\u012A" +
		"\u012B\x07,\x02\x02\u012B\u012C\x071\x02\x02\u012C\u012D\x03\x02\x02\x02" +
		"\u012D\u012E\b&\n\x02\u012EL\x03\x02\x02\x02\u012F\u0130\x07/\x02\x02" +
		"\u0130\u0131\x07/\x02\x02\u0131\u0135\x03\x02\x02\x02\u0132\u0134\n\n" +
		"\x02\x02\u0133\u0132\x03\x02\x02\x02\u0134\u0137\x03\x02\x02\x02\u0135" +
		"\u0133\x03\x02\x02\x02\u0135\u0136\x03\x02\x02\x02\u0136\u0138\x03\x02" +
		"\x02\x02\u0137\u0135\x03\x02\x02\x02\u0138\u0139\b\'\n\x02\u0139N\x03" +
		"\x02\x02\x02\u013A\u013B\v\x02\x02\x02\u013B\u013C\x03\x02\x02\x02\u013C" +
		"\u013D\b(\v\x02\u013DP\x03\x02\x02\x02\u013E\u0140\t\v\x02\x02\u013F\u0141" +
		"\t\v\x02\x02\u0140\u013F\x03\x02\x02\x02\u0140\u0141\x03\x02\x02\x02\u0141" +
		"\u0142\x03\x02\x02\x02\u0142\u0143\t\f\x02\x02\u0143R\x03\x02\x02\x02" +
		"\u0144\u0148\t\v\x02\x02\u0145\u0147\t\r\x02\x02\u0146\u0145\x03\x02\x02" +
		"\x02\u0147\u014A\x03\x02\x02\x02\u0148\u0146\x03\x02\x02\x02\u0148\u0149" +
		"\x03\x02\x02\x02\u0149T\x03\x02\x02\x02\u014A\u0148\x03\x02\x02\x02\u014B" +
		"\u014F\t\x0E\x02\x02\u014C\u014E\t\x07\x02\x02\u014D\u014C\x03\x02\x02" +
		"\x02\u014E\u0151\x03\x02\x02\x02\u014F\u014D\x03\x02\x02\x02\u014F\u0150" +
		"\x03\x02\x02\x02\u0150V\x03\x02\x02\x02\u0151\u014F\x03\x02\x02\x02\x19" +
		"\x02\xC9\xCF\xD5\xD7\xE0\xE2\xED\xF6\u0107\u010C\u0110\u0113\u0115\u011C" +
		"\u0125\u0127\u0135\u0140\u0146\u0148\u014D\u014F\f\x03\x02\x02\x03\x03" +
		"\x03\x03\x04\x04\x03\x05\x05\x03\x06\x06\x03\x07\x07\x03$\b\x02\x05\x02" +
		"\x02\x06\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

