// Generated from XonLexer.g4 by ANTLR 4.9.0-SNAPSHOT

 
    import { XonLexerBase } from "./xon-lexer-base";


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class XonLexer extends XonLexerBase {
	public static readonly INDENT = 1;
	public static readonly DEDENT = 2;
	public static readonly OPEN_BRACKET = 3;
	public static readonly CLOSE_BRACKET = 4;
	public static readonly OPEN_PAREN = 5;
	public static readonly CLOSE_PAREN = 6;
	public static readonly OPEN_BRACE = 7;
	public static readonly CLOSE_BRACE = 8;
	public static readonly ABSTRACT = 9;
	public static readonly ACTUAL = 10;
	public static readonly BREAK = 11;
	public static readonly CLASS = 12;
	public static readonly DO = 13;
	public static readonly ELSE = 14;
	public static readonly ENUM = 15;
	public static readonly EXPECT = 16;
	public static readonly EXPORT = 17;
	public static readonly EXTENSION = 18;
	public static readonly FACTORY = 19;
	public static readonly FOR = 20;
	public static readonly IF = 21;
	public static readonly IS = 22;
	public static readonly IN = 23;
	public static readonly IMPORT = 24;
	public static readonly INFIX = 25;
	public static readonly MODEL = 26;
	public static readonly OBJECT = 27;
	public static readonly POSTFIX = 28;
	public static readonly PREFIX = 29;
	public static readonly RETURN = 30;
	public static readonly TYPE = 31;
	public static readonly WHILE = 32;
	public static readonly ASSIGN = 33;
	public static readonly COLON = 34;
	public static readonly COMMA = 35;
	public static readonly DOT = 36;
	public static readonly EXCLAMATION = 37;
	public static readonly HASH = 38;
	public static readonly QUESTION = 39;
	public static readonly GENERIC_LEFT = 40;
	public static readonly GENERIC_RIGHT = 41;
	public static readonly FLOAT_LITERAL = 42;
	public static readonly INTEGER_LITERAL = 43;
	public static readonly REGEX_LITERAL = 44;
	public static readonly STRING_LITERAL = 45;
	public static readonly PREPROCESSOR = 46;
	public static readonly ID = 47;
	public static readonly OPERATOR = 48;
	public static readonly NL = 49;
	public static readonly WS = 50;
	public static readonly BLOCK_COMMENT = 51;
	public static readonly LINE_COMMENT = 52;
	public static readonly UNEXPECTED = 53;
	public static readonly ERROR = 2;
	public static readonly WHITESPACE = 3;
	public static readonly COMMENT_CHANNEL = 4;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN", "ERROR", "WHITESPACE", "COMMENT_CHANNEL",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACE", 
		"CLOSE_BRACE", "ABSTRACT", "ACTUAL", "BREAK", "CLASS", "DO", "ELSE", "ENUM", 
		"EXPECT", "EXPORT", "EXTENSION", "FACTORY", "FOR", "IF", "IS", "IN", "IMPORT", 
		"INFIX", "MODEL", "OBJECT", "POSTFIX", "PREFIX", "RETURN", "TYPE", "WHILE", 
		"ASSIGN", "COLON", "COMMA", "DOT", "EXCLAMATION", "HASH", "QUESTION", 
		"GENERIC_LEFT", "GENERIC_RIGHT", "FLOAT_LITERAL", "INTEGER_LITERAL", "REGEX_LITERAL", 
		"STRING_LITERAL", "PREPROCESSOR", "ID", "OPERATOR", "NL", "WS", "BLOCK_COMMENT", 
		"LINE_COMMENT", "UNEXPECTED", "Radix", "DigitNumber", "AlphabetNumber",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, "'['", "']'", "'('", "')'", "'{'", "'}'", 
		"'abstract'", "'actual'", "'break'", "'class'", "'do'", "'else'", "'enum'", 
		"'expect'", "'export'", "'extension'", "'factory'", "'for'", "'if'", "'is'", 
		"'in'", "'import'", "'infix'", "'model'", "'object'", "'postfix'", "'prefix'", 
		"'return'", "'type'", "'while'", "'='", "':'", "','", "'.'", "'!'", "'#'", 
		"'?'", "'<|'", "'|>'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "INDENT", "DEDENT", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PAREN", 
		"CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "ABSTRACT", "ACTUAL", "BREAK", 
		"CLASS", "DO", "ELSE", "ENUM", "EXPECT", "EXPORT", "EXTENSION", "FACTORY", 
		"FOR", "IF", "IS", "IN", "IMPORT", "INFIX", "MODEL", "OBJECT", "POSTFIX", 
		"PREFIX", "RETURN", "TYPE", "WHILE", "ASSIGN", "COLON", "COMMA", "DOT", 
		"EXCLAMATION", "HASH", "QUESTION", "GENERIC_LEFT", "GENERIC_RIGHT", "FLOAT_LITERAL", 
		"INTEGER_LITERAL", "REGEX_LITERAL", "STRING_LITERAL", "PREPROCESSOR", 
		"ID", "OPERATOR", "NL", "WS", "BLOCK_COMMENT", "LINE_COMMENT", "UNEXPECTED",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(XonLexer._LITERAL_NAMES, XonLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return XonLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(XonLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "XonLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return XonLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return XonLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return XonLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return XonLexer.modeNames; }

	// @Override
	public action(_localctx: RuleContext, ruleIndex: number, actionIndex: number): void {
		switch (ruleIndex) {
		case 0:
			this.OPEN_BRACKET_action(_localctx, actionIndex);
			break;

		case 1:
			this.CLOSE_BRACKET_action(_localctx, actionIndex);
			break;

		case 2:
			this.OPEN_PAREN_action(_localctx, actionIndex);
			break;

		case 3:
			this.CLOSE_PAREN_action(_localctx, actionIndex);
			break;

		case 4:
			this.OPEN_BRACE_action(_localctx, actionIndex);
			break;

		case 5:
			this.CLOSE_BRACE_action(_localctx, actionIndex);
			break;

		case 46:
			this.NL_action(_localctx, actionIndex);
			break;
		}
	}
	private OPEN_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 0:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACKET_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 1:
			this.opened--;
			break;
		}
	}
	private OPEN_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 2:
			this.opened++;
			break;
		}
	}
	private CLOSE_PAREN_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 3:
			this.opened--;
			break;
		}
	}
	private OPEN_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 4:
			this.opened++;
			break;
		}
	}
	private CLOSE_BRACE_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 5:
			this.opened--;
			break;
		}
	}
	private NL_action(_localctx: RuleContext, actionIndex: number): void {
		switch (actionIndex) {
		case 6:
			this.handleLineBreak()
			break;
		}
	}
	// @Override
	public sempred(_localctx: RuleContext, ruleIndex: number, predIndex: number): boolean {
		switch (ruleIndex) {
		case 46:
			return this.NL_sempred(_localctx, predIndex);
		}
		return true;
	}
	private NL_sempred(_localctx: RuleContext, predIndex: number): boolean {
		switch (predIndex) {
		case 0:
			return this.atStartOfInput();
		}
		return true;
	}

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x027\u01B8\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03" +
		"\x03\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x06\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b\x03\b" +
		"\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\t\x03\n\x03\n\x03" +
		"\n\x03\n\x03\n\x03\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\f\x03\f\x03" +
		"\f\x03\r\x03\r\x03\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E" +
		"\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x0F\x03\x10\x03\x10" +
		"\x03\x10\x03\x10\x03\x10\x03\x10\x03\x10\x03\x11\x03\x11\x03\x11\x03\x11" +
		"\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x11\x03\x12\x03\x12\x03\x12" +
		"\x03\x12\x03\x12\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x13" +
		"\x03\x14\x03\x14\x03\x14\x03\x15\x03\x15\x03\x15\x03\x16\x03\x16\x03\x16" +
		"\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18" +
		"\x03\x18\x03\x18\x03\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x19\x03\x19" +
		"\x03\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x03\x1B" +
		"\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1C\x03\x1C" +
		"\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D" +
		"\x03\x1D\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1F" +
		"\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03 \x03 \x03!\x03!\x03\"\x03" +
		"\"\x03#\x03#\x03$\x03$\x03%\x03%\x03&\x03&\x03\'\x03\'\x03\'\x03(\x03" +
		"(\x03(\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x03)\x05)\u0130\n)\x03" +
		"*\x03*\x03*\x03*\x05*\u0136\n*\x03+\x03+\x03+\x03+\x07+\u013C\n+\f+\x0E" +
		"+\u013F\v+\x03+\x03+\x03,\x03,\x03,\x03,\x07,\u0147\n,\f,\x0E,\u014A\v" +
		",\x03,\x03,\x03-\x03-\x03-\x03-\x07-\u0152\n-\f-\x0E-\u0155\v-\x03-\x03" +
		"-\x03.\x03.\x07.\u015B\n.\f.\x0E.\u015E\v.\x03/\x03/\x03/\x03/\x03/\x03" +
		"/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x03/\x05/\u016E\n/\x030\x030\x03" +
		"0\x050\u0173\n0\x030\x030\x050\u0177\n0\x030\x050\u017A\n0\x050\u017C" +
		"\n0\x030\x030\x031\x061\u0181\n1\r1\x0E1\u0182\x031\x031\x032\x032\x03" +
		"2\x032\x032\x072\u018C\n2\f2\x0E2\u018F\v2\x032\x032\x032\x032\x032\x03" +
		"3\x033\x033\x033\x073\u019A\n3\f3\x0E3\u019D\v3\x033\x033\x034\x034\x03" +
		"4\x034\x035\x035\x055\u01A7\n5\x035\x035\x036\x036\x076\u01AD\n6\f6\x0E" +
		"6\u01B0\v6\x037\x037\x077\u01B4\n7\f7\x0E7\u01B7\v7\x04\u0153\u018D\x02" +
		"\x028\x03\x02\x05\x05\x02\x06\x07\x02\x07\t\x02\b\v\x02\t\r\x02\n\x0F" +
		"\x02\v\x11\x02\f\x13\x02\r\x15\x02\x0E\x17\x02\x0F\x19\x02\x10\x1B\x02" +
		"\x11\x1D\x02\x12\x1F\x02\x13!\x02\x14#\x02\x15%\x02\x16\'\x02\x17)\x02" +
		"\x18+\x02\x19-\x02\x1A/\x02\x1B1\x02\x1C3\x02\x1D5\x02\x1E7\x02\x1F9\x02" +
		" ;\x02!=\x02\"?\x02#A\x02$C\x02%E\x02&G\x02\'I\x02(K\x02)M\x02*O\x02+" +
		"Q\x02,S\x02-U\x02.W\x02/Y\x020[\x021]\x022_\x023a\x024c\x025e\x026g\x02" +
		"7i\x02\x02k\x02\x02m\x02\x02\x03\x02\x0F\x03\x02bb\x04\x02^^bb\x03\x02" +
		"))\n\x02))^^ddhhppttvvxx\x05\x02C\\aac|\x06\x022;C\\aac|\x04\x02\'\'," +
		"`\x04\x02\v\v\"\"\x04\x02\f\f\x0F\x0F\x03\x022;\x04\x02ZZzz\x04\x022;" +
		"aa\x05\x022;C\\c|\x02\u01CD\x02\x03\x03\x02\x02\x02\x02\x05\x03\x02\x02" +
		"\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02\v\x03\x02\x02\x02" +
		"\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11\x03\x02\x02\x02" +
		"\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17\x03\x02\x02\x02" +
		"\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D\x03\x02\x02\x02" +
		"\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03\x02\x02\x02\x02" +
		"%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02\x02\x02+\x03" +
		"\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x021\x03\x02\x02" +
		"\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02\x02\x02\x02" +
		"9\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02\x02?\x03\x02" +
		"\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03\x02\x02\x02" +
		"\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02\x02\x02M\x03" +
		"\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02S\x03\x02\x02" +
		"\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02\x02\x02\x02" +
		"[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02\x02a\x03\x02" +
		"\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02\x02\x02g\x03\x02\x02\x02" +
		"\x03o\x03\x02\x02\x02\x05r\x03\x02\x02\x02\x07u\x03\x02\x02\x02\tx\x03" +
		"\x02\x02\x02\v{\x03\x02\x02\x02\r~\x03\x02\x02\x02\x0F\x81\x03\x02\x02" +
		"\x02\x11\x8A\x03\x02\x02\x02\x13\x91\x03\x02\x02\x02\x15\x97\x03\x02\x02" +
		"\x02\x17\x9D\x03\x02\x02\x02\x19\xA0\x03\x02\x02\x02\x1B\xA5\x03\x02\x02" +
		"\x02\x1D\xAA\x03\x02\x02\x02\x1F\xB1\x03\x02\x02\x02!\xB8\x03\x02\x02" +
		"\x02#\xC2\x03\x02\x02\x02%\xCA\x03\x02\x02\x02\'\xCE\x03\x02\x02\x02)" +
		"\xD1\x03\x02\x02\x02+\xD4\x03\x02\x02\x02-\xD7\x03\x02\x02\x02/\xDE\x03" +
		"\x02\x02\x021\xE4\x03\x02\x02\x023\xEA\x03\x02\x02\x025\xF1\x03\x02\x02" +
		"\x027\xF9\x03\x02\x02\x029\u0100\x03\x02\x02\x02;\u0107\x03\x02\x02\x02" +
		"=\u010C\x03\x02\x02\x02?\u0112\x03\x02\x02\x02A\u0114\x03\x02\x02\x02" +
		"C\u0116\x03\x02\x02\x02E\u0118\x03\x02\x02\x02G\u011A\x03\x02\x02\x02" +
		"I\u011C\x03\x02\x02\x02K\u011E\x03\x02\x02\x02M\u0120\x03\x02\x02\x02" +
		"O\u0123\x03\x02\x02\x02Q\u012F\x03\x02\x02\x02S\u0135\x03\x02\x02\x02" +
		"U\u0137\x03\x02\x02\x02W\u0142\x03\x02\x02\x02Y\u014D\x03\x02\x02\x02" +
		"[\u0158\x03\x02\x02\x02]\u016D\x03\x02\x02\x02_\u017B\x03\x02\x02\x02" +
		"a\u0180\x03\x02\x02\x02c\u0186\x03\x02\x02\x02e\u0195\x03\x02\x02\x02" +
		"g\u01A0\x03\x02\x02\x02i\u01A4\x03\x02\x02\x02k\u01AA\x03\x02\x02\x02" +
		"m\u01B1\x03\x02\x02\x02op\x07]\x02\x02pq\b\x02\x02\x02q\x04\x03\x02\x02" +
		"\x02rs\x07_\x02\x02st\b\x03\x03\x02t\x06\x03\x02\x02\x02uv\x07*\x02\x02" +
		"vw\b\x04\x04\x02w\b\x03\x02\x02\x02xy\x07+\x02\x02yz\b\x05\x05\x02z\n" +
		"\x03\x02\x02\x02{|\x07}\x02\x02|}\b\x06\x06\x02}\f\x03\x02\x02\x02~\x7F" +
		"\x07\x7F\x02\x02\x7F\x80\b\x07\x07\x02\x80\x0E\x03\x02\x02\x02\x81\x82" +
		"\x07c\x02\x02\x82\x83\x07d\x02\x02\x83\x84\x07u\x02\x02\x84\x85\x07v\x02" +
		"\x02\x85\x86\x07t\x02\x02\x86\x87\x07c\x02\x02\x87\x88\x07e\x02\x02\x88" +
		"\x89\x07v\x02\x02\x89\x10\x03\x02\x02\x02\x8A\x8B\x07c\x02\x02\x8B\x8C" +
		"\x07e\x02\x02\x8C\x8D\x07v\x02\x02\x8D\x8E\x07w\x02\x02\x8E\x8F\x07c\x02" +
		"\x02\x8F\x90\x07n\x02\x02\x90\x12\x03\x02\x02\x02\x91\x92\x07d\x02\x02" +
		"\x92\x93\x07t\x02\x02\x93\x94\x07g\x02\x02\x94\x95\x07c\x02\x02\x95\x96" +
		"\x07m\x02\x02\x96\x14\x03\x02\x02\x02\x97\x98\x07e\x02\x02\x98\x99\x07" +
		"n\x02\x02\x99\x9A\x07c\x02\x02\x9A\x9B\x07u\x02\x02\x9B\x9C\x07u\x02\x02" +
		"\x9C\x16\x03\x02\x02\x02\x9D\x9E\x07f\x02\x02\x9E\x9F\x07q\x02\x02\x9F" +
		"\x18\x03\x02\x02\x02\xA0\xA1\x07g\x02\x02\xA1\xA2\x07n\x02\x02\xA2\xA3" +
		"\x07u\x02\x02\xA3\xA4\x07g\x02\x02\xA4\x1A\x03\x02\x02\x02\xA5\xA6\x07" +
		"g\x02\x02\xA6\xA7\x07p\x02\x02\xA7\xA8\x07w\x02\x02\xA8\xA9\x07o\x02\x02" +
		"\xA9\x1C\x03\x02\x02\x02\xAA\xAB\x07g\x02\x02\xAB\xAC\x07z\x02\x02\xAC" +
		"\xAD\x07r\x02\x02\xAD\xAE\x07g\x02\x02\xAE\xAF\x07e\x02\x02\xAF\xB0\x07" +
		"v\x02\x02\xB0\x1E\x03\x02\x02\x02\xB1\xB2\x07g\x02\x02\xB2\xB3\x07z\x02" +
		"\x02\xB3\xB4\x07r\x02\x02\xB4\xB5\x07q\x02\x02\xB5\xB6\x07t\x02\x02\xB6" +
		"\xB7\x07v\x02\x02\xB7 \x03\x02\x02\x02\xB8\xB9\x07g\x02\x02\xB9\xBA\x07" +
		"z\x02\x02\xBA\xBB\x07v\x02\x02\xBB\xBC\x07g\x02\x02\xBC\xBD\x07p\x02\x02" +
		"\xBD\xBE\x07u\x02\x02\xBE\xBF\x07k\x02\x02\xBF\xC0\x07q\x02\x02\xC0\xC1" +
		"\x07p\x02\x02\xC1\"\x03\x02\x02\x02\xC2\xC3\x07h\x02\x02\xC3\xC4\x07c" +
		"\x02\x02\xC4\xC5\x07e\x02\x02\xC5\xC6\x07v\x02\x02\xC6\xC7\x07q\x02\x02" +
		"\xC7\xC8\x07t\x02\x02\xC8\xC9\x07{\x02\x02\xC9$\x03\x02\x02\x02\xCA\xCB" +
		"\x07h\x02\x02\xCB\xCC\x07q\x02\x02\xCC\xCD\x07t\x02\x02\xCD&\x03\x02\x02" +
		"\x02\xCE\xCF\x07k\x02\x02\xCF\xD0\x07h\x02\x02\xD0(\x03\x02\x02\x02\xD1" +
		"\xD2\x07k\x02\x02\xD2\xD3\x07u\x02\x02\xD3*\x03\x02\x02\x02\xD4\xD5\x07" +
		"k\x02\x02\xD5\xD6\x07p\x02\x02\xD6,\x03\x02\x02\x02\xD7\xD8\x07k\x02\x02" +
		"\xD8\xD9\x07o\x02\x02\xD9\xDA\x07r\x02\x02\xDA\xDB\x07q\x02\x02\xDB\xDC" +
		"\x07t\x02\x02\xDC\xDD\x07v\x02\x02\xDD.\x03\x02\x02\x02\xDE\xDF\x07k\x02" +
		"\x02\xDF\xE0\x07p\x02\x02\xE0\xE1\x07h\x02\x02\xE1\xE2\x07k\x02\x02\xE2" +
		"\xE3\x07z\x02\x02\xE30\x03\x02\x02\x02\xE4\xE5\x07o\x02\x02\xE5\xE6\x07" +
		"q\x02\x02\xE6\xE7\x07f\x02\x02\xE7\xE8\x07g\x02\x02\xE8\xE9\x07n\x02\x02" +
		"\xE92\x03\x02\x02\x02\xEA\xEB\x07q\x02\x02\xEB\xEC\x07d\x02\x02\xEC\xED" +
		"\x07l\x02\x02\xED\xEE\x07g\x02\x02\xEE\xEF\x07e\x02\x02\xEF\xF0\x07v\x02" +
		"\x02\xF04\x03\x02\x02\x02\xF1\xF2\x07r\x02\x02\xF2\xF3\x07q\x02\x02\xF3" +
		"\xF4\x07u\x02\x02\xF4\xF5\x07v\x02\x02\xF5\xF6\x07h\x02\x02\xF6\xF7\x07" +
		"k\x02\x02\xF7\xF8\x07z\x02\x02\xF86\x03\x02\x02\x02\xF9\xFA\x07r\x02\x02" +
		"\xFA\xFB\x07t\x02\x02\xFB\xFC\x07g\x02\x02\xFC\xFD\x07h\x02\x02\xFD\xFE" +
		"\x07k\x02\x02\xFE\xFF\x07z\x02\x02\xFF8\x03\x02\x02\x02\u0100\u0101\x07" +
		"t\x02\x02\u0101\u0102\x07g\x02\x02\u0102\u0103\x07v\x02\x02\u0103\u0104" +
		"\x07w\x02\x02\u0104\u0105\x07t\x02\x02\u0105\u0106\x07p\x02\x02\u0106" +
		":\x03\x02\x02\x02\u0107\u0108\x07v\x02\x02\u0108\u0109\x07{\x02\x02\u0109" +
		"\u010A\x07r\x02\x02\u010A\u010B\x07g\x02\x02\u010B<\x03\x02\x02\x02\u010C" +
		"\u010D\x07y\x02\x02\u010D\u010E\x07j\x02\x02\u010E\u010F\x07k\x02\x02" +
		"\u010F\u0110\x07n\x02\x02\u0110\u0111\x07g\x02\x02\u0111>\x03\x02\x02" +
		"\x02\u0112\u0113\x07?\x02\x02\u0113@\x03\x02\x02\x02\u0114\u0115\x07<" +
		"\x02\x02\u0115B\x03\x02\x02\x02\u0116\u0117\x07.\x02\x02\u0117D\x03\x02" +
		"\x02\x02\u0118\u0119\x070\x02\x02\u0119F\x03\x02\x02\x02\u011A\u011B\x07" +
		"#\x02\x02\u011BH\x03\x02\x02\x02\u011C\u011D\x07%\x02\x02\u011DJ\x03\x02" +
		"\x02\x02\u011E\u011F\x07A\x02\x02\u011FL\x03\x02\x02\x02\u0120\u0121\x07" +
		">\x02\x02\u0121\u0122\x07~\x02\x02\u0122N\x03\x02\x02\x02\u0123\u0124" +
		"\x07~\x02\x02\u0124\u0125\x07@\x02\x02\u0125P\x03\x02\x02\x02\u0126\u0127" +
		"\x05i5\x02\u0127\u0128\x05m7\x02\u0128\u0129\x070\x02\x02\u0129\u012A" +
		"\x05m7\x02\u012A\u0130\x03\x02\x02\x02\u012B\u012C\x05k6\x02\u012C\u012D" +
		"\x070\x02\x02\u012D\u012E\x05k6\x02\u012E\u0130\x03\x02\x02\x02\u012F" +
		"\u0126\x03\x02\x02\x02\u012F\u012B\x03\x02\x02\x02\u0130R\x03\x02\x02" +
		"\x02\u0131\u0132\x05i5\x02\u0132\u0133\x05m7\x02\u0133\u0136\x03\x02\x02" +
		"\x02\u0134\u0136\x05k6\x02\u0135\u0131\x03\x02\x02\x02\u0135\u0134\x03" +
		"\x02\x02\x02\u0136T\x03\x02\x02\x02\u0137\u013D\x07b\x02\x02\u0138\u013C" +
		"\n\x02\x02\x02\u0139\u013A\x07^\x02\x02\u013A\u013C\t\x03\x02\x02\u013B" +
		"\u0138\x03\x02\x02\x02\u013B\u0139\x03\x02\x02\x02\u013C\u013F\x03\x02" +
		"\x02\x02\u013D\u013B\x03\x02\x02\x02\u013D\u013E\x03\x02\x02\x02\u013E" +
		"\u0140\x03\x02\x02\x02\u013F\u013D\x03\x02\x02\x02\u0140\u0141\x07b\x02" +
		"\x02\u0141V\x03\x02\x02\x02\u0142\u0148\x07)\x02\x02\u0143\u0147\n\x04" +
		"\x02\x02\u0144\u0145\x07^\x02\x02\u0145\u0147\t\x05\x02\x02\u0146\u0143" +
		"\x03\x02\x02\x02\u0146\u0144\x03\x02\x02\x02\u0147\u014A\x03\x02\x02\x02" +
		"\u0148\u0146\x03\x02\x02\x02\u0148\u0149\x03\x02\x02\x02\u0149\u014B\x03" +
		"\x02\x02\x02\u014A\u0148\x03\x02\x02\x02\u014B\u014C\x07)\x02\x02\u014C" +
		"X\x03\x02\x02\x02\u014D\u014E\x07%\x02\x02\u014E\u014F\x07}\x02\x02\u014F" +
		"\u0153\x03\x02\x02\x02\u0150\u0152\v\x02\x02\x02\u0151\u0150\x03\x02\x02" +
		"\x02\u0152\u0155\x03\x02\x02\x02\u0153\u0154\x03\x02\x02\x02\u0153\u0151" +
		"\x03\x02\x02\x02\u0154\u0156\x03\x02\x02\x02\u0155\u0153\x03\x02\x02\x02" +
		"\u0156\u0157\x07\x7F\x02\x02\u0157Z\x03\x02\x02\x02\u0158\u015C\t\x06" +
		"\x02\x02\u0159\u015B\t\x07\x02\x02\u015A\u0159\x03\x02\x02\x02\u015B\u015E" +
		"\x03\x02\x02\x02\u015C\u015A\x03\x02\x02\x02\u015C\u015D\x03\x02\x02\x02" +
		"\u015D\\\x03\x02\x02\x02\u015E\u015C\x03\x02\x02\x02\u015F\u016E\t\b\x02" +
		"\x02\u0160\u0161\x070\x02\x02\u0161\u016E\x070\x02\x02\u0162\u0163\x07" +
		"0\x02\x02\u0163\u0164\x070\x02\x02\u0164\u016E\x070\x02\x02\u0165\u0166" +
		"\x07>\x02\x02\u0166\u016E\x07?\x02\x02\u0167\u0168\x07@\x02\x02\u0168" +
		"\u016E\x07?\x02\x02\u0169\u016A\x07?\x02\x02\u016A\u016E\x07?\x02\x02" +
		"\u016B\u016C\x07#\x02\x02\u016C\u016E\x07?\x02\x02\u016D\u015F\x03\x02" +
		"\x02\x02\u016D\u0160\x03\x02\x02\x02\u016D\u0162\x03\x02\x02\x02\u016D" +
		"\u0165\x03\x02\x02\x02\u016D\u0167\x03\x02\x02\x02\u016D\u0169\x03\x02" +
		"\x02\x02\u016D\u016B\x03\x02\x02\x02\u016E^\x03\x02\x02\x02\u016F\u0170" +
		"\x060\x02\x02\u0170\u017C\x05a1\x02\u0171\u0173\x07\x0F\x02\x02\u0172" +
		"\u0171\x03\x02\x02\x02\u0172\u0173\x03\x02\x02\x02\u0173\u0174\x03\x02" +
		"\x02\x02\u0174\u0177\x07\f\x02\x02\u0175\u0177\x07\x0F\x02\x02\u0176\u0172" +
		"\x03\x02\x02\x02\u0176\u0175\x03\x02\x02\x02\u0177\u0179\x03\x02\x02\x02" +
		"\u0178\u017A\x05a1\x02\u0179\u0178\x03\x02\x02\x02\u0179\u017A\x03\x02" +
		"\x02\x02\u017A\u017C\x03\x02\x02\x02\u017B\u016F\x03\x02\x02\x02\u017B" +
		"\u0176\x03\x02\x02\x02\u017C\u017D\x03\x02\x02\x02\u017D\u017E\b0\b\x02" +
		"\u017E`\x03\x02\x02\x02\u017F\u0181\t\t\x02\x02\u0180\u017F\x03\x02\x02" +
		"\x02\u0181\u0182\x03\x02\x02\x02\u0182\u0180\x03\x02\x02\x02\u0182\u0183" +
		"\x03\x02\x02\x02\u0183\u0184\x03\x02\x02\x02\u0184\u0185\b1\t\x02\u0185" +
		"b\x03\x02\x02\x02\u0186\u0187\x071\x02\x02\u0187\u0188\x07,\x02\x02\u0188" +
		"\u018D\x03\x02\x02\x02\u0189\u018C\x05c2\x02\u018A\u018C\v\x02\x02\x02" +
		"\u018B\u0189\x03\x02\x02\x02\u018B\u018A\x03\x02\x02\x02\u018C\u018F\x03" +
		"\x02\x02\x02\u018D\u018E\x03\x02\x02\x02\u018D\u018B\x03\x02\x02\x02\u018E" +
		"\u0190\x03\x02\x02\x02\u018F\u018D\x03\x02\x02\x02\u0190\u0191\x07,\x02" +
		"\x02\u0191\u0192\x071\x02\x02\u0192\u0193\x03\x02\x02\x02\u0193\u0194" +
		"\b2\n\x02\u0194d\x03\x02\x02\x02\u0195\u0196\x07/\x02\x02\u0196\u0197" +
		"\x07/\x02\x02\u0197\u019B\x03\x02\x02\x02\u0198\u019A\n\n\x02\x02\u0199" +
		"\u0198\x03\x02\x02\x02\u019A\u019D\x03\x02\x02\x02\u019B\u0199\x03\x02" +
		"\x02\x02\u019B\u019C\x03\x02\x02\x02\u019C\u019E\x03\x02\x02\x02\u019D" +
		"\u019B\x03\x02\x02\x02\u019E\u019F\b3\n\x02\u019Ff\x03\x02\x02\x02\u01A0" +
		"\u01A1\v\x02\x02\x02\u01A1\u01A2\x03\x02\x02\x02\u01A2\u01A3\b4\v\x02" +
		"\u01A3h\x03\x02\x02\x02\u01A4\u01A6\t\v\x02\x02\u01A5\u01A7\t\v\x02\x02" +
		"\u01A6\u01A5\x03\x02\x02\x02\u01A6\u01A7\x03\x02\x02\x02\u01A7\u01A8\x03" +
		"\x02\x02\x02\u01A8\u01A9\t\f\x02\x02\u01A9j\x03\x02\x02\x02\u01AA\u01AE" +
		"\t\v\x02\x02\u01AB\u01AD\t\r\x02\x02\u01AC\u01AB\x03\x02\x02\x02\u01AD" +
		"\u01B0\x03\x02\x02\x02\u01AE\u01AC\x03\x02\x02\x02\u01AE\u01AF\x03\x02" +
		"\x02\x02\u01AFl\x03\x02\x02\x02\u01B0\u01AE\x03\x02\x02\x02\u01B1\u01B5" +
		"\t\x0E\x02\x02\u01B2\u01B4\t\x07\x02\x02\u01B3\u01B2\x03\x02\x02\x02\u01B4" +
		"\u01B7\x03\x02\x02\x02\u01B5\u01B3\x03\x02\x02\x02\u01B5\u01B6\x03\x02" +
		"\x02\x02\u01B6n\x03\x02\x02\x02\u01B7\u01B5\x03\x02\x02\x02\x19\x02\u012F" +
		"\u0135\u013B\u013D\u0146\u0148\u0153\u015C\u016D\u0172\u0176\u0179\u017B" +
		"\u0182\u018B\u018D\u019B\u01A6\u01AC\u01AE\u01B3\u01B5\f\x03\x02\x02\x03" +
		"\x03\x03\x03\x04\x04\x03\x05\x05\x03\x06\x06\x03\x07\x07\x030\b\x02\x05" +
		"\x02\x02\x06\x02\x02\x04\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!XonLexer.__ATN) {
			XonLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(XonLexer._serializedATN));
		}

		return XonLexer.__ATN;
	}

}

