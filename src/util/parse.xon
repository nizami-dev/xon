import '../grammar/xon-lexer': XonLexer
import '../grammar/xon-parser': XonParser
import '../lib/core': String
import '../tree/attribute/attribute-tree-helper': getAttributeTree
import '../tree/body/body-tree-helper': getBodyTree
import '../tree/definition/definition-tree-helper': getDefinitionTree
import '../tree/expression/expression-tree-helper': getExpressionTree
import '../tree/literal/literal-tree-helper': getLiteralTree
import '../tree/parameter/parameter-tree-helper': getParameterTree
import '../tree/source/source-tree-helper': getSourceTree
import '../tree/statement/statement-tree-helper': getStatementTree
import './throwing-error-listener': ThrowingErrorListener
import 'antlr4ts': CharStreams, CommonTokenStream

#{import * as fs from 'fs'}

parse(code String, sourceName String = undefined) XonParser
  inputStream = CharStreams.fromString(code, sourceName)
  lexer = #{new XonLexer(inputStream)}
  lexer.removeErrorListeners()
  lexer.addErrorListener(#{new ThrowingErrorListener()})
  tokenStream = #{new CommonTokenStream(lexer)}
  parser = #{new XonParser(tokenStream)}
  parser.removeErrorListeners()
  parser.addErrorListener(#{new ThrowingErrorListener()})
  return parser

parseSourceFile(sourceName String)
  code = fs.readFileSync(sourceName).toString()
  return getSourceTree(parse(code, sourceName).source())

parseLiteral(code String) = getLiteralTree(parse(code).literal())

parseExpression(code String) = getExpressionTree(parse(code).expression())

parseStatement(code String) = getStatementTree(parse(code).statement())

parseParameter(code String) = getParameterTree(parse(code).parameter())

parseBody(code String) = getBodyTree(parse(code).body())

parseAttribute(code String) = getAttributeTree(parse(code).attribute())

parseDefinition(code String) = getDefinitionTree(parse(code).definition())

parseSource(code String) = getSourceTree(parse(code).source())
