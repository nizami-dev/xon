{XonLexer} := import '../grammar/xon-lexer'
{XonParser} := import '../grammar/xon-parser'
{String} := import '../lib/core'
{getAttributeTree} := import '../tree/attribute/attribute-tree-helper'
{getBodyTree} := import '../tree/body/body-tree-helper'
{getDefinitionTree} := import '../tree/definition/definition-tree-helper'
{getExpressionTree} := import '../tree/expression/expression-tree-helper'
{getLiteralTree} := import '../tree/literal/literal-tree-helper'
{getParameterTree} := import '../tree/parameter/parameter-tree-helper'
{getSourceTree} := import '../tree/source/source-tree-helper'
{getStatementTree} := import '../tree/statement/statement-tree-helper'
{ThrowingErrorListener} := import './throwing-error-listener'
{CharStreams, CommonTokenStream} := import 'antlr4ts'
#{import * as fs from 'fs'}

parse: (code: String, sourceName: String = undefined) => XonParser
  inputStream := CharStreams.fromString(code, sourceName)
  lexer := #{new XonLexer(inputStream)}
  lexer.removeErrorListeners()
  lexer.addErrorListener(#{new ThrowingErrorListener()})
  tokenStream := #{new CommonTokenStream(lexer)}
  parser := #{new XonParser(tokenStream)}
  parser.removeErrorListeners()
  parser.addErrorListener(#{new ThrowingErrorListener()})
  return parser

parseSourceFile: (sourceName: String) => None
  code := fs.readFileSync(sourceName).toString()
  return getSourceTree(parse(code, sourceName).source())

parseLiteral := (code: String) => getLiteralTree(parse(code).literal())
parseExpression := (code: String) => getExpressionTree(parse(code).expression())
parseStatement := (code: String) => getStatementTree(parse(code).statement())
parseArgument := (code: String) => getArgumentTree(parse(code).argument())
parseParameter := (code: String) => getParameterTree(parse(code).parameter())
parseBody := (code: String) => getBodyTree(parse(code).body())
parseAttribute := (code: String) => getAttributeTree(parse(code).attribute())
parseDefinition := (code: String) => getDefinitionTree(parse(code).definition())
parseSource := (code: String) => getSourceTree(parse(code).source())
