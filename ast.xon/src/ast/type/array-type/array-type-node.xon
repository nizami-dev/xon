ArrayTypeNode(context) is TypeNode
  itemType = context.type()
  generics = [$itemType]

  infix ==(other TypeNode) = other is ArrayTypeNode and $itemType == other.itemType

  useGenericsMap(genericsMap Map<String, TypeNode>) = createArrayType($itemType.useGenericsMap(genericsMap))

  getGenericsMap(type TypeNode) Map<String, TypeNode>:
    if type is not ArrayTypeNode:
      throw Error(`Type "{type.name}" is not an "{$name}" type`)

    entries = $generics
      .map(\x,i: x.getGenericsMap(type.generics[i]).entries())
      .map(\x: Array.from(x))
      .flat()
    return Map<String, TypeNode>(entries)

  -- TODO: is in operator or make $itemType::type as Real type
  toString() = if $itemType is in [FunctionTypeNode, UnionTypeNode]:
    `({$itemType})[]` else `{$itemType}[]`
