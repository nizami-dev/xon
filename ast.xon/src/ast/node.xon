Node
  context #parentContext


#toNodeExtensionMethod("Literal")
#toNodeExtensionMethod("Expression")
#toNodeExtensionMethod("Statement")
#toNodeExtensionMethod("Type")
#toNodeExtensionMethod("Member")


#parentContext() = if $ is Node: "ParserRuleContext"
  else $::type.name.replace("Node", "Context")


#toNodeExtensionMethod(nodeName String)
  #{nodeName}Context.toNode() = select $:
  #{::module.types.filter(\x: s.endsWith("{nodeName}Context"))
    .map(\x: `is {x.name}: {x.name.replace("Context", "Node")}($)`)
    .join("\n")}
  else throw Error("#{nodeName} node not found for {$::type.name}")
